import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/hls.js/dist/hls.min.js
var require_hls_min = __commonJS({
  "node_modules/hls.js/dist/hls.min.js"(exports, module) {
    "undefined" != typeof window && function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.Hls = e() : t.Hls = e();
    }(exports, () => (() => {
      var t = { 21: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { default: () => u });
        var i2 = function() {
          function t3(t4, e3) {
            this.subtle = void 0, this.aesIV = void 0, this.subtle = t4, this.aesIV = e3;
          }
          return t3.prototype.decrypt = function(t4, e3) {
            return this.subtle.decrypt({ name: "AES-CBC", iv: this.aesIV }, e3, t4);
          }, t3;
        }(), n = function() {
          function t3(t4, e3) {
            this.subtle = void 0, this.key = void 0, this.subtle = t4, this.key = e3;
          }
          return t3.prototype.expandKey = function() {
            return this.subtle.importKey("raw", this.key, { name: "AES-CBC" }, false, ["encrypt", "decrypt"]);
          }, t3;
        }(), a = r2(145), s = function() {
          function t3() {
            this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable();
          }
          var e3 = t3.prototype;
          return e3.uint8ArrayToUint32Array_ = function(t4) {
            for (var e4 = new DataView(t4), r3 = new Uint32Array(4), i3 = 0; i3 < 4; i3++)
              r3[i3] = e4.getUint32(4 * i3);
            return r3;
          }, e3.initTable = function() {
            var t4 = this.sBox, e4 = this.invSBox, r3 = this.subMix, i3 = r3[0], n2 = r3[1], a2 = r3[2], s2 = r3[3], o2 = this.invSubMix, l2 = o2[0], u2 = o2[1], d = o2[2], h = o2[3], c = new Uint32Array(256), f = 0, g = 0, v = 0;
            for (v = 0; v < 256; v++)
              c[v] = v < 128 ? v << 1 : v << 1 ^ 283;
            for (v = 0; v < 256; v++) {
              var p = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4;
              p = p >>> 8 ^ 255 & p ^ 99, t4[f] = p, e4[p] = f;
              var m = c[f], y = c[m], E = c[y], T = 257 * c[p] ^ 16843008 * p;
              i3[f] = T << 24 | T >>> 8, n2[f] = T << 16 | T >>> 16, a2[f] = T << 8 | T >>> 24, s2[f] = T, T = 16843009 * E ^ 65537 * y ^ 257 * m ^ 16843008 * f, l2[p] = T << 24 | T >>> 8, u2[p] = T << 16 | T >>> 16, d[p] = T << 8 | T >>> 24, h[p] = T, f ? (f = m ^ c[c[c[E ^ m]]], g ^= c[c[g]]) : f = g = 1;
            }
          }, e3.expandKey = function(t4) {
            for (var e4 = this.uint8ArrayToUint32Array_(t4), r3 = true, i3 = 0; i3 < e4.length && r3; )
              r3 = e4[i3] === this.key[i3], i3++;
            if (!r3) {
              this.key = e4;
              var n2 = this.keySize = e4.length;
              if (4 !== n2 && 6 !== n2 && 8 !== n2)
                throw new Error("Invalid aes key size=" + n2);
              var a2, s2, o2, l2, u2 = this.ksRows = 4 * (n2 + 6 + 1), d = this.keySchedule = new Uint32Array(u2), h = this.invKeySchedule = new Uint32Array(u2), c = this.sBox, f = this.rcon, g = this.invSubMix, v = g[0], p = g[1], m = g[2], y = g[3];
              for (a2 = 0; a2 < u2; a2++)
                a2 < n2 ? o2 = d[a2] = e4[a2] : (l2 = o2, a2 % n2 == 0 ? (l2 = c[(l2 = l2 << 8 | l2 >>> 24) >>> 24] << 24 | c[l2 >>> 16 & 255] << 16 | c[l2 >>> 8 & 255] << 8 | c[255 & l2], l2 ^= f[a2 / n2 | 0] << 24) : n2 > 6 && a2 % n2 == 4 && (l2 = c[l2 >>> 24] << 24 | c[l2 >>> 16 & 255] << 16 | c[l2 >>> 8 & 255] << 8 | c[255 & l2]), d[a2] = o2 = (d[a2 - n2] ^ l2) >>> 0);
              for (s2 = 0; s2 < u2; s2++)
                a2 = u2 - s2, l2 = 3 & s2 ? d[a2] : d[a2 - 4], h[s2] = s2 < 4 || a2 <= 4 ? l2 : v[c[l2 >>> 24]] ^ p[c[l2 >>> 16 & 255]] ^ m[c[l2 >>> 8 & 255]] ^ y[c[255 & l2]], h[s2] = h[s2] >>> 0;
            }
          }, e3.networkToHostOrderSwap = function(t4) {
            return t4 << 24 | (65280 & t4) << 8 | (16711680 & t4) >> 8 | t4 >>> 24;
          }, e3.decrypt = function(t4, e4, r3) {
            for (var i3, n2, a2, s2, o2, l2, u2, d, h, c, f, g, v, p, m = this.keySize + 6, y = this.invKeySchedule, E = this.invSBox, T = this.invSubMix, S = T[0], b = T[1], L = T[2], A = T[3], D = this.uint8ArrayToUint32Array_(r3), k = D[0], R = D[1], I = D[2], w = D[3], C = new Int32Array(t4), _ = new Int32Array(C.length), P = this.networkToHostOrderSwap; e4 < C.length; ) {
              for (h = P(C[e4]), c = P(C[e4 + 1]), f = P(C[e4 + 2]), g = P(C[e4 + 3]), o2 = h ^ y[0], l2 = g ^ y[1], u2 = f ^ y[2], d = c ^ y[3], v = 4, p = 1; p < m; p++)
                i3 = S[o2 >>> 24] ^ b[l2 >> 16 & 255] ^ L[u2 >> 8 & 255] ^ A[255 & d] ^ y[v], n2 = S[l2 >>> 24] ^ b[u2 >> 16 & 255] ^ L[d >> 8 & 255] ^ A[255 & o2] ^ y[v + 1], a2 = S[u2 >>> 24] ^ b[d >> 16 & 255] ^ L[o2 >> 8 & 255] ^ A[255 & l2] ^ y[v + 2], s2 = S[d >>> 24] ^ b[o2 >> 16 & 255] ^ L[l2 >> 8 & 255] ^ A[255 & u2] ^ y[v + 3], o2 = i3, l2 = n2, u2 = a2, d = s2, v += 4;
              i3 = E[o2 >>> 24] << 24 ^ E[l2 >> 16 & 255] << 16 ^ E[u2 >> 8 & 255] << 8 ^ E[255 & d] ^ y[v], n2 = E[l2 >>> 24] << 24 ^ E[u2 >> 16 & 255] << 16 ^ E[d >> 8 & 255] << 8 ^ E[255 & o2] ^ y[v + 1], a2 = E[u2 >>> 24] << 24 ^ E[d >> 16 & 255] << 16 ^ E[o2 >> 8 & 255] << 8 ^ E[255 & l2] ^ y[v + 2], s2 = E[d >>> 24] << 24 ^ E[o2 >> 16 & 255] << 16 ^ E[l2 >> 8 & 255] << 8 ^ E[255 & u2] ^ y[v + 3], _[e4] = P(i3 ^ k), _[e4 + 1] = P(s2 ^ R), _[e4 + 2] = P(a2 ^ I), _[e4 + 3] = P(n2 ^ w), k = h, R = c, I = f, w = g, e4 += 4;
            }
            return _.buffer;
          }, t3;
        }(), o = r2(93), l = r2(63), u = function() {
          function t3(t4, e4) {
            var r3 = (void 0 === e4 ? {} : e4).removePKCS7Padding, i3 = void 0 === r3 || r3;
            if (this.logEnabled = true, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = t4.enableSoftwareAES, this.removePKCS7Padding = i3, i3)
              try {
                var n2 = self.crypto;
                n2 && (this.subtle = n2.subtle || n2.webkitSubtle);
              } catch (t5) {
              }
            null === this.subtle && (this.useSoftware = true);
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null;
          }, e3.isSync = function() {
            return this.useSoftware;
          }, e3.flush = function() {
            var t4 = this.currentResult, e4 = this.remainderData;
            if (!t4 || e4)
              return this.reset(), null;
            var r3, i3, n2, s2 = new Uint8Array(t4);
            return this.reset(), this.removePKCS7Padding ? (n2 = (i3 = (r3 = s2).byteLength) && new DataView(r3.buffer).getUint8(i3 - 1)) ? (0, a.sliceUint8)(r3, 0, i3 - n2) : r3 : s2;
          }, e3.reset = function() {
            this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null);
          }, e3.decrypt = function(t4, e4, r3) {
            var i3 = this;
            return this.useSoftware ? new Promise(function(n2, a2) {
              i3.softwareDecrypt(new Uint8Array(t4), e4, r3);
              var s2 = i3.flush();
              s2 ? n2(s2.buffer) : a2(new Error("[softwareDecrypt] Failed to decrypt data"));
            }) : this.webCryptoDecrypt(new Uint8Array(t4), e4, r3);
          }, e3.softwareDecrypt = function(t4, e4, r3) {
            var i3 = this.currentIV, n2 = this.currentResult, o2 = this.remainderData;
            this.logOnce("JS AES decrypt"), o2 && (t4 = (0, l.appendUint8Array)(o2, t4), this.remainderData = null);
            var u2 = this.getValidChunk(t4);
            if (!u2.length)
              return null;
            i3 && (r3 = i3);
            var d = this.softwareDecrypter;
            d || (d = this.softwareDecrypter = new s()), d.expandKey(e4);
            var h = n2;
            return this.currentResult = d.decrypt(u2.buffer, 0, r3), this.currentIV = (0, a.sliceUint8)(u2, -16).buffer, h || null;
          }, e3.webCryptoDecrypt = function(t4, e4, r3) {
            var a2 = this, s2 = this.subtle;
            return this.key === e4 && this.fastAesKey || (this.key = e4, this.fastAesKey = new n(s2, e4)), this.fastAesKey.expandKey().then(function(e5) {
              return s2 ? (a2.logOnce("WebCrypto AES decrypt"), new i2(s2, new Uint8Array(r3)).decrypt(t4.buffer, e5)) : Promise.reject(new Error("web crypto not initialized"));
            }).catch(function(i3) {
              return o.logger.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + i3.name + ": " + i3.message), a2.onWebCryptoError(t4, e4, r3);
            });
          }, e3.onWebCryptoError = function(t4, e4, r3) {
            this.useSoftware = true, this.logEnabled = true, this.softwareDecrypt(t4, e4, r3);
            var i3 = this.flush();
            if (i3)
              return i3.buffer;
            throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
          }, e3.getValidChunk = function(t4) {
            var e4 = t4, r3 = t4.length - t4.length % 16;
            return r3 !== t4.length && (e4 = (0, a.sliceUint8)(t4, 0, r3), this.remainderData = (0, a.sliceUint8)(t4, r3)), e4;
          }, e3.logOnce = function(t4) {
            this.logEnabled && (o.logger.log("[decrypter]: " + t4), this.logEnabled = false);
          }, t3;
        }();
      }, 181: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { canParse: () => l, decodeFrame: () => f, getID3Data: () => s, getID3Frames: () => c, getTimeStamp: () => u, isFooter: () => a, isHeader: () => n, isTimeStampFrame: () => d, testables: () => E, utf8ArrayToStr: () => y });
        var i2, n = function(t3, e3) {
          return e3 + 10 <= t3.length && 73 === t3[e3] && 68 === t3[e3 + 1] && 51 === t3[e3 + 2] && t3[e3 + 3] < 255 && t3[e3 + 4] < 255 && t3[e3 + 6] < 128 && t3[e3 + 7] < 128 && t3[e3 + 8] < 128 && t3[e3 + 9] < 128;
        }, a = function(t3, e3) {
          return e3 + 10 <= t3.length && 51 === t3[e3] && 68 === t3[e3 + 1] && 73 === t3[e3 + 2] && t3[e3 + 3] < 255 && t3[e3 + 4] < 255 && t3[e3 + 6] < 128 && t3[e3 + 7] < 128 && t3[e3 + 8] < 128 && t3[e3 + 9] < 128;
        }, s = function(t3, e3) {
          for (var r3 = e3, i3 = 0; n(t3, e3); )
            i3 += 10, i3 += o(t3, e3 + 6), a(t3, e3 + 10) && (i3 += 10), e3 += i3;
          if (i3 > 0)
            return t3.subarray(r3, r3 + i3);
        }, o = function(t3, e3) {
          var r3 = 0;
          return r3 = (127 & t3[e3]) << 21, r3 |= (127 & t3[e3 + 1]) << 14, (r3 |= (127 & t3[e3 + 2]) << 7) | 127 & t3[e3 + 3];
        }, l = function(t3, e3) {
          return n(t3, e3) && o(t3, e3 + 6) + 10 <= t3.length - e3;
        }, u = function(t3) {
          for (var e3 = c(t3), r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            if (d(i3))
              return m(i3);
          }
        }, d = function(t3) {
          return t3 && "PRIV" === t3.key && "com.apple.streaming.transportStreamTimestamp" === t3.info;
        }, h = function(t3) {
          var e3 = String.fromCharCode(t3[0], t3[1], t3[2], t3[3]), r3 = o(t3, 4);
          return { type: e3, size: r3, data: t3.subarray(10, 10 + r3) };
        }, c = function(t3) {
          for (var e3 = 0, r3 = []; n(t3, e3); ) {
            for (var i3 = o(t3, e3 + 6), s2 = (e3 += 10) + i3; e3 + 8 < s2; ) {
              var l2 = h(t3.subarray(e3)), u2 = f(l2);
              u2 && r3.push(u2), e3 += l2.size + 10;
            }
            a(t3, e3) && (e3 += 10);
          }
          return r3;
        }, f = function(t3) {
          return "PRIV" === t3.type ? g(t3) : "W" === t3.type[0] ? p(t3) : v(t3);
        }, g = function(t3) {
          if (!(t3.size < 2)) {
            var e3 = y(t3.data, true), r3 = new Uint8Array(t3.data.subarray(e3.length + 1));
            return { key: t3.type, info: e3, data: r3.buffer };
          }
        }, v = function(t3) {
          if (!(t3.size < 2)) {
            if ("TXXX" === t3.type) {
              var e3 = 1, r3 = y(t3.data.subarray(e3), true);
              e3 += r3.length + 1;
              var i3 = y(t3.data.subarray(e3));
              return { key: t3.type, info: r3, data: i3 };
            }
            var n2 = y(t3.data.subarray(1));
            return { key: t3.type, data: n2 };
          }
        }, p = function(t3) {
          if ("WXXX" === t3.type) {
            if (t3.size < 2)
              return;
            var e3 = 1, r3 = y(t3.data.subarray(e3), true);
            e3 += r3.length + 1;
            var i3 = y(t3.data.subarray(e3));
            return { key: t3.type, info: r3, data: i3 };
          }
          var n2 = y(t3.data);
          return { key: t3.type, data: n2 };
        }, m = function(t3) {
          if (8 === t3.data.byteLength) {
            var e3 = new Uint8Array(t3.data), r3 = 1 & e3[3], i3 = (e3[4] << 23) + (e3[5] << 15) + (e3[6] << 7) + e3[7];
            return i3 /= 45, r3 && (i3 += 4772185884e-2), Math.round(i3);
          }
        }, y = function(t3, e3) {
          void 0 === e3 && (e3 = false);
          var r3 = T();
          if (r3) {
            var i3 = r3.decode(t3);
            if (e3) {
              var n2 = i3.indexOf("\0");
              return -1 !== n2 ? i3.substring(0, n2) : i3;
            }
            return i3.replace(/\0/g, "");
          }
          for (var a2, s2, o2, l2 = t3.length, u2 = "", d2 = 0; d2 < l2; ) {
            if (0 === (a2 = t3[d2++]) && e3)
              return u2;
            if (0 !== a2 && 3 !== a2)
              switch (a2 >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                  u2 += String.fromCharCode(a2);
                  break;
                case 12:
                case 13:
                  s2 = t3[d2++], u2 += String.fromCharCode((31 & a2) << 6 | 63 & s2);
                  break;
                case 14:
                  s2 = t3[d2++], o2 = t3[d2++], u2 += String.fromCharCode((15 & a2) << 12 | (63 & s2) << 6 | (63 & o2) << 0);
              }
          }
          return u2;
        }, E = { decodeTextFrame: v };
        function T() {
          return i2 || void 0 === self.TextDecoder || (i2 = new self.TextDecoder("utf-8")), i2;
        }
      }, 182: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { default: () => l });
        var i2 = r2(544), n = r2(851), a = r2(93), s = r2(729), o = r2(973);
        function l(t3) {
          var e3 = new s.EventEmitter(), r3 = function(e4, r4) {
            t3.postMessage({ event: e4, data: r4 });
          };
          e3.on(n.Events.FRAG_DECRYPTED, r3), e3.on(n.Events.ERROR, r3), t3.addEventListener("message", function(s2) {
            var l2 = s2.data;
            switch (l2.cmd) {
              case "init":
                var d2 = JSON.parse(l2.config);
                t3.transmuxer = new i2.default(e3, l2.typeSupported, d2, l2.vendor, l2.id), (0, a.enableLogs)(d2.debug, l2.id), function() {
                  var t4 = function(t5) {
                    a.logger[t5] = function(e5) {
                      r3("workerLog", { logType: t5, message: e5 });
                    };
                  };
                  for (var e4 in a.logger)
                    t4(e4);
                }(), r3("init", null);
                break;
              case "configure":
                t3.transmuxer.configure(l2.config);
                break;
              case "demux":
                var c = t3.transmuxer.push(l2.data, l2.decryptdata, l2.chunkMeta, l2.state);
                (0, i2.isPromise)(c) ? (t3.transmuxer.async = true, c.then(function(e4) {
                  u(t3, e4);
                }).catch(function(t4) {
                  r3(n.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: l2.chunkMeta, fatal: false, error: t4, err: t4, reason: "transmuxer-worker push error" });
                })) : (t3.transmuxer.async = false, u(t3, c));
                break;
              case "flush":
                var f = l2.chunkMeta, g = t3.transmuxer.flush(f);
                (0, i2.isPromise)(g) || t3.transmuxer.async ? ((0, i2.isPromise)(g) || (g = Promise.resolve(g)), g.then(function(e4) {
                  h(t3, e4, f);
                }).catch(function(t4) {
                  r3(n.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: l2.chunkMeta, fatal: false, error: t4, err: t4, reason: "transmuxer-worker flush error" });
                })) : h(t3, g, f);
            }
          });
        }
        function u(t3, e3) {
          if (!((r3 = e3.remuxResult).audio || r3.video || r3.text || r3.id3 || r3.initSegment))
            return false;
          var r3, i3 = [], n2 = e3.remuxResult, a2 = n2.audio, s2 = n2.video;
          return a2 && d(i3, a2), s2 && d(i3, s2), t3.postMessage({ event: "transmuxComplete", data: e3 }, i3), true;
        }
        function d(t3, e3) {
          e3.data1 && t3.push(e3.data1.buffer), e3.data2 && t3.push(e3.data2.buffer);
        }
        function h(t3, e3, r3) {
          e3.reduce(function(e4, r4) {
            return u(t3, r4) || e4;
          }, false) || t3.postMessage({ event: "transmuxComplete", data: e3[0] }), t3.postMessage({ event: "flush", data: r3 });
        }
      }, 544: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { TransmuxConfig: () => st, TransmuxState: () => ot, default: () => it, isPromise: () => at });
        var i2 = r2(851), n = r2(973), a = r2(21), s = r2(965), o = r2(181), l = r2(856);
        function u(t3, e3) {
          return void 0 === t3 && (t3 = ""), void 0 === e3 && (e3 = 9e4), { type: t3, id: -1, pid: -1, inputTimeScale: e3, sequenceNumber: -1, samples: [], dropped: 0 };
        }
        var d = r2(63), h = r2(145), c = function() {
          function t3() {
            this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null;
          }
          var e3 = t3.prototype;
          return e3.resetInitSegment = function(t4, e4, r3, i3) {
            this._id3Track = { type: "id3", id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 };
          }, e3.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.resetContiguity();
          }, e3.resetContiguity = function() {
            this.basePTS = null, this.lastPTS = null, this.frameIndex = 0;
          }, e3.canParse = function(t4, e4) {
            return false;
          }, e3.appendFrame = function(t4, e4, r3) {
          }, e3.demux = function(t4, e4) {
            this.cachedData && (t4 = (0, d.appendUint8Array)(this.cachedData, t4), this.cachedData = null);
            var r3, i3 = o.getID3Data(t4, 0), n2 = i3 ? i3.length : 0, a2 = this._audioTrack, c2 = this._id3Track, g2 = i3 ? o.getTimeStamp(i3) : void 0, v2 = t4.length;
            for ((null === this.basePTS || 0 === this.frameIndex && (0, s.isFiniteNumber)(g2)) && (this.basePTS = f(g2, e4, this.initPTS), this.lastPTS = this.basePTS), null === this.lastPTS && (this.lastPTS = this.basePTS), i3 && i3.length > 0 && c2.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i3, type: l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }); n2 < v2; ) {
              if (this.canParse(t4, n2)) {
                var p2 = this.appendFrame(a2, t4, n2);
                p2 ? (this.frameIndex++, this.lastPTS = p2.sample.pts, r3 = n2 += p2.length) : n2 = v2;
              } else
                o.canParse(t4, n2) ? (i3 = o.getID3Data(t4, n2), c2.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i3, type: l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }), r3 = n2 += i3.length) : n2++;
              if (n2 === v2 && r3 !== v2) {
                var m2 = (0, h.sliceUint8)(t4, r3);
                this.cachedData ? this.cachedData = (0, d.appendUint8Array)(this.cachedData, m2) : this.cachedData = m2;
              }
            }
            return { audioTrack: a2, videoTrack: u(), id3Track: c2, textTrack: u() };
          }, e3.demuxSampleAes = function(t4, e4, r3) {
            return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
          }, e3.flush = function(t4) {
            var e4 = this.cachedData;
            return e4 && (this.cachedData = null, this.demux(e4, 0)), { audioTrack: this._audioTrack, videoTrack: u(), id3Track: this._id3Track, textTrack: u() };
          }, e3.destroy = function() {
          }, t3;
        }(), f = function(t3, e3, r3) {
          return (0, s.isFiniteNumber)(t3) ? 90 * t3 : 9e4 * e3 + (r3 || 0);
        };
        const g = c;
        var v = r2(93);
        function p(t3, e3) {
          return 255 === t3[e3] && 240 == (246 & t3[e3 + 1]);
        }
        function m(t3, e3) {
          return 1 & t3[e3 + 1] ? 7 : 9;
        }
        function y(t3, e3) {
          return (3 & t3[e3 + 3]) << 11 | t3[e3 + 4] << 3 | (224 & t3[e3 + 5]) >>> 5;
        }
        function E(t3, e3) {
          return e3 + 1 < t3.length && p(t3, e3);
        }
        function T(t3, e3) {
          if (E(t3, e3)) {
            var r3 = m(t3, e3);
            if (e3 + r3 >= t3.length)
              return false;
            var i3 = y(t3, e3);
            if (i3 <= r3)
              return false;
            var n2 = e3 + i3;
            return n2 === t3.length || E(t3, n2);
          }
          return false;
        }
        function S(t3, e3, r3, a2, s2) {
          if (!t3.samplerate) {
            var o2 = function(t4, e4, r4, a3) {
              var s3, o3, l2, u2, d2 = navigator.userAgent.toLowerCase(), h2 = a3, c2 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
              s3 = 1 + ((192 & e4[r4 + 2]) >>> 6);
              var f2 = (60 & e4[r4 + 2]) >>> 2;
              if (!(f2 > c2.length - 1))
                return l2 = (1 & e4[r4 + 2]) << 2, l2 |= (192 & e4[r4 + 3]) >>> 6, v.logger.log("manifest codec:" + a3 + ", ADTS type:" + s3 + ", samplingIndex:" + f2), /firefox/i.test(d2) ? f2 >= 6 ? (s3 = 5, u2 = new Array(4), o3 = f2 - 3) : (s3 = 2, u2 = new Array(2), o3 = f2) : -1 !== d2.indexOf("android") ? (s3 = 2, u2 = new Array(2), o3 = f2) : (s3 = 5, u2 = new Array(4), a3 && (-1 !== a3.indexOf("mp4a.40.29") || -1 !== a3.indexOf("mp4a.40.5")) || !a3 && f2 >= 6 ? o3 = f2 - 3 : ((a3 && -1 !== a3.indexOf("mp4a.40.2") && (f2 >= 6 && 1 === l2 || /vivaldi/i.test(d2)) || !a3 && 1 === l2) && (s3 = 2, u2 = new Array(2)), o3 = f2)), u2[0] = s3 << 3, u2[0] |= (14 & f2) >> 1, u2[1] |= (1 & f2) << 7, u2[1] |= l2 << 3, 5 === s3 && (u2[1] |= (14 & o3) >> 1, u2[2] = (1 & o3) << 7, u2[2] |= 8, u2[3] = 0), { config: u2, samplerate: c2[f2], channelCount: l2, codec: "mp4a.40." + s3, manifestCodec: h2 };
              t4.trigger(i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "invalid ADTS sampling index:" + f2 });
            }(e3, r3, a2, s2);
            if (!o2)
              return;
            t3.config = o2.config, t3.samplerate = o2.samplerate, t3.channelCount = o2.channelCount, t3.codec = o2.codec, t3.manifestCodec = o2.manifestCodec, v.logger.log("parsed codec:" + t3.codec + ", rate:" + o2.samplerate + ", channels:" + o2.channelCount);
          }
        }
        function b(t3) {
          return 9216e4 / t3;
        }
        function L(t3, e3, r3, i3, n2) {
          var a2, s2 = i3 + n2 * b(t3.samplerate), o2 = function(t4, e4) {
            var r4 = m(t4, e4);
            if (e4 + r4 <= t4.length) {
              var i4 = y(t4, e4) - r4;
              if (i4 > 0)
                return { headerLength: r4, frameLength: i4 };
            }
          }(e3, r3);
          if (o2) {
            var l2 = o2.frameLength, u2 = o2.headerLength, d2 = u2 + l2, h2 = Math.max(0, r3 + d2 - e3.length);
            h2 ? (a2 = new Uint8Array(d2 - u2)).set(e3.subarray(r3 + u2, e3.length), 0) : a2 = e3.subarray(r3 + u2, r3 + d2);
            var c2 = { unit: a2, pts: s2 };
            return h2 || t3.samples.push(c2), { sample: c2, length: d2, missing: h2 };
          }
          var f2 = e3.length - r3;
          return (a2 = new Uint8Array(f2)).set(e3.subarray(r3, e3.length), 0), { sample: { unit: a2, pts: s2 }, length: f2, missing: -1 };
        }
        function A(t3, e3) {
          return A = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, A(t3, e3);
        }
        const D = function(t3) {
          var e3, r3;
          function i3(e4, r4) {
            var i4;
            return (i4 = t3.call(this) || this).observer = void 0, i4.config = void 0, i4.observer = e4, i4.config = r4, i4;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, A(e3, r3);
          var n2 = i3.prototype;
          return n2.resetInitSegment = function(e4, r4, i4, n3) {
            t3.prototype.resetInitSegment.call(this, e4, r4, i4, n3), this._audioTrack = { container: "audio/adts", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "aac", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
          }, i3.probe = function(t4) {
            if (!t4)
              return false;
            for (var e4 = (o.getID3Data(t4, 0) || []).length, r4 = t4.length; e4 < r4; e4++)
              if (T(t4, e4))
                return v.logger.log("ADTS sync word found !"), true;
            return false;
          }, n2.canParse = function(t4, e4) {
            return function(t5, e5) {
              return function(t6, e6) {
                return e6 + 5 < t6.length;
              }(t5, e5) && p(t5, e5) && y(t5, e5) <= t5.length - e5;
            }(t4, e4);
          }, n2.appendFrame = function(t4, e4, r4) {
            S(t4, this.observer, e4, r4, t4.manifestCodec);
            var i4 = L(t4, e4, r4, this.basePTS, this.frameIndex);
            if (i4 && 0 === i4.missing)
              return i4;
          }, i3;
        }(g);
        var k = /\/emsg[-/]ID3/i;
        const R = function() {
          function t3(t4, e4) {
            this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = e4;
          }
          var e3 = t3.prototype;
          return e3.resetTimeStamp = function() {
          }, e3.resetInitSegment = function(t4, e4, r3, i3) {
            var n2 = this.videoTrack = u("video", 1), a2 = this.audioTrack = u("audio", 1), s2 = this.txtTrack = u("text", 1);
            if (this.id3Track = u("id3", 1), this.timeOffset = 0, t4 && t4.byteLength) {
              var o2 = (0, d.parseInitSegment)(t4);
              if (o2.video) {
                var l2 = o2.video, h2 = l2.id, c2 = l2.timescale, f2 = l2.codec;
                n2.id = h2, n2.timescale = s2.timescale = c2, n2.codec = f2;
              }
              if (o2.audio) {
                var g2 = o2.audio, v2 = g2.id, p2 = g2.timescale, m2 = g2.codec;
                a2.id = v2, a2.timescale = p2, a2.codec = m2;
              }
              s2.id = d.RemuxerTrackIdConfig.text, n2.sampleDuration = 0, n2.duration = a2.duration = i3;
            }
          }, e3.resetContiguity = function() {
          }, t3.probe = function(t4) {
            return t4 = t4.length > 16384 ? t4.subarray(0, 16384) : t4, (0, d.findBox)(t4, ["moof"]).length > 0;
          }, e3.demux = function(t4, e4) {
            this.timeOffset = e4;
            var r3 = t4, i3 = this.videoTrack, n2 = this.txtTrack;
            if (this.config.progressive) {
              this.remainderData && (r3 = (0, d.appendUint8Array)(this.remainderData, t4));
              var a2 = (0, d.segmentValidRange)(r3);
              this.remainderData = a2.remainder, i3.samples = a2.valid || new Uint8Array();
            } else
              i3.samples = r3;
            var s2 = this.extractID3Track(i3, e4);
            return n2.samples = (0, d.parseSamples)(e4, i3), { videoTrack: i3, audioTrack: this.audioTrack, id3Track: s2, textTrack: this.txtTrack };
          }, e3.flush = function() {
            var t4 = this.timeOffset, e4 = this.videoTrack, r3 = this.txtTrack;
            e4.samples = this.remainderData || new Uint8Array(), this.remainderData = null;
            var i3 = this.extractID3Track(e4, this.timeOffset);
            return r3.samples = (0, d.parseSamples)(t4, e4), { videoTrack: e4, audioTrack: u(), id3Track: i3, textTrack: u() };
          }, e3.extractID3Track = function(t4, e4) {
            var r3 = this.id3Track;
            if (t4.samples.length) {
              var i3 = (0, d.findBox)(t4.samples, ["emsg"]);
              i3 && i3.forEach(function(t5) {
                var i4 = (0, d.parseEmsg)(t5);
                if (k.test(i4.schemeIdUri)) {
                  var n2 = (0, s.isFiniteNumber)(i4.presentationTime) ? i4.presentationTime / i4.timeScale : e4 + i4.presentationTimeDelta / i4.timeScale, a2 = 4294967295 === i4.eventDuration ? Number.POSITIVE_INFINITY : i4.eventDuration / i4.timeScale;
                  a2 <= 1e-3 && (a2 = Number.POSITIVE_INFINITY);
                  var o2 = i4.payload;
                  r3.samples.push({ data: o2, len: o2.byteLength, dts: n2, pts: n2, type: l.MetadataSchema.emsg, duration: a2 });
                }
              });
            }
            return r3;
          }, e3.demuxSampleAes = function(t4, e4, r3) {
            return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
          }, e3.destroy = function() {
          }, t3;
        }();
        var I = null, w = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160], C = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3], _ = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]], P = [0, 1, 1, 4];
        function O(t3, e3, r3, i3, n2) {
          if (!(r3 + 24 > e3.length)) {
            var a2 = x(e3, r3);
            if (a2 && r3 + a2.frameLength <= e3.length) {
              var s2 = i3 + n2 * (9e4 * a2.samplesPerFrame / a2.sampleRate), o2 = { unit: e3.subarray(r3, r3 + a2.frameLength), pts: s2, dts: s2 };
              return t3.config = [], t3.channelCount = a2.channelCount, t3.samplerate = a2.sampleRate, t3.samples.push(o2), { sample: o2, length: a2.frameLength, missing: 0 };
            }
          }
        }
        function x(t3, e3) {
          var r3 = t3[e3 + 1] >> 3 & 3, i3 = t3[e3 + 1] >> 1 & 3, n2 = t3[e3 + 2] >> 4 & 15, a2 = t3[e3 + 2] >> 2 & 3;
          if (1 !== r3 && 0 !== n2 && 15 !== n2 && 3 !== a2) {
            var s2 = t3[e3 + 2] >> 1 & 1, o2 = t3[e3 + 3] >> 6, l2 = 1e3 * w[14 * (3 === r3 ? 3 - i3 : 3 === i3 ? 3 : 4) + n2 - 1], u2 = C[3 * (3 === r3 ? 0 : 2 === r3 ? 1 : 2) + a2], d2 = 3 === o2 ? 1 : 2, h2 = _[r3][i3], c2 = P[i3], f2 = 8 * h2 * c2, g2 = Math.floor(h2 * l2 / u2 + s2) * c2;
            if (null === I) {
              var v2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              I = v2 ? parseInt(v2[1]) : 0;
            }
            return !!I && I <= 87 && 2 === i3 && l2 >= 224e3 && 0 === o2 && (t3[e3 + 3] = 128 | t3[e3 + 3]), { sampleRate: u2, channelCount: d2, frameLength: g2, samplesPerFrame: f2 };
          }
        }
        function F(t3, e3) {
          return 255 === t3[e3] && 224 == (224 & t3[e3 + 1]) && 0 != (6 & t3[e3 + 1]);
        }
        function M(t3, e3) {
          return e3 + 1 < t3.length && F(t3, e3);
        }
        function N(t3, e3) {
          if (e3 + 1 < t3.length && F(t3, e3)) {
            var r3 = x(t3, e3), i3 = 4;
            null != r3 && r3.frameLength && (i3 = r3.frameLength);
            var n2 = e3 + i3;
            return n2 === t3.length || M(t3, n2);
          }
          return false;
        }
        const U = function() {
          function t3(t4) {
            this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = t4, this.bytesAvailable = t4.byteLength, this.word = 0, this.bitsAvailable = 0;
          }
          var e3 = t3.prototype;
          return e3.loadWord = function() {
            var t4 = this.data, e4 = this.bytesAvailable, r3 = t4.byteLength - e4, i3 = new Uint8Array(4), n2 = Math.min(4, e4);
            if (0 === n2)
              throw new Error("no bytes available");
            i3.set(t4.subarray(r3, r3 + n2)), this.word = new DataView(i3.buffer).getUint32(0), this.bitsAvailable = 8 * n2, this.bytesAvailable -= n2;
          }, e3.skipBits = function(t4) {
            var e4;
            t4 = Math.min(t4, 8 * this.bytesAvailable + this.bitsAvailable), this.bitsAvailable > t4 ? (this.word <<= t4, this.bitsAvailable -= t4) : (t4 -= this.bitsAvailable, t4 -= (e4 = t4 >> 3) << 3, this.bytesAvailable -= e4, this.loadWord(), this.word <<= t4, this.bitsAvailable -= t4);
          }, e3.readBits = function(t4) {
            var e4 = Math.min(this.bitsAvailable, t4), r3 = this.word >>> 32 - e4;
            if (t4 > 32 && v.logger.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= e4, this.bitsAvailable > 0)
              this.word <<= e4;
            else {
              if (!(this.bytesAvailable > 0))
                throw new Error("no bits available");
              this.loadWord();
            }
            return (e4 = t4 - e4) > 0 && this.bitsAvailable ? r3 << e4 | this.readBits(e4) : r3;
          }, e3.skipLZ = function() {
            var t4;
            for (t4 = 0; t4 < this.bitsAvailable; ++t4)
              if (0 != (this.word & 2147483648 >>> t4))
                return this.word <<= t4, this.bitsAvailable -= t4, t4;
            return this.loadWord(), t4 + this.skipLZ();
          }, e3.skipUEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e3.skipEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e3.readUEG = function() {
            var t4 = this.skipLZ();
            return this.readBits(t4 + 1) - 1;
          }, e3.readEG = function() {
            var t4 = this.readUEG();
            return 1 & t4 ? 1 + t4 >>> 1 : -1 * (t4 >>> 1);
          }, e3.readBoolean = function() {
            return 1 === this.readBits(1);
          }, e3.readUByte = function() {
            return this.readBits(8);
          }, e3.readUShort = function() {
            return this.readBits(16);
          }, e3.readUInt = function() {
            return this.readBits(32);
          }, e3.skipScalingList = function(t4) {
            for (var e4 = 8, r3 = 8, i3 = 0; i3 < t4; i3++)
              0 !== r3 && (r3 = (e4 + this.readEG() + 256) % 256), e4 = 0 === r3 ? e4 : r3;
          }, e3.readSPS = function() {
            var t4, e4, r3, i3 = 0, n2 = 0, a2 = 0, s2 = 0, o2 = this.readUByte.bind(this), l2 = this.readBits.bind(this), u2 = this.readUEG.bind(this), d2 = this.readBoolean.bind(this), h2 = this.skipBits.bind(this), c2 = this.skipEG.bind(this), f2 = this.skipUEG.bind(this), g2 = this.skipScalingList.bind(this);
            o2();
            var v2 = o2();
            if (l2(5), h2(3), o2(), f2(), 100 === v2 || 110 === v2 || 122 === v2 || 244 === v2 || 44 === v2 || 83 === v2 || 86 === v2 || 118 === v2 || 128 === v2) {
              var p2 = u2();
              if (3 === p2 && h2(1), f2(), f2(), h2(1), d2())
                for (e4 = 3 !== p2 ? 8 : 12, r3 = 0; r3 < e4; r3++)
                  d2() && g2(r3 < 6 ? 16 : 64);
            }
            f2();
            var m2 = u2();
            if (0 === m2)
              u2();
            else if (1 === m2)
              for (h2(1), c2(), c2(), t4 = u2(), r3 = 0; r3 < t4; r3++)
                c2();
            f2(), h2(1);
            var y2 = u2(), E2 = u2(), T2 = l2(1);
            0 === T2 && h2(1), h2(1), d2() && (i3 = u2(), n2 = u2(), a2 = u2(), s2 = u2());
            var S2 = [1, 1];
            if (d2() && d2())
              switch (o2()) {
                case 1:
                  S2 = [1, 1];
                  break;
                case 2:
                  S2 = [12, 11];
                  break;
                case 3:
                  S2 = [10, 11];
                  break;
                case 4:
                  S2 = [16, 11];
                  break;
                case 5:
                  S2 = [40, 33];
                  break;
                case 6:
                  S2 = [24, 11];
                  break;
                case 7:
                  S2 = [20, 11];
                  break;
                case 8:
                  S2 = [32, 11];
                  break;
                case 9:
                  S2 = [80, 33];
                  break;
                case 10:
                  S2 = [18, 11];
                  break;
                case 11:
                  S2 = [15, 11];
                  break;
                case 12:
                  S2 = [64, 33];
                  break;
                case 13:
                  S2 = [160, 99];
                  break;
                case 14:
                  S2 = [4, 3];
                  break;
                case 15:
                  S2 = [3, 2];
                  break;
                case 16:
                  S2 = [2, 1];
                  break;
                case 255:
                  S2 = [o2() << 8 | o2(), o2() << 8 | o2()];
              }
            return { width: Math.ceil(16 * (y2 + 1) - 2 * i3 - 2 * n2), height: (2 - T2) * (E2 + 1) * 16 - (T2 ? 2 : 4) * (a2 + s2), pixelRatio: S2 };
          }, e3.readSliceType = function() {
            return this.readUByte(), this.readUEG(), this.readUEG();
          }, t3;
        }(), B = function() {
          function t3(t4, e4, r3) {
            this.keyData = void 0, this.decrypter = void 0, this.keyData = r3, this.decrypter = new a.default(e4, { removePKCS7Padding: false });
          }
          var e3 = t3.prototype;
          return e3.decryptBuffer = function(t4) {
            return this.decrypter.decrypt(t4, this.keyData.key.buffer, this.keyData.iv.buffer);
          }, e3.decryptAacSample = function(t4, e4, r3) {
            var i3 = this, n2 = t4[e4].unit;
            if (!(n2.length <= 16)) {
              var a2 = n2.subarray(16, n2.length - n2.length % 16), s2 = a2.buffer.slice(a2.byteOffset, a2.byteOffset + a2.length);
              this.decryptBuffer(s2).then(function(a3) {
                var s3 = new Uint8Array(a3);
                n2.set(s3, 16), i3.decrypter.isSync() || i3.decryptAacSamples(t4, e4 + 1, r3);
              });
            }
          }, e3.decryptAacSamples = function(t4, e4, r3) {
            for (; ; e4++) {
              if (e4 >= t4.length)
                return void r3();
              if (!(t4[e4].unit.length < 32 || (this.decryptAacSample(t4, e4, r3), this.decrypter.isSync())))
                return;
            }
          }, e3.getAvcEncryptedData = function(t4) {
            for (var e4 = 16 * Math.floor((t4.length - 48) / 160) + 16, r3 = new Int8Array(e4), i3 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i3 += 16)
              r3.set(t4.subarray(n2, n2 + 16), i3);
            return r3;
          }, e3.getAvcDecryptedUnit = function(t4, e4) {
            for (var r3 = new Uint8Array(e4), i3 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i3 += 16)
              t4.set(r3.subarray(i3, i3 + 16), n2);
            return t4;
          }, e3.decryptAvcSample = function(t4, e4, r3, i3, n2) {
            var a2 = this, s2 = (0, d.discardEPB)(n2.data), o2 = this.getAvcEncryptedData(s2);
            this.decryptBuffer(o2.buffer).then(function(o3) {
              n2.data = a2.getAvcDecryptedUnit(s2, o3), a2.decrypter.isSync() || a2.decryptAvcSamples(t4, e4, r3 + 1, i3);
            });
          }, e3.decryptAvcSamples = function(t4, e4, r3, i3) {
            if (t4 instanceof Uint8Array)
              throw new Error("Cannot decrypt samples of type Uint8Array");
            for (; ; e4++, r3 = 0) {
              if (e4 >= t4.length)
                return void i3();
              for (var n2 = t4[e4].units; !(r3 >= n2.length); r3++) {
                var a2 = n2[r3];
                if (!(a2.data.length <= 48 || 1 !== a2.type && 5 !== a2.type || (this.decryptAvcSample(t4, e4, r3, i3, a2), this.decrypter.isSync())))
                  return;
              }
            }
          }, t3;
        }();
        function G() {
          return G = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, G.apply(this, arguments);
        }
        var K = 188;
        function H(t3, e3, r3, i3) {
          return { key: t3, frame: false, pts: e3, dts: r3, units: [], debug: i3, length: 0 };
        }
        function j(t3, e3) {
          return ((31 & t3[e3 + 1]) << 8) + t3[e3 + 2];
        }
        function V(t3, e3) {
          return (31 & t3[e3 + 10]) << 8 | t3[e3 + 11];
        }
        function Y(t3, e3, r3, i3) {
          var n2 = { audio: -1, avc: -1, id3: -1, segmentCodec: "aac" }, a2 = e3 + 3 + ((15 & t3[e3 + 1]) << 8 | t3[e3 + 2]) - 4;
          for (e3 += 12 + ((15 & t3[e3 + 10]) << 8 | t3[e3 + 11]); e3 < a2; ) {
            var s2 = j(t3, e3);
            switch (t3[e3]) {
              case 207:
                if (!i3) {
                  v.logger.log("ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");
                  break;
                }
              case 15:
                -1 === n2.audio && (n2.audio = s2);
                break;
              case 21:
                -1 === n2.id3 && (n2.id3 = s2);
                break;
              case 219:
                if (!i3) {
                  v.logger.log("H.264 with AES-128-CBC slice encryption found in unencrypted stream");
                  break;
                }
              case 27:
                -1 === n2.avc && (n2.avc = s2);
                break;
              case 3:
              case 4:
                true !== r3.mpeg && true !== r3.mp3 ? v.logger.log("MPEG audio found, not supported in this browser") : -1 === n2.audio && (n2.audio = s2, n2.segmentCodec = "mp3");
                break;
              case 36:
                v.logger.warn("Unsupported HEVC stream type found");
            }
            e3 += 5 + ((15 & t3[e3 + 3]) << 8 | t3[e3 + 4]);
          }
          return n2;
        }
        function W(t3) {
          var e3, r3, i3, n2, a2, s2 = 0, o2 = t3.data;
          if (!t3 || 0 === t3.size)
            return null;
          for (; o2[0].length < 19 && o2.length > 1; ) {
            var l2 = new Uint8Array(o2[0].length + o2[1].length);
            l2.set(o2[0]), l2.set(o2[1], o2[0].length), o2[0] = l2, o2.splice(1, 1);
          }
          if (1 === ((e3 = o2[0])[0] << 16) + (e3[1] << 8) + e3[2]) {
            if ((r3 = (e3[4] << 8) + e3[5]) && r3 > t3.size - 6)
              return null;
            var u2 = e3[7];
            192 & u2 && (n2 = 536870912 * (14 & e3[9]) + 4194304 * (255 & e3[10]) + 16384 * (254 & e3[11]) + 128 * (255 & e3[12]) + (254 & e3[13]) / 2, 64 & u2 ? n2 - (a2 = 536870912 * (14 & e3[14]) + 4194304 * (255 & e3[15]) + 16384 * (254 & e3[16]) + 128 * (255 & e3[17]) + (254 & e3[18]) / 2) > 54e5 && (v.logger.warn(Math.round((n2 - a2) / 9e4) + "s delta between PTS and DTS, align them"), n2 = a2) : a2 = n2);
            var d2 = (i3 = e3[8]) + 9;
            if (t3.size <= d2)
              return null;
            t3.size -= d2;
            for (var h2 = new Uint8Array(t3.size), c2 = 0, f2 = o2.length; c2 < f2; c2++) {
              var g2 = (e3 = o2[c2]).byteLength;
              if (d2) {
                if (d2 > g2) {
                  d2 -= g2;
                  continue;
                }
                e3 = e3.subarray(d2), g2 -= d2, d2 = 0;
              }
              h2.set(e3, s2), s2 += g2;
            }
            return r3 && (r3 -= i3 + 3), { data: h2, pts: n2, dts: a2, len: r3 };
          }
          return null;
        }
        function q(t3, e3) {
          if (t3.units.length && t3.frame) {
            if (void 0 === t3.pts) {
              var r3 = e3.samples, i3 = r3.length;
              if (!i3)
                return void e3.dropped++;
              var n2 = r3[i3 - 1];
              t3.pts = n2.pts, t3.dts = n2.dts;
            }
            e3.samples.push(t3);
          }
          t3.debug.length && v.logger.log(t3.pts + "/" + t3.dts + ":" + t3.debug);
        }
        const X = function() {
          function t3(t4, e4, r3) {
            this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = false, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._avcTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.observer = t4, this.config = e4, this.typeSupported = r3;
          }
          t3.probe = function(e4) {
            var r3 = t3.syncOffset(e4);
            return r3 > 0 && v.logger.warn("MPEG2-TS detected but first sync word found @ offset " + r3), -1 !== r3;
          }, t3.syncOffset = function(t4) {
            for (var e4 = t4.length, r3 = Math.min(940, t4.length - K) + 1, i3 = 0; i3 < r3; ) {
              for (var n2 = false, a2 = i3; a2 < e4 && 71 === t4[a2]; a2 += K)
                if (n2 || 0 !== j(t4, a2) || (n2 = true), n2 && a2 + K > r3)
                  return i3;
              i3++;
            }
            return -1;
          }, t3.createTrack = function(t4, e4) {
            return { container: "video" === t4 || "audio" === t4 ? "video/mp2t" : void 0, type: t4, id: d.RemuxerTrackIdConfig[t4], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: "audio" === t4 ? e4 : void 0 };
          };
          var e3 = t3.prototype;
          return e3.resetInitSegment = function(e4, r3, i3, n2) {
            this.pmtParsed = false, this._pmtId = -1, this._avcTrack = t3.createTrack("video"), this._audioTrack = t3.createTrack("audio", n2), this._id3Track = t3.createTrack("id3"), this._txtTrack = t3.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.audioCodec = r3, this.videoCodec = i3, this._duration = n2;
          }, e3.resetTimeStamp = function() {
          }, e3.resetContiguity = function() {
            var t4 = this._audioTrack, e4 = this._avcTrack, r3 = this._id3Track;
            t4 && (t4.pesData = null), e4 && (e4.pesData = null), r3 && (r3.pesData = null), this.aacOverFlow = null, this.avcSample = null, this.remainderData = null;
          }, e3.demux = function(e4, r3, a2, s2) {
            var o2;
            void 0 === a2 && (a2 = false), void 0 === s2 && (s2 = false), a2 || (this.sampleAes = null);
            var l2 = this._avcTrack, u2 = this._audioTrack, h2 = this._id3Track, c2 = this._txtTrack, f2 = l2.pid, g2 = l2.pesData, p2 = u2.pid, m2 = h2.pid, y2 = u2.pesData, E2 = h2.pesData, T2 = null, S2 = this.pmtParsed, b2 = this._pmtId, L2 = e4.length;
            if (this.remainderData && (L2 = (e4 = (0, d.appendUint8Array)(this.remainderData, e4)).length, this.remainderData = null), L2 < K && !s2)
              return this.remainderData = e4, { audioTrack: u2, videoTrack: l2, id3Track: h2, textTrack: c2 };
            var A2 = Math.max(0, t3.syncOffset(e4));
            (L2 -= (L2 - A2) % K) < e4.byteLength && !s2 && (this.remainderData = new Uint8Array(e4.buffer, L2, e4.buffer.byteLength - L2));
            for (var D2 = 0, k2 = A2; k2 < L2; k2 += K)
              if (71 === e4[k2]) {
                var R2 = !!(64 & e4[k2 + 1]), I2 = j(e4, k2), w2 = void 0;
                if ((48 & e4[k2 + 3]) >> 4 > 1) {
                  if ((w2 = k2 + 5 + e4[k2 + 4]) === k2 + K)
                    continue;
                } else
                  w2 = k2 + 4;
                switch (I2) {
                  case f2:
                    R2 && (g2 && (o2 = W(g2)) && this.parseAVCPES(l2, c2, o2, false), g2 = { data: [], size: 0 }), g2 && (g2.data.push(e4.subarray(w2, k2 + K)), g2.size += k2 + K - w2);
                    break;
                  case p2:
                    if (R2) {
                      if (y2 && (o2 = W(y2)))
                        switch (u2.segmentCodec) {
                          case "aac":
                            this.parseAACPES(u2, o2);
                            break;
                          case "mp3":
                            this.parseMPEGPES(u2, o2);
                        }
                      y2 = { data: [], size: 0 };
                    }
                    y2 && (y2.data.push(e4.subarray(w2, k2 + K)), y2.size += k2 + K - w2);
                    break;
                  case m2:
                    R2 && (E2 && (o2 = W(E2)) && this.parseID3PES(h2, o2), E2 = { data: [], size: 0 }), E2 && (E2.data.push(e4.subarray(w2, k2 + K)), E2.size += k2 + K - w2);
                    break;
                  case 0:
                    R2 && (w2 += e4[w2] + 1), b2 = this._pmtId = V(e4, w2);
                    break;
                  case b2:
                    R2 && (w2 += e4[w2] + 1);
                    var C2 = Y(e4, w2, this.typeSupported, a2);
                    (f2 = C2.avc) > 0 && (l2.pid = f2), (p2 = C2.audio) > 0 && (u2.pid = p2, u2.segmentCodec = C2.segmentCodec), (m2 = C2.id3) > 0 && (h2.pid = m2), null === T2 || S2 || (v.logger.warn("MPEG-TS PMT found at " + k2 + " after unknown PID '" + T2 + "'. Backtracking to sync byte @" + A2 + " to parse all TS packets."), T2 = null, k2 = A2 - 188), S2 = this.pmtParsed = true;
                    break;
                  case 17:
                  case 8191:
                    break;
                  default:
                    T2 = I2;
                }
              } else
                D2++;
            D2 > 0 && this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: "Found " + D2 + " TS packet/s that do not start with 0x47" }), l2.pesData = g2, u2.pesData = y2, h2.pesData = E2;
            var _2 = { audioTrack: u2, videoTrack: l2, id3Track: h2, textTrack: c2 };
            return s2 && this.extractRemainingSamples(_2), _2;
          }, e3.flush = function() {
            var t4, e4 = this.remainderData;
            return this.remainderData = null, t4 = e4 ? this.demux(e4, -1, false, true) : { videoTrack: this._avcTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(t4), this.sampleAes ? this.decrypt(t4, this.sampleAes) : t4;
          }, e3.extractRemainingSamples = function(t4) {
            var e4, r3 = t4.audioTrack, i3 = t4.videoTrack, n2 = t4.id3Track, a2 = t4.textTrack, s2 = i3.pesData, o2 = r3.pesData, l2 = n2.pesData;
            if (s2 && (e4 = W(s2)) ? (this.parseAVCPES(i3, a2, e4, true), i3.pesData = null) : i3.pesData = s2, o2 && (e4 = W(o2))) {
              switch (r3.segmentCodec) {
                case "aac":
                  this.parseAACPES(r3, e4);
                  break;
                case "mp3":
                  this.parseMPEGPES(r3, e4);
              }
              r3.pesData = null;
            } else
              null != o2 && o2.size && v.logger.log("last AAC PES packet truncated,might overlap between fragments"), r3.pesData = o2;
            l2 && (e4 = W(l2)) ? (this.parseID3PES(n2, e4), n2.pesData = null) : n2.pesData = l2;
          }, e3.demuxSampleAes = function(t4, e4, r3) {
            var i3 = this.demux(t4, r3, true, !this.config.progressive), n2 = this.sampleAes = new B(this.observer, this.config, e4);
            return this.decrypt(i3, n2);
          }, e3.decrypt = function(t4, e4) {
            return new Promise(function(r3) {
              var i3 = t4.audioTrack, n2 = t4.videoTrack;
              i3.samples && "aac" === i3.segmentCodec ? e4.decryptAacSamples(i3.samples, 0, function() {
                n2.samples ? e4.decryptAvcSamples(n2.samples, 0, 0, function() {
                  r3(t4);
                }) : r3(t4);
              }) : n2.samples && e4.decryptAvcSamples(n2.samples, 0, 0, function() {
                r3(t4);
              });
            });
          }, e3.destroy = function() {
            this._duration = 0;
          }, e3.parseAVCPES = function(t4, e4, r3, i3) {
            var n2, a2 = this, s2 = this.parseAVCNALu(t4, r3.data), o2 = this.avcSample, l2 = false;
            r3.data = null, o2 && s2.length && !t4.audFound && (q(o2, t4), o2 = this.avcSample = H(false, r3.pts, r3.dts, "")), s2.forEach(function(i4) {
              switch (i4.type) {
                case 1:
                  n2 = true, o2 || (o2 = a2.avcSample = H(true, r3.pts, r3.dts, "")), o2.frame = true;
                  var s3 = i4.data;
                  if (l2 && s3.length > 4) {
                    var u2 = new U(s3).readSliceType();
                    2 !== u2 && 4 !== u2 && 7 !== u2 && 9 !== u2 || (o2.key = true);
                  }
                  break;
                case 5:
                  n2 = true, o2 || (o2 = a2.avcSample = H(true, r3.pts, r3.dts, "")), o2.key = true, o2.frame = true;
                  break;
                case 6:
                  n2 = true, (0, d.parseSEIMessageFromNALu)(i4.data, 1, r3.pts, e4.samples);
                  break;
                case 7:
                  if (n2 = true, l2 = true, !t4.sps) {
                    var h2 = new U(i4.data).readSPS();
                    t4.width = h2.width, t4.height = h2.height, t4.pixelRatio = h2.pixelRatio, t4.sps = [i4.data], t4.duration = a2._duration;
                    for (var c2 = i4.data.subarray(1, 4), f2 = "avc1.", g2 = 0; g2 < 3; g2++) {
                      var v2 = c2[g2].toString(16);
                      v2.length < 2 && (v2 = "0" + v2), f2 += v2;
                    }
                    t4.codec = f2;
                  }
                  break;
                case 8:
                  n2 = true, t4.pps || (t4.pps = [i4.data]);
                  break;
                case 9:
                  n2 = false, t4.audFound = true, o2 && q(o2, t4), o2 = a2.avcSample = H(false, r3.pts, r3.dts, "");
                  break;
                case 12:
                  n2 = true;
                  break;
                default:
                  n2 = false, o2 && (o2.debug += "unknown NAL " + i4.type + " ");
              }
              o2 && n2 && o2.units.push(i4);
            }), i3 && o2 && (q(o2, t4), this.avcSample = null);
          }, e3.getLastNalUnit = function(t4) {
            var e4, r3, i3 = this.avcSample;
            if (i3 && 0 !== i3.units.length || (i3 = t4[t4.length - 1]), null !== (e4 = i3) && void 0 !== e4 && e4.units) {
              var n2 = i3.units;
              r3 = n2[n2.length - 1];
            }
            return r3;
          }, e3.parseAVCNALu = function(t4, e4) {
            var r3, i3, n2 = e4.byteLength, a2 = t4.naluState || 0, s2 = a2, o2 = [], l2 = 0, u2 = -1, d2 = 0;
            for (-1 === a2 && (u2 = 0, d2 = 31 & e4[0], a2 = 0, l2 = 1); l2 < n2; )
              if (r3 = e4[l2++], a2)
                if (1 !== a2)
                  if (r3)
                    if (1 === r3) {
                      if (u2 >= 0) {
                        var h2 = { data: e4.subarray(u2, l2 - a2 - 1), type: d2 };
                        o2.push(h2);
                      } else {
                        var c2 = this.getLastNalUnit(t4.samples);
                        if (c2 && (s2 && l2 <= 4 - s2 && c2.state && (c2.data = c2.data.subarray(0, c2.data.byteLength - s2)), (i3 = l2 - a2 - 1) > 0)) {
                          var f2 = new Uint8Array(c2.data.byteLength + i3);
                          f2.set(c2.data, 0), f2.set(e4.subarray(0, i3), c2.data.byteLength), c2.data = f2, c2.state = 0;
                        }
                      }
                      l2 < n2 ? (u2 = l2, d2 = 31 & e4[l2], a2 = 0) : a2 = -1;
                    } else
                      a2 = 0;
                  else
                    a2 = 3;
                else
                  a2 = r3 ? 0 : 2;
              else
                a2 = r3 ? 0 : 1;
            if (u2 >= 0 && a2 >= 0) {
              var g2 = { data: e4.subarray(u2, n2), type: d2, state: a2 };
              o2.push(g2);
            }
            if (0 === o2.length) {
              var v2 = this.getLastNalUnit(t4.samples);
              if (v2) {
                var p2 = new Uint8Array(v2.data.byteLength + e4.byteLength);
                p2.set(v2.data, 0), p2.set(e4, v2.data.byteLength), v2.data = p2;
              }
            }
            return t4.naluState = a2, o2;
          }, e3.parseAACPES = function(t4, e4) {
            var r3, a2, s2, o2, l2, u2 = 0, d2 = this.aacOverFlow, h2 = e4.data;
            if (d2) {
              this.aacOverFlow = null;
              var c2 = d2.missing, f2 = d2.sample.unit.byteLength;
              if (-1 === c2) {
                var g2 = new Uint8Array(f2 + h2.byteLength);
                g2.set(d2.sample.unit, 0), g2.set(h2, f2), h2 = g2;
              } else {
                var p2 = f2 - c2;
                d2.sample.unit.set(h2.subarray(0, c2), p2), t4.samples.push(d2.sample), u2 = d2.missing;
              }
            }
            for (r3 = u2, a2 = h2.length; r3 < a2 - 1 && !E(h2, r3); r3++)
              ;
            if (r3 === u2 || (r3 < a2 - 1 ? (s2 = "AAC PES did not start with ADTS header,offset:" + r3, o2 = false) : (s2 = "no ADTS header found in AAC PES", o2 = true), v.logger.warn("parsing error:" + s2), this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: o2, reason: s2 }), !o2)) {
              if (S(t4, this.observer, h2, r3, this.audioCodec), void 0 !== e4.pts)
                l2 = e4.pts;
              else {
                if (!d2)
                  return void v.logger.warn("[tsdemuxer]: AAC PES unknown PTS");
                var m2 = b(t4.samplerate);
                l2 = d2.sample.pts + m2;
              }
              for (var y2, T2 = 0; r3 < a2; ) {
                if (r3 += (y2 = L(t4, h2, r3, l2, T2)).length, y2.missing) {
                  this.aacOverFlow = y2;
                  break;
                }
                for (T2++; r3 < a2 - 1 && !E(h2, r3); r3++)
                  ;
              }
            }
          }, e3.parseMPEGPES = function(t4, e4) {
            var r3 = e4.data, i3 = r3.length, n2 = 0, a2 = 0, s2 = e4.pts;
            if (void 0 !== s2)
              for (; a2 < i3; )
                if (M(r3, a2)) {
                  var o2 = O(t4, r3, a2, s2, n2);
                  if (!o2)
                    break;
                  a2 += o2.length, n2++;
                } else
                  a2++;
            else
              v.logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
          }, e3.parseID3PES = function(t4, e4) {
            if (void 0 !== e4.pts) {
              var r3 = G({}, e4, { type: this._avcTrack ? l.MetadataSchema.emsg : l.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY });
              t4.samples.push(r3);
            } else
              v.logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
          }, t3;
        }();
        function z(t3, e3) {
          return z = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, z(t3, e3);
        }
        const Q = function(t3) {
          var e3, r3;
          function i3() {
            return t3.apply(this, arguments) || this;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, z(e3, r3);
          var n2 = i3.prototype;
          return n2.resetInitSegment = function(e4, r4, i4, n3) {
            t3.prototype.resetInitSegment.call(this, e4, r4, i4, n3), this._audioTrack = { container: "audio/mpeg", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "mp3", samples: [], manifestCodec: r4, duration: n3, inputTimeScale: 9e4, dropped: 0 };
          }, i3.probe = function(t4) {
            if (!t4)
              return false;
            for (var e4 = (o.getID3Data(t4, 0) || []).length, r4 = t4.length; e4 < r4; e4++)
              if (N(t4, e4))
                return v.logger.log("MPEG Audio sync word found !"), true;
            return false;
          }, n2.canParse = function(t4, e4) {
            return function(t5, e5) {
              return F(t5, e5) && 4 <= t5.length - e5;
            }(t4, e4);
          }, n2.appendFrame = function(t4, e4, r4) {
            if (null !== this.basePTS)
              return O(t4, e4, r4, this.basePTS, this.frameIndex);
          }, i3;
        }(g);
        var $ = r2(524), J = r2(923);
        function Z(t3, e3) {
          var r3 = null == t3 ? void 0 : t3.codec;
          return r3 && r3.length > 4 ? r3 : "hvc1" === r3 || "hev1" === r3 ? "hvc1.1.c.L120.90" : "av01" === r3 ? "av01.0.04M.08" : "avc1" === r3 || e3 === J.ElementaryStreamTypes.VIDEO ? "avc1.42e01e" : "mp4a.40.5";
        }
        const tt = function() {
          function t3() {
            this.emitInitSegment = false, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = void 0, this.initTracks = void 0, this.lastEndTime = null;
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
          }, e3.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.lastEndTime = null;
          }, e3.resetNextTimestamp = function() {
            this.lastEndTime = null;
          }, e3.resetInitSegment = function(t4, e4, r3, i3) {
            this.audioCodec = e4, this.videoCodec = r3, this.generateInitSegment((0, d.patchEncyptionData)(t4, i3)), this.emitInitSegment = true;
          }, e3.generateInitSegment = function(t4) {
            var e4 = this.audioCodec, r3 = this.videoCodec;
            if (!t4 || !t4.byteLength)
              return this.initTracks = void 0, void (this.initData = void 0);
            var i3 = this.initData = (0, d.parseInitSegment)(t4);
            e4 || (e4 = Z(i3.audio, J.ElementaryStreamTypes.AUDIO)), r3 || (r3 = Z(i3.video, J.ElementaryStreamTypes.VIDEO));
            var n2 = {};
            i3.audio && i3.video ? n2.audiovideo = { container: "video/mp4", codec: e4 + "," + r3, initSegment: t4, id: "main" } : i3.audio ? n2.audio = { container: "audio/mp4", codec: e4, initSegment: t4, id: "audio" } : i3.video ? n2.video = { container: "video/mp4", codec: r3, initSegment: t4, id: "main" } : v.logger.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = n2;
          }, e3.remux = function(t4, e4, r3, i3, n2) {
            var a2, o2 = this.initPTS, l2 = this.lastEndTime, u2 = { audio: void 0, video: void 0, text: i3, id3: r3, initSegment: void 0 };
            (0, s.isFiniteNumber)(l2) || (l2 = this.lastEndTime = n2 || 0);
            var h2 = e4.samples;
            if (!h2 || !h2.length)
              return u2;
            var c2 = { initPTS: void 0, timescale: 1 }, f2 = this.initData;
            if (f2 && f2.length || (this.generateInitSegment(h2), f2 = this.initData), !f2 || !f2.length)
              return v.logger.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), u2;
            this.emitInitSegment && (c2.tracks = this.initTracks, this.emitInitSegment = false);
            var g2 = (0, d.getStartDTS)(f2, h2);
            (0, s.isFiniteNumber)(o2) || (this.initPTS = c2.initPTS = o2 = g2 - n2);
            var p2 = (0, d.getDuration)(h2, f2), m2 = t4 ? g2 - o2 : l2, y2 = m2 + p2;
            (0, d.offsetStartDTS)(f2, h2, o2), p2 > 0 ? this.lastEndTime = y2 : (v.logger.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
            var E2 = !!f2.audio, T2 = !!f2.video, S2 = "";
            E2 && (S2 += "audio"), T2 && (S2 += "video");
            var b2 = { data1: h2, startPTS: m2, startDTS: m2, endPTS: y2, endDTS: y2, type: S2, hasAudio: E2, hasVideo: T2, nb: 1, dropped: 0 };
            u2.audio = "audio" === b2.type ? b2 : void 0, u2.video = "audio" !== b2.type ? b2 : void 0, u2.initSegment = c2;
            var L2 = null != (a2 = this.initPTS) ? a2 : 0;
            return u2.id3 = (0, $.flushTextTrackMetadataCueSamples)(r3, n2, L2, L2), i3.samples.length && (u2.text = (0, $.flushTextTrackUserdataCueSamples)(i3, n2, L2)), u2;
          }, t3;
        }();
        var et;
        try {
          et = self.performance.now.bind(self.performance);
        } catch (t3) {
          v.logger.debug("Unable to use Performance API on this environment"), et = self.Date.now;
        }
        var rt = [{ demux: R, remux: tt }, { demux: X, remux: $.default }, { demux: D, remux: $.default }, { demux: Q, remux: $.default }], it = function() {
          function t3(t4, e4, r3, i3, n2) {
            this.async = false, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = t4, this.typeSupported = e4, this.config = r3, this.vendor = i3, this.id = n2;
          }
          var e3 = t3.prototype;
          return e3.configure = function(t4) {
            this.transmuxConfig = t4, this.decrypter && this.decrypter.reset();
          }, e3.push = function(t4, e4, r3, i3) {
            var n2 = this, a2 = r3.transmuxing;
            a2.executeStart = et();
            var s2 = new Uint8Array(t4), o2 = this.currentTransmuxState, l2 = this.transmuxConfig;
            i3 && (this.currentTransmuxState = i3);
            var u2 = i3 || o2, d2 = u2.contiguous, h2 = u2.discontinuity, c2 = u2.trackSwitch, f2 = u2.accurateTimeOffset, g2 = u2.timeOffset, v2 = u2.initSegmentChange, p2 = l2.audioCodec, m2 = l2.videoCodec, y2 = l2.defaultInitPts, E2 = l2.duration, T2 = l2.initSegmentData, S2 = function(t5, e5) {
              var r4 = null;
              return t5.byteLength > 0 && null != e5 && null != e5.key && null !== e5.iv && null != e5.method && (r4 = e5), r4;
            }(s2, e4);
            if (S2 && "AES-128" === S2.method) {
              var b2 = this.getDecrypter();
              if (!b2.isSync())
                return this.decryptionPromise = b2.webCryptoDecrypt(s2, S2.key.buffer, S2.iv.buffer).then(function(t5) {
                  var e5 = n2.push(t5, null, r3);
                  return n2.decryptionPromise = null, e5;
                }), this.decryptionPromise;
              var L2 = b2.softwareDecrypt(s2, S2.key.buffer, S2.iv.buffer);
              if (r3.part > -1 && (L2 = b2.flush()), !L2)
                return a2.executeEnd = et(), nt(r3);
              s2 = new Uint8Array(L2);
            }
            var A2 = this.needsProbing(h2, c2);
            A2 && this.configureTransmuxer(s2), (h2 || c2 || v2 || A2) && this.resetInitSegment(T2, p2, m2, E2, e4), (h2 || v2 || A2) && this.resetInitialTimestamp(y2), d2 || this.resetContiguity();
            var D2 = this.transmux(s2, S2, g2, f2, r3), k2 = this.currentTransmuxState;
            return k2.contiguous = true, k2.discontinuity = false, k2.trackSwitch = false, a2.executeEnd = et(), D2;
          }, e3.flush = function(t4) {
            var e4 = this, r3 = t4.transmuxing;
            r3.executeStart = et();
            var a2 = this.decrypter, s2 = this.currentTransmuxState, o2 = this.decryptionPromise;
            if (o2)
              return o2.then(function() {
                return e4.flush(t4);
              });
            var l2 = [], u2 = s2.timeOffset;
            if (a2) {
              var d2 = a2.flush();
              d2 && l2.push(this.push(d2, null, t4));
            }
            var h2 = this.demuxer, c2 = this.remuxer;
            if (!h2 || !c2)
              return this.observer.emit(i2.Events.ERROR, i2.Events.ERROR, { type: n.ErrorTypes.MEDIA_ERROR, details: n.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "no demux matching with content found" }), r3.executeEnd = et(), [nt(t4)];
            var f2 = h2.flush(u2);
            return at(f2) ? f2.then(function(r4) {
              return e4.flushRemux(l2, r4, t4), l2;
            }) : (this.flushRemux(l2, f2, t4), l2);
          }, e3.flushRemux = function(t4, e4, r3) {
            var i3 = e4.audioTrack, n2 = e4.videoTrack, a2 = e4.id3Track, s2 = e4.textTrack, o2 = this.currentTransmuxState, l2 = o2.accurateTimeOffset, u2 = o2.timeOffset;
            v.logger.log("[transmuxer.ts]: Flushed fragment " + r3.sn + (r3.part > -1 ? " p: " + r3.part : "") + " of level " + r3.level);
            var d2 = this.remuxer.remux(i3, n2, a2, s2, u2, l2, true, this.id);
            t4.push({ remuxResult: d2, chunkMeta: r3 }), r3.transmuxing.executeEnd = et();
          }, e3.resetInitialTimestamp = function(t4) {
            var e4 = this.demuxer, r3 = this.remuxer;
            e4 && r3 && (e4.resetTimeStamp(t4), r3.resetTimeStamp(t4));
          }, e3.resetContiguity = function() {
            var t4 = this.demuxer, e4 = this.remuxer;
            t4 && e4 && (t4.resetContiguity(), e4.resetNextTimestamp());
          }, e3.resetInitSegment = function(t4, e4, r3, i3, n2) {
            var a2 = this.demuxer, s2 = this.remuxer;
            a2 && s2 && (a2.resetInitSegment(t4, e4, r3, i3), s2.resetInitSegment(t4, e4, r3, n2));
          }, e3.destroy = function() {
            this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0);
          }, e3.transmux = function(t4, e4, r3, i3, n2) {
            return e4 && "SAMPLE-AES" === e4.method ? this.transmuxSampleAes(t4, e4, r3, i3, n2) : this.transmuxUnencrypted(t4, r3, i3, n2);
          }, e3.transmuxUnencrypted = function(t4, e4, r3, i3) {
            var n2 = this.demuxer.demux(t4, e4, false, !this.config.progressive), a2 = n2.audioTrack, s2 = n2.videoTrack, o2 = n2.id3Track, l2 = n2.textTrack;
            return { remuxResult: this.remuxer.remux(a2, s2, o2, l2, e4, r3, false, this.id), chunkMeta: i3 };
          }, e3.transmuxSampleAes = function(t4, e4, r3, i3, n2) {
            var a2 = this;
            return this.demuxer.demuxSampleAes(t4, e4, r3).then(function(t5) {
              return { remuxResult: a2.remuxer.remux(t5.audioTrack, t5.videoTrack, t5.id3Track, t5.textTrack, r3, i3, false, a2.id), chunkMeta: n2 };
            });
          }, e3.configureTransmuxer = function(t4) {
            for (var e4, r3 = this.config, i3 = this.observer, n2 = this.typeSupported, a2 = this.vendor, s2 = 0, o2 = rt.length; s2 < o2; s2++)
              if (rt[s2].demux.probe(t4)) {
                e4 = rt[s2];
                break;
              }
            e4 || (v.logger.warn("Failed to find demuxer by probing frag, treating as mp4 passthrough"), e4 = { demux: R, remux: tt });
            var l2 = this.demuxer, u2 = this.remuxer, d2 = e4.remux, h2 = e4.demux;
            u2 && u2 instanceof d2 || (this.remuxer = new d2(i3, r3, n2, a2)), l2 && l2 instanceof h2 || (this.demuxer = new h2(i3, r3, n2), this.probe = h2.probe);
          }, e3.needsProbing = function(t4, e4) {
            return !this.demuxer || !this.remuxer || t4 || e4;
          }, e3.getDecrypter = function() {
            var t4 = this.decrypter;
            return t4 || (t4 = this.decrypter = new a.default(this.config)), t4;
          }, t3;
        }(), nt = function(t3) {
          return { remuxResult: {}, chunkMeta: t3 };
        };
        function at(t3) {
          return "then" in t3 && t3.then instanceof Function;
        }
        var st = function(t3, e3, r3, i3, n2) {
          this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = t3, this.videoCodec = e3, this.initSegmentData = r3, this.duration = i3, this.defaultInitPts = n2;
        }, ot = function(t3, e3, r3, i3, n2, a2) {
          this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = t3, this.contiguous = e3, this.accurateTimeOffset = r3, this.trackSwitch = i3, this.timeOffset = n2, this.initSegmentChange = a2;
        };
      }, 973: (t2, e2, r2) => {
        "use strict";
        var i2, n;
        r2.r(e2), r2.d(e2, { ErrorDetails: () => n, ErrorTypes: () => i2 }), function(t3) {
          t3.NETWORK_ERROR = "networkError", t3.MEDIA_ERROR = "mediaError", t3.KEY_SYSTEM_ERROR = "keySystemError", t3.MUX_ERROR = "muxError", t3.OTHER_ERROR = "otherError";
        }(i2 || (i2 = {})), function(t3) {
          t3.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", t3.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", t3.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", t3.KEY_SYSTEM_NO_CONFIGURED_LICENSE = "keySystemNoConfiguredLicense", t3.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", t3.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = "keySystemServerCertificateRequestFailed", t3.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = "keySystemServerCertificateUpdateFailed", t3.KEY_SYSTEM_SESSION_UPDATE_FAILED = "keySystemSessionUpdateFailed", t3.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = "keySystemStatusOutputRestricted", t3.KEY_SYSTEM_STATUS_INTERNAL_ERROR = "keySystemStatusInternalError", t3.MANIFEST_LOAD_ERROR = "manifestLoadError", t3.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", t3.MANIFEST_PARSING_ERROR = "manifestParsingError", t3.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", t3.LEVEL_EMPTY_ERROR = "levelEmptyError", t3.LEVEL_LOAD_ERROR = "levelLoadError", t3.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", t3.LEVEL_SWITCH_ERROR = "levelSwitchError", t3.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", t3.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", t3.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", t3.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", t3.FRAG_LOAD_ERROR = "fragLoadError", t3.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", t3.FRAG_DECRYPT_ERROR = "fragDecryptError", t3.FRAG_PARSING_ERROR = "fragParsingError", t3.REMUX_ALLOC_ERROR = "remuxAllocError", t3.KEY_LOAD_ERROR = "keyLoadError", t3.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", t3.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", t3.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", t3.BUFFER_APPEND_ERROR = "bufferAppendError", t3.BUFFER_APPENDING_ERROR = "bufferAppendingError", t3.BUFFER_STALLED_ERROR = "bufferStalledError", t3.BUFFER_FULL_ERROR = "bufferFullError", t3.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", t3.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", t3.INTERNAL_EXCEPTION = "internalException", t3.INTERNAL_ABORTED = "aborted", t3.UNKNOWN = "unknown";
        }(n || (n = {}));
      }, 851: (t2, e2, r2) => {
        "use strict";
        var i2;
        r2.r(e2), r2.d(e2, { Events: () => i2 }), function(t3) {
          t3.MEDIA_ATTACHING = "hlsMediaAttaching", t3.MEDIA_ATTACHED = "hlsMediaAttached", t3.MEDIA_DETACHING = "hlsMediaDetaching", t3.MEDIA_DETACHED = "hlsMediaDetached", t3.BUFFER_RESET = "hlsBufferReset", t3.BUFFER_CODECS = "hlsBufferCodecs", t3.BUFFER_CREATED = "hlsBufferCreated", t3.BUFFER_APPENDING = "hlsBufferAppending", t3.BUFFER_APPENDED = "hlsBufferAppended", t3.BUFFER_EOS = "hlsBufferEos", t3.BUFFER_FLUSHING = "hlsBufferFlushing", t3.BUFFER_FLUSHED = "hlsBufferFlushed", t3.MANIFEST_LOADING = "hlsManifestLoading", t3.MANIFEST_LOADED = "hlsManifestLoaded", t3.MANIFEST_PARSED = "hlsManifestParsed", t3.LEVEL_SWITCHING = "hlsLevelSwitching", t3.LEVEL_SWITCHED = "hlsLevelSwitched", t3.LEVEL_LOADING = "hlsLevelLoading", t3.LEVEL_LOADED = "hlsLevelLoaded", t3.LEVEL_UPDATED = "hlsLevelUpdated", t3.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", t3.LEVELS_UPDATED = "hlsLevelsUpdated", t3.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", t3.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", t3.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", t3.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", t3.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", t3.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", t3.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", t3.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", t3.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", t3.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", t3.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", t3.CUES_PARSED = "hlsCuesParsed", t3.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", t3.INIT_PTS_FOUND = "hlsInitPtsFound", t3.FRAG_LOADING = "hlsFragLoading", t3.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", t3.FRAG_LOADED = "hlsFragLoaded", t3.FRAG_DECRYPTED = "hlsFragDecrypted", t3.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", t3.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", t3.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", t3.FRAG_PARSED = "hlsFragParsed", t3.FRAG_BUFFERED = "hlsFragBuffered", t3.FRAG_CHANGED = "hlsFragChanged", t3.FPS_DROP = "hlsFpsDrop", t3.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", t3.ERROR = "hlsError", t3.DESTROYING = "hlsDestroying", t3.KEY_LOADING = "hlsKeyLoading", t3.KEY_LOADED = "hlsKeyLoaded", t3.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", t3.BACK_BUFFER_REACHED = "hlsBackBufferReached";
        }(i2 || (i2 = {}));
      }, 76: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { default: () => Bi });
        var i2, n = r2(945), a = r2(965), s = r2(851), o = r2(973), l = r2(93), u = /^(\d+)x(\d+)$/, d = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g, h = function() {
          function t3(e4) {
            for (var r3 in "string" == typeof e4 && (e4 = t3.parseAttrList(e4)), e4)
              e4.hasOwnProperty(r3) && (this[r3] = e4[r3]);
          }
          var e3 = t3.prototype;
          return e3.decimalInteger = function(t4) {
            var e4 = parseInt(this[t4], 10);
            return e4 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e4;
          }, e3.hexadecimalInteger = function(t4) {
            if (this[t4]) {
              var e4 = (this[t4] || "0x").slice(2);
              e4 = (1 & e4.length ? "0" : "") + e4;
              for (var r3 = new Uint8Array(e4.length / 2), i3 = 0; i3 < e4.length / 2; i3++)
                r3[i3] = parseInt(e4.slice(2 * i3, 2 * i3 + 2), 16);
              return r3;
            }
            return null;
          }, e3.hexadecimalIntegerAsNumber = function(t4) {
            var e4 = parseInt(this[t4], 16);
            return e4 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e4;
          }, e3.decimalFloatingPoint = function(t4) {
            return parseFloat(this[t4]);
          }, e3.optionalFloat = function(t4, e4) {
            var r3 = this[t4];
            return r3 ? parseFloat(r3) : e4;
          }, e3.enumeratedString = function(t4) {
            return this[t4];
          }, e3.bool = function(t4) {
            return "YES" === this[t4];
          }, e3.decimalResolution = function(t4) {
            var e4 = u.exec(this[t4]);
            if (null !== e4)
              return { width: parseInt(e4[1], 10), height: parseInt(e4[2], 10) };
          }, t3.parseAttrList = function(t4) {
            var e4, r3 = {};
            for (d.lastIndex = 0; null !== (e4 = d.exec(t4)); ) {
              var i3 = e4[2];
              0 === i3.indexOf('"') && i3.lastIndexOf('"') === i3.length - 1 && (i3 = i3.slice(1, -1)), r3[e4[1]] = i3;
            }
            return r3;
          }, t3;
        }();
        function c() {
          return c = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, c.apply(this, arguments);
        }
        function f(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        !function(t3) {
          t3.ID = "ID", t3.CLASS = "CLASS", t3.START_DATE = "START-DATE", t3.DURATION = "DURATION", t3.END_DATE = "END-DATE", t3.END_ON_NEXT = "END-ON-NEXT", t3.PLANNED_DURATION = "PLANNED-DURATION", t3.SCTE35_OUT = "SCTE35-OUT", t3.SCTE35_IN = "SCTE35-IN";
        }(i2 || (i2 = {}));
        var g = function() {
          function t3(t4, e4) {
            if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, e4) {
              var r4 = e4.attr;
              for (var n2 in r4)
                if (Object.prototype.hasOwnProperty.call(t4, n2) && t4[n2] !== r4[n2]) {
                  l.logger.warn('DATERANGE tag attribute: "' + n2 + '" does not match for tags with ID: "' + t4.ID + '"'), this._badValueForSameId = n2;
                  break;
                }
              t4 = c(new h({}), r4, t4);
            }
            if (this.attr = t4, this._startDate = new Date(t4[i2.START_DATE]), i2.END_DATE in this.attr) {
              var s2 = new Date(this.attr[i2.END_DATE]);
              (0, a.isFiniteNumber)(s2.getTime()) && (this._endDate = s2);
            }
          }
          var e3, r3;
          return e3 = t3, (r3 = [{ key: "id", get: function() {
            return this.attr.ID;
          } }, { key: "class", get: function() {
            return this.attr.CLASS;
          } }, { key: "startDate", get: function() {
            return this._startDate;
          } }, { key: "endDate", get: function() {
            if (this._endDate)
              return this._endDate;
            var t4 = this.duration;
            return null !== t4 ? new Date(this._startDate.getTime() + 1e3 * t4) : null;
          } }, { key: "duration", get: function() {
            if (i2.DURATION in this.attr) {
              var t4 = this.attr.decimalFloatingPoint(i2.DURATION);
              if ((0, a.isFiniteNumber)(t4))
                return t4;
            } else if (this._endDate)
              return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
            return null;
          } }, { key: "plannedDuration", get: function() {
            return i2.PLANNED_DURATION in this.attr ? this.attr.decimalFloatingPoint(i2.PLANNED_DURATION) : null;
          } }, { key: "endOnNext", get: function() {
            return this.attr.bool(i2.END_ON_NEXT);
          } }, { key: "isValid", get: function() {
            return !!this.id && !this._badValueForSameId && (0, a.isFiniteNumber)(this.startDate.getTime()) && (null === this.duration || this.duration >= 0) && (!this.endOnNext || !!this.class);
          } }]) && f(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }(), v = r2(923);
        function p(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        var m, y, E, T = function() {
          function t3(t4) {
            this.PTSKnown = false, this.alignedSliding = false, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = true, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = true, this.advanced = true, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = false, this.canSkipUntil = 0, this.canSkipDateRanges = false, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = t4;
          }
          var e3, r3;
          return t3.prototype.reloaded = function(t4) {
            if (!t4)
              return this.advanced = true, void (this.updated = true);
            var e4 = this.lastPartSn - t4.lastPartSn, r4 = this.lastPartIndex - t4.lastPartIndex;
            this.updated = this.endSN !== t4.endSN || !!r4 || !!e4, this.advanced = this.endSN > t4.endSN || e4 > 0 || 0 === e4 && r4 > 0, this.updated || this.advanced ? this.misses = Math.floor(0.6 * t4.misses) : this.misses = t4.misses + 1, this.availabilityDelay = t4.availabilityDelay;
          }, e3 = t3, (r3 = [{ key: "hasProgramDateTime", get: function() {
            return !!this.fragments.length && (0, a.isFiniteNumber)(this.fragments[this.fragments.length - 1].programDateTime);
          } }, { key: "levelTargetDuration", get: function() {
            return this.averagetargetduration || this.targetduration || 10;
          } }, { key: "drift", get: function() {
            var t4 = this.driftEndTime - this.driftStartTime;
            return t4 > 0 ? 1e3 * (this.driftEnd - this.driftStart) / t4 : 1;
          } }, { key: "edge", get: function() {
            return this.partEnd || this.fragmentEnd;
          } }, { key: "partEnd", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd;
          } }, { key: "fragmentEnd", get: function() {
            var t4;
            return null !== (t4 = this.fragments) && void 0 !== t4 && t4.length ? this.fragments[this.fragments.length - 1].end : 0;
          } }, { key: "age", get: function() {
            return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0;
          } }, { key: "lastPartIndex", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].index : -1;
          } }, { key: "lastPartSn", get: function() {
            var t4;
            return null !== (t4 = this.partList) && void 0 !== t4 && t4.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN;
          } }]) && p(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }();
        function S(t3) {
          return Uint8Array.from(atob(t3), function(t4) {
            return t4.charCodeAt(0);
          });
        }
        function b(t3) {
          return Uint8Array.from(unescape(encodeURIComponent(t3)), function(t4) {
            return t4.charCodeAt(0);
          });
        }
        function L(t3) {
          switch (t3) {
            case y.FAIRPLAY:
              return m.FAIRPLAY;
            case y.PLAYREADY:
              return m.PLAYREADY;
            case y.WIDEVINE:
              return m.WIDEVINE;
            case y.CLEARKEY:
              return m.CLEARKEY;
          }
        }
        function A(t3) {
          switch (t3) {
            case m.FAIRPLAY:
              return y.FAIRPLAY;
            case m.PLAYREADY:
              return y.PLAYREADY;
            case m.WIDEVINE:
              return y.WIDEVINE;
            case m.CLEARKEY:
              return y.CLEARKEY;
          }
        }
        function D(t3) {
          var e3 = t3.drmSystems, r3 = t3.widevineLicenseUrl, i3 = e3 ? [m.FAIRPLAY, m.WIDEVINE, m.PLAYREADY, m.CLEARKEY].filter(function(t4) {
            return !!e3[t4];
          }) : [];
          return !i3[m.WIDEVINE] && r3 && i3.push(m.WIDEVINE), i3;
        }
        !function(t3) {
          t3.CLEARKEY = "org.w3.clearkey", t3.FAIRPLAY = "com.apple.fps", t3.PLAYREADY = "com.microsoft.playready", t3.WIDEVINE = "com.widevine.alpha";
        }(m || (m = {})), function(t3) {
          t3.CLEARKEY = "org.w3.clearkey", t3.FAIRPLAY = "com.apple.streamingkeydelivery", t3.PLAYREADY = "com.microsoft.playready", t3.WIDEVINE = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
        }(y || (y = {})), function(t3) {
          t3.WIDEVINE = "edef8ba979d64acea3c827dcd51d21ed";
        }(E || (E = {}));
        var k = "undefined" != typeof self && self.navigator && self.navigator.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null, R = r2(63), I = {}, w = function() {
          function t3(t4, e4, r3, i3, n2) {
            void 0 === i3 && (i3 = [1]), void 0 === n2 && (n2 = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = t4, this.uri = e4, this.keyFormat = r3, this.keyFormatVersions = i3, this.iv = n2, this.encrypted = !!t4 && "NONE" !== t4, this.isCommonEncryption = this.encrypted && "AES-128" !== t4;
          }
          t3.clearKeyUriToKeyIdMap = function() {
            I = {};
          };
          var e3 = t3.prototype;
          return e3.isSupported = function() {
            if (this.method) {
              if ("AES-128" === this.method || "NONE" === this.method)
                return true;
              switch (this.keyFormat) {
                case "identity":
                  return "SAMPLE-AES" === this.method;
                case y.FAIRPLAY:
                case y.WIDEVINE:
                case y.PLAYREADY:
                case y.CLEARKEY:
                  return -1 !== ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method);
              }
            }
            return false;
          }, e3.getDecryptData = function(e4) {
            if (!this.encrypted || !this.uri)
              return null;
            if ("AES-128" === this.method && this.uri && !this.iv) {
              "number" != typeof e4 && ("AES-128" !== this.method || this.iv || l.logger.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), e4 = 0);
              var r3 = function(t4) {
                for (var e5 = new Uint8Array(16), r4 = 12; r4 < 16; r4++)
                  e5[r4] = t4 >> 8 * (15 - r4) & 255;
                return e5;
              }(e4);
              return new t3(this.method, this.uri, "identity", this.keyFormatVersions, r3);
            }
            var i3 = function(t4) {
              var e5, r4, i4 = t4.split(":"), n3 = null;
              if ("data" === i4[0] && 2 === i4.length) {
                var a3 = i4[1].split(";"), s3 = a3[a3.length - 1].split(",");
                if (2 === s3.length) {
                  var o3 = "base64" === s3[0], l2 = s3[1];
                  o3 ? (a3.splice(-1, 1), n3 = S(l2)) : (e5 = b(l2).subarray(0, 16), (r4 = new Uint8Array(16)).set(e5, 16 - e5.length), n3 = r4);
                }
              }
              return n3;
            }(this.uri);
            if (i3)
              switch (this.keyFormat) {
                case y.WIDEVINE:
                  this.pssh = i3, i3.length >= 22 && (this.keyId = i3.subarray(i3.length - 22, i3.length - 6));
                  break;
                case y.PLAYREADY:
                  var n2 = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
                  this.pssh = (0, R.mp4pssh)(n2, null, i3);
                  var a2 = new Uint16Array(i3.buffer, i3.byteOffset, i3.byteLength / 2), s2 = String.fromCharCode.apply(null, Array.from(a2)), o2 = s2.substring(s2.indexOf("<"), s2.length), u2 = new DOMParser().parseFromString(o2, "text/xml").getElementsByTagName("KID")[0];
                  if (u2) {
                    var d2 = u2.childNodes[0] ? u2.childNodes[0].nodeValue : u2.getAttribute("VALUE");
                    if (d2) {
                      var h2 = S(d2).subarray(0, 16);
                      !function(t4) {
                        var e5 = function(t5, e6, r4) {
                          var i4 = t5[e6];
                          t5[e6] = t5[r4], t5[r4] = i4;
                        };
                        e5(t4, 0, 3), e5(t4, 1, 2), e5(t4, 4, 5), e5(t4, 6, 7);
                      }(h2), this.keyId = h2;
                    }
                  }
                  break;
                default:
                  var c2 = i3.subarray(0, 16);
                  if (16 !== c2.length) {
                    var f2 = new Uint8Array(16);
                    f2.set(c2, 16 - c2.length), c2 = f2;
                  }
                  this.keyId = c2;
              }
            if (!this.keyId || 16 !== this.keyId.byteLength) {
              var g2 = I[this.uri];
              if (!g2) {
                var v2 = Object.keys(I).length % Number.MAX_SAFE_INTEGER;
                g2 = new Uint8Array(16), new DataView(g2.buffer, 12, 4).setUint32(0, v2), I[this.uri] = g2;
              }
              this.keyId = g2;
            }
            return this;
          }, t3;
        }(), C = { audio: { a3ds: true, "ac-3": true, "ac-4": true, alac: true, alaw: true, dra1: true, "dts+": true, "dts-": true, dtsc: true, dtse: true, dtsh: true, "ec-3": true, enca: true, g719: true, g726: true, m4ae: true, mha1: true, mha2: true, mhm1: true, mhm2: true, mlpa: true, mp4a: true, "raw ": true, Opus: true, opus: true, samr: true, sawb: true, sawp: true, sevc: true, sqcp: true, ssmv: true, twos: true, ulaw: true }, video: { avc1: true, avc2: true, avc3: true, avc4: true, avcp: true, av01: true, drac: true, dva1: true, dvav: true, dvh1: true, dvhe: true, encv: true, hev1: true, hvc1: true, mjp2: true, mp4v: true, mvc1: true, mvc2: true, mvc3: true, mvc4: true, resv: true, rv60: true, s263: true, svc1: true, svc2: true, "vc-1": true, vp08: true, vp09: true }, text: { stpp: true, wvtt: true } };
        function _(t3, e3) {
          return MediaSource.isTypeSupported((e3 || "video") + '/mp4;codecs="' + t3 + '"');
        }
        function P() {
          return P = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, P.apply(this, arguments);
        }
        var O = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+|#EXT-X-SESSION-KEY:([^\n\r]*)[\r\n]+/g, x = /#EXT-X-MEDIA:(.*)/g, F = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[\S ]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"), M = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")), N = function() {
          function t3() {
          }
          return t3.findGroup = function(t4, e3) {
            for (var r3 = 0; r3 < t4.length; r3++) {
              var i3 = t4[r3];
              if (i3.id === e3)
                return i3;
            }
          }, t3.convertAVC1ToAVCOTI = function(t4) {
            var e3 = t4.split(".");
            if (e3.length > 2) {
              var r3 = e3.shift() + ".";
              return (r3 += parseInt(e3.shift()).toString(16)) + ("000" + parseInt(e3.shift()).toString(16)).slice(-4);
            }
            return t4;
          }, t3.resolve = function(t4, e3) {
            return (0, n.buildAbsoluteURL)(e3, t4, { alwaysNormalize: true });
          }, t3.parseMasterPlaylist = function(e3, r3) {
            var i3, n2 = [], a2 = [], s2 = {}, o2 = [], u2 = false;
            for (O.lastIndex = 0; null != (i3 = O.exec(e3)); )
              if (i3[1]) {
                var d2, c2 = new h(i3[1]), f2 = { attrs: c2, bitrate: c2.decimalInteger("AVERAGE-BANDWIDTH") || c2.decimalInteger("BANDWIDTH"), name: c2.NAME, url: t3.resolve(i3[2], r3) }, g2 = c2.decimalResolution("RESOLUTION");
                g2 && (f2.width = g2.width, f2.height = g2.height), B((c2.CODECS || "").split(/[ ,]+/).filter(function(t4) {
                  return t4;
                }), f2), f2.videoCodec && -1 !== f2.videoCodec.indexOf("avc1") && (f2.videoCodec = t3.convertAVC1ToAVCOTI(f2.videoCodec)), null !== (d2 = f2.unknownCodecs) && void 0 !== d2 && d2.length || a2.push(f2), n2.push(f2);
              } else if (i3[3]) {
                var v2 = new h(i3[3]);
                v2["DATA-ID"] && (u2 = true, s2[v2["DATA-ID"]] = v2);
              } else if (i3[4]) {
                var p2 = i3[4], m2 = U(p2, r3);
                m2.encrypted && m2.isSupported() ? o2.push(m2) : l.logger.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + p2 + '"');
              }
            return { levels: a2.length > 0 && a2.length < n2.length ? a2 : n2, sessionData: u2 ? s2 : null, sessionKeys: o2.length ? o2 : null };
          }, t3.parseMasterPlaylistMedia = function(e3, r3, i3, n2) {
            var a2;
            void 0 === n2 && (n2 = []);
            var s2 = [], o2 = 0;
            for (x.lastIndex = 0; null !== (a2 = x.exec(e3)); ) {
              var l2 = new h(a2[1]);
              if (l2.TYPE === i3) {
                var u2 = { attrs: l2, bitrate: 0, id: o2++, groupId: l2["GROUP-ID"], instreamId: l2["INSTREAM-ID"], name: l2.NAME || l2.LANGUAGE || "", type: i3, default: l2.bool("DEFAULT"), autoselect: l2.bool("AUTOSELECT"), forced: l2.bool("FORCED"), lang: l2.LANGUAGE, url: l2.URI ? t3.resolve(l2.URI, r3) : "" };
                if (n2.length) {
                  var d2 = t3.findGroup(n2, u2.groupId) || n2[0];
                  G(u2, d2, "audioCodec"), G(u2, d2, "textCodec");
                }
                s2.push(u2);
              }
            }
            return s2;
          }, t3.parseLevelPlaylist = function(t4, e3, r3, i3, n2) {
            var s2, o2, u2, d2 = new T(e3), c2 = d2.fragments, f2 = null, p2 = 0, m2 = 0, y2 = 0, E2 = 0, S2 = null, b2 = new v.Fragment(i3, e3), L2 = -1, A2 = false;
            for (F.lastIndex = 0, d2.m3u8 = t4; null !== (s2 = F.exec(t4)); ) {
              A2 && (A2 = false, (b2 = new v.Fragment(i3, e3)).start = y2, b2.sn = p2, b2.cc = E2, b2.level = r3, f2 && (b2.initSegment = f2, b2.rawProgramDateTime = f2.rawProgramDateTime, f2.rawProgramDateTime = null));
              var D2 = s2[1];
              if (D2) {
                b2.duration = parseFloat(D2);
                var k2 = (" " + s2[2]).slice(1);
                b2.title = k2 || null, b2.tagList.push(k2 ? ["INF", D2, k2] : ["INF", D2]);
              } else if (s2[3])
                (0, a.isFiniteNumber)(b2.duration) && (b2.start = y2, u2 && j(b2, u2, d2), b2.sn = p2, b2.level = r3, b2.cc = E2, b2.urlId = n2, c2.push(b2), b2.relurl = (" " + s2[3]).slice(1), K(b2, S2), S2 = b2, y2 += b2.duration, p2++, m2 = 0, A2 = true);
              else if (s2[4]) {
                var R2 = (" " + s2[4]).slice(1);
                S2 ? b2.setByteRange(R2, S2) : b2.setByteRange(R2);
              } else if (s2[5])
                b2.rawProgramDateTime = (" " + s2[5]).slice(1), b2.tagList.push(["PROGRAM-DATE-TIME", b2.rawProgramDateTime]), -1 === L2 && (L2 = c2.length);
              else {
                if (!(s2 = s2[0].match(M))) {
                  l.logger.warn("No matches on slow regex match for level playlist!");
                  continue;
                }
                for (o2 = 1; o2 < s2.length && void 0 === s2[o2]; o2++)
                  ;
                var I2 = (" " + s2[o2]).slice(1), w2 = (" " + s2[o2 + 1]).slice(1), C2 = s2[o2 + 2] ? (" " + s2[o2 + 2]).slice(1) : "";
                switch (I2) {
                  case "PLAYLIST-TYPE":
                    d2.type = w2.toUpperCase();
                    break;
                  case "MEDIA-SEQUENCE":
                    p2 = d2.startSN = parseInt(w2);
                    break;
                  case "SKIP":
                    var _2 = new h(w2), O2 = _2.decimalInteger("SKIPPED-SEGMENTS");
                    if ((0, a.isFiniteNumber)(O2)) {
                      d2.skippedSegments = O2;
                      for (var x2 = O2; x2--; )
                        c2.unshift(null);
                      p2 += O2;
                    }
                    var N2 = _2.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                    N2 && (d2.recentlyRemovedDateranges = N2.split("	"));
                    break;
                  case "TARGETDURATION":
                    d2.targetduration = parseFloat(w2);
                    break;
                  case "VERSION":
                    d2.version = parseInt(w2);
                    break;
                  case "EXTM3U":
                    break;
                  case "ENDLIST":
                    d2.live = false;
                    break;
                  case "#":
                    (w2 || C2) && b2.tagList.push(C2 ? [w2, C2] : [w2]);
                    break;
                  case "DISCONTINUITY":
                    E2++, b2.tagList.push(["DIS"]);
                    break;
                  case "GAP":
                    b2.tagList.push([I2]);
                    break;
                  case "BITRATE":
                    b2.tagList.push([I2, w2]);
                    break;
                  case "DATERANGE":
                    var B2 = new h(w2), G2 = new g(B2, d2.dateRanges[B2.ID]);
                    G2.isValid || d2.skippedSegments ? d2.dateRanges[G2.id] = G2 : l.logger.warn('Ignoring invalid DATERANGE tag: "' + w2 + '"'), b2.tagList.push(["EXT-X-DATERANGE", w2]);
                    break;
                  case "DISCONTINUITY-SEQUENCE":
                    E2 = parseInt(w2);
                    break;
                  case "KEY":
                    var V2 = U(w2, e3);
                    if (V2.isSupported()) {
                      if ("NONE" === V2.method) {
                        u2 = void 0;
                        break;
                      }
                      u2 || (u2 = {}), u2[V2.keyFormat] && (u2 = P({}, u2)), u2[V2.keyFormat] = V2;
                    } else
                      l.logger.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + w2 + '"');
                    break;
                  case "START":
                    var Y2 = new h(w2).decimalFloatingPoint("TIME-OFFSET");
                    (0, a.isFiniteNumber)(Y2) && (d2.startTimeOffset = Y2);
                    break;
                  case "MAP":
                    var W2 = new h(w2);
                    if (b2.duration) {
                      var q2 = new v.Fragment(i3, e3);
                      H(q2, W2, r3, u2), f2 = q2, b2.initSegment = f2, f2.rawProgramDateTime && !b2.rawProgramDateTime && (b2.rawProgramDateTime = f2.rawProgramDateTime);
                    } else
                      H(b2, W2, r3, u2), f2 = b2, A2 = true;
                    break;
                  case "SERVER-CONTROL":
                    var X2 = new h(w2);
                    d2.canBlockReload = X2.bool("CAN-BLOCK-RELOAD"), d2.canSkipUntil = X2.optionalFloat("CAN-SKIP-UNTIL", 0), d2.canSkipDateRanges = d2.canSkipUntil > 0 && X2.bool("CAN-SKIP-DATERANGES"), d2.partHoldBack = X2.optionalFloat("PART-HOLD-BACK", 0), d2.holdBack = X2.optionalFloat("HOLD-BACK", 0);
                    break;
                  case "PART-INF":
                    var z2 = new h(w2);
                    d2.partTarget = z2.decimalFloatingPoint("PART-TARGET");
                    break;
                  case "PART":
                    var Q2 = d2.partList;
                    Q2 || (Q2 = d2.partList = []);
                    var $2 = m2 > 0 ? Q2[Q2.length - 1] : void 0, J2 = m2++, Z2 = new v.Part(new h(w2), b2, e3, J2, $2);
                    Q2.push(Z2), b2.duration += Z2.duration;
                    break;
                  case "PRELOAD-HINT":
                    var tt2 = new h(w2);
                    d2.preloadHint = tt2;
                    break;
                  case "RENDITION-REPORT":
                    var et2 = new h(w2);
                    d2.renditionReports = d2.renditionReports || [], d2.renditionReports.push(et2);
                    break;
                  default:
                    l.logger.warn("line parsed but not handled: " + s2);
                }
              }
            }
            S2 && !S2.relurl ? (c2.pop(), y2 -= S2.duration, d2.partList && (d2.fragmentHint = S2)) : d2.partList && (K(b2, S2), b2.cc = E2, d2.fragmentHint = b2, u2 && j(b2, u2, d2));
            var rt2 = c2.length, it2 = c2[0], nt2 = c2[rt2 - 1];
            if ((y2 += d2.skippedSegments * d2.targetduration) > 0 && rt2 && nt2) {
              d2.averagetargetduration = y2 / rt2;
              var at2 = nt2.sn;
              d2.endSN = "initSegment" !== at2 ? at2 : 0, d2.live || (nt2.endList = true), it2 && (d2.startCC = it2.cc);
            } else
              d2.endSN = 0, d2.startCC = 0;
            return d2.fragmentHint && (y2 += d2.fragmentHint.duration), d2.totalduration = y2, d2.endCC = E2, L2 > 0 && function(t5, e4) {
              for (var r4 = t5[e4], i4 = e4; i4--; ) {
                var n3 = t5[i4];
                if (!n3)
                  return;
                n3.programDateTime = r4.programDateTime - 1e3 * n3.duration, r4 = n3;
              }
            }(c2, L2), d2;
          }, t3;
        }();
        function U(t3, e3) {
          var r3, i3, n2 = new h(t3), a2 = null != (r3 = n2.enumeratedString("METHOD")) ? r3 : "", s2 = n2.URI, o2 = n2.hexadecimalInteger("IV"), u2 = n2.enumeratedString("KEYFORMATVERSIONS"), d2 = null != (i3 = n2.enumeratedString("KEYFORMAT")) ? i3 : "identity";
          s2 && n2.IV && !o2 && l.logger.error("Invalid IV: " + n2.IV);
          var c2 = s2 ? N.resolve(s2, e3) : "", f2 = (u2 || "1").split("/").map(Number).filter(Number.isFinite);
          return new w(a2, c2, d2, f2, o2);
        }
        function B(t3, e3) {
          ["video", "audio", "text"].forEach(function(r3) {
            var i3 = t3.filter(function(t4) {
              return function(t5, e4) {
                var r4 = C[e4];
                return !!r4 && true === r4[t5.slice(0, 4)];
              }(t4, r3);
            });
            if (i3.length) {
              var n2 = i3.filter(function(t4) {
                return 0 === t4.lastIndexOf("avc1", 0) || 0 === t4.lastIndexOf("mp4a", 0);
              });
              e3[r3 + "Codec"] = n2.length > 0 ? n2[0] : i3[0], t3 = t3.filter(function(t4) {
                return -1 === i3.indexOf(t4);
              });
            }
          }), e3.unknownCodecs = t3;
        }
        function G(t3, e3, r3) {
          var i3 = e3[r3];
          i3 && (t3[r3] = i3);
        }
        function K(t3, e3) {
          t3.rawProgramDateTime ? t3.programDateTime = Date.parse(t3.rawProgramDateTime) : null != e3 && e3.programDateTime && (t3.programDateTime = e3.endProgramDateTime), (0, a.isFiniteNumber)(t3.programDateTime) || (t3.programDateTime = null, t3.rawProgramDateTime = null);
        }
        function H(t3, e3, r3, i3) {
          t3.relurl = e3.URI, e3.BYTERANGE && t3.setByteRange(e3.BYTERANGE), t3.level = r3, t3.sn = "initSegment", i3 && (t3.levelkeys = i3), t3.initSegment = null;
        }
        function j(t3, e3, r3) {
          t3.levelkeys = e3;
          var i3 = r3.encryptedFragments;
          i3.length && i3[i3.length - 1].levelkeys === e3 || !Object.keys(e3).some(function(t4) {
            return e3[t4].isCommonEncryption;
          }) || i3.push(t3);
        }
        var V = r2(308);
        function Y(t3, e3) {
          var r3 = t3.url;
          return void 0 !== r3 && 0 !== r3.indexOf("data:") || (r3 = e3.url), r3;
        }
        const W = function() {
          function t3(t4) {
            this.hls = void 0, this.loaders = /* @__PURE__ */ Object.create(null), this.hls = t4, this.registerListeners();
          }
          var e3 = t3.prototype;
          return e3.startLoad = function(t4) {
          }, e3.stopLoad = function() {
            this.destroyInternalLoaders();
          }, e3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.on(s.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.off(s.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e3.createInternalLoader = function(t4) {
            var e4 = this.hls.config, r3 = e4.pLoader, i3 = e4.loader, n2 = new (r3 || i3)(e4);
            return t4.loader = n2, this.loaders[t4.type] = n2, n2;
          }, e3.getInternalLoader = function(t4) {
            return this.loaders[t4.type];
          }, e3.resetInternalLoader = function(t4) {
            this.loaders[t4] && delete this.loaders[t4];
          }, e3.destroyInternalLoaders = function() {
            for (var t4 in this.loaders) {
              var e4 = this.loaders[t4];
              e4 && e4.destroy(), this.resetInternalLoader(t4);
            }
          }, e3.destroy = function() {
            this.unregisterListeners(), this.destroyInternalLoaders();
          }, e3.onManifestLoading = function(t4, e4) {
            var r3 = e4.url;
            this.load({ id: null, groupId: null, level: 0, responseType: "text", type: V.PlaylistContextType.MANIFEST, url: r3, deliveryDirectives: null });
          }, e3.onLevelLoading = function(t4, e4) {
            var r3 = e4.id, i3 = e4.level, n2 = e4.url, a2 = e4.deliveryDirectives;
            this.load({ id: r3, groupId: null, level: i3, responseType: "text", type: V.PlaylistContextType.LEVEL, url: n2, deliveryDirectives: a2 });
          }, e3.onAudioTrackLoading = function(t4, e4) {
            var r3 = e4.id, i3 = e4.groupId, n2 = e4.url, a2 = e4.deliveryDirectives;
            this.load({ id: r3, groupId: i3, level: null, responseType: "text", type: V.PlaylistContextType.AUDIO_TRACK, url: n2, deliveryDirectives: a2 });
          }, e3.onSubtitleTrackLoading = function(t4, e4) {
            var r3 = e4.id, i3 = e4.groupId, n2 = e4.url, a2 = e4.deliveryDirectives;
            this.load({ id: r3, groupId: i3, level: null, responseType: "text", type: V.PlaylistContextType.SUBTITLE_TRACK, url: n2, deliveryDirectives: a2 });
          }, e3.load = function(t4) {
            var e4, r3, i3, n2, a2, s2, o2 = this.hls.config, u2 = this.getInternalLoader(t4);
            if (u2) {
              var d2 = u2.context;
              if (d2 && d2.url === t4.url)
                return void l.logger.trace("[playlist-loader]: playlist request ongoing");
              l.logger.log("[playlist-loader]: aborting previous loader for type: " + t4.type), u2.abort();
            }
            switch (t4.type) {
              case V.PlaylistContextType.MANIFEST:
                r3 = o2.manifestLoadingMaxRetry, i3 = o2.manifestLoadingTimeOut, n2 = o2.manifestLoadingRetryDelay, a2 = o2.manifestLoadingMaxRetryTimeout;
                break;
              case V.PlaylistContextType.LEVEL:
              case V.PlaylistContextType.AUDIO_TRACK:
              case V.PlaylistContextType.SUBTITLE_TRACK:
                r3 = 0, i3 = o2.levelLoadingTimeOut;
                break;
              default:
                r3 = o2.levelLoadingMaxRetry, i3 = o2.levelLoadingTimeOut, n2 = o2.levelLoadingRetryDelay, a2 = o2.levelLoadingMaxRetryTimeout;
            }
            if (u2 = this.createInternalLoader(t4), null !== (e4 = t4.deliveryDirectives) && void 0 !== e4 && e4.part && (t4.type === V.PlaylistContextType.LEVEL && null !== t4.level ? s2 = this.hls.levels[t4.level].details : t4.type === V.PlaylistContextType.AUDIO_TRACK && null !== t4.id ? s2 = this.hls.audioTracks[t4.id].details : t4.type === V.PlaylistContextType.SUBTITLE_TRACK && null !== t4.id && (s2 = this.hls.subtitleTracks[t4.id].details), s2)) {
              var h2 = s2.partTarget, c2 = s2.targetduration;
              h2 && c2 && (i3 = Math.min(1e3 * Math.max(3 * h2, 0.8 * c2), i3));
            }
            var f2 = { timeout: i3, maxRetry: r3, retryDelay: n2, maxRetryDelay: a2, highWaterMark: 0 }, g2 = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
            u2.load(t4, f2, g2);
          }, e3.loadsuccess = function(t4, e4, r3, i3) {
            void 0 === i3 && (i3 = null), this.resetInternalLoader(r3.type);
            var n2 = t4.data;
            0 === n2.indexOf("#EXTM3U") ? (e4.parsing.start = performance.now(), n2.indexOf("#EXTINF:") > 0 || n2.indexOf("#EXT-X-TARGETDURATION:") > 0 ? this.handleTrackOrLevelPlaylist(t4, e4, r3, i3) : this.handleMasterPlaylist(t4, e4, r3, i3)) : this.handleManifestParsingError(t4, r3, "no EXTM3U delimiter", i3);
          }, e3.loaderror = function(t4, e4, r3) {
            void 0 === r3 && (r3 = null), this.handleNetworkError(e4, r3, false, t4);
          }, e3.loadtimeout = function(t4, e4, r3) {
            void 0 === r3 && (r3 = null), this.handleNetworkError(e4, r3, true);
          }, e3.handleMasterPlaylist = function(t4, e4, r3, i3) {
            var n2 = this.hls, a2 = t4.data, o2 = Y(t4, r3), u2 = N.parseMasterPlaylist(a2, o2), d2 = u2.levels, c2 = u2.sessionData, f2 = u2.sessionKeys;
            if (d2.length) {
              var g2 = d2.map(function(t5) {
                return { id: t5.attrs.AUDIO, audioCodec: t5.audioCodec };
              }), v2 = d2.map(function(t5) {
                return { id: t5.attrs.SUBTITLES, textCodec: t5.textCodec };
              }), p2 = N.parseMasterPlaylistMedia(a2, o2, "AUDIO", g2), m2 = N.parseMasterPlaylistMedia(a2, o2, "SUBTITLES", v2), y2 = N.parseMasterPlaylistMedia(a2, o2, "CLOSED-CAPTIONS");
              p2.length && (p2.some(function(t5) {
                return !t5.url;
              }) || !d2[0].audioCodec || d2[0].attrs.AUDIO || (l.logger.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), p2.unshift({ type: "main", name: "main", default: false, autoselect: false, forced: false, id: -1, attrs: new h({}), bitrate: 0, url: "" }))), n2.trigger(s.Events.MANIFEST_LOADED, { levels: d2, audioTracks: p2, subtitles: m2, captions: y2, url: o2, stats: e4, networkDetails: i3, sessionData: c2, sessionKeys: f2 });
            } else
              this.handleManifestParsingError(t4, r3, "no level found in manifest", i3);
          }, e3.handleTrackOrLevelPlaylist = function(t4, e4, r3, i3) {
            var n2 = this.hls, l2 = r3.id, u2 = r3.level, d2 = r3.type, c2 = Y(t4, r3), f2 = (0, a.isFiniteNumber)(l2) ? l2 : 0, g2 = (0, a.isFiniteNumber)(u2) ? u2 : f2, v2 = function(t5) {
              switch (t5.type) {
                case V.PlaylistContextType.AUDIO_TRACK:
                  return V.PlaylistLevelType.AUDIO;
                case V.PlaylistContextType.SUBTITLE_TRACK:
                  return V.PlaylistLevelType.SUBTITLE;
                default:
                  return V.PlaylistLevelType.MAIN;
              }
            }(r3), p2 = N.parseLevelPlaylist(t4.data, c2, g2, v2, f2);
            if (p2.fragments.length) {
              if (d2 === V.PlaylistContextType.MANIFEST) {
                var m2 = { attrs: new h({}), bitrate: 0, details: p2, name: "", url: c2 };
                n2.trigger(s.Events.MANIFEST_LOADED, { levels: [m2], audioTracks: [], url: c2, stats: e4, networkDetails: i3, sessionData: null, sessionKeys: null });
              }
              e4.parsing.end = performance.now(), r3.levelDetails = p2, this.handlePlaylistLoaded(t4, e4, r3, i3);
            } else
              n2.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.LEVEL_EMPTY_ERROR, fatal: false, url: c2, reason: "no fragments found in level", level: "number" == typeof r3.level ? r3.level : void 0 });
          }, e3.handleManifestParsingError = function(t4, e4, r3, i3) {
            this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: e4.type === V.PlaylistContextType.MANIFEST, url: t4.url, reason: r3, response: t4, context: e4, networkDetails: i3 });
          }, e3.handleNetworkError = function(t4, e4, r3, i3) {
            void 0 === r3 && (r3 = false), l.logger.warn("[playlist-loader]: A network " + (r3 ? "timeout" : "error") + " occurred while loading " + t4.type + " level: " + t4.level + " id: " + t4.id + ' group-id: "' + t4.groupId + '"');
            var n2 = o.ErrorDetails.UNKNOWN, a2 = false, u2 = this.getInternalLoader(t4);
            switch (t4.type) {
              case V.PlaylistContextType.MANIFEST:
                n2 = r3 ? o.ErrorDetails.MANIFEST_LOAD_TIMEOUT : o.ErrorDetails.MANIFEST_LOAD_ERROR, a2 = true;
                break;
              case V.PlaylistContextType.LEVEL:
                n2 = r3 ? o.ErrorDetails.LEVEL_LOAD_TIMEOUT : o.ErrorDetails.LEVEL_LOAD_ERROR, a2 = false;
                break;
              case V.PlaylistContextType.AUDIO_TRACK:
                n2 = r3 ? o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, a2 = false;
                break;
              case V.PlaylistContextType.SUBTITLE_TRACK:
                n2 = r3 ? o.ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : o.ErrorDetails.SUBTITLE_LOAD_ERROR, a2 = false;
            }
            u2 && this.resetInternalLoader(t4.type);
            var d2 = { type: o.ErrorTypes.NETWORK_ERROR, details: n2, fatal: a2, url: t4.url, loader: u2, context: t4, networkDetails: e4 };
            i3 && (d2.response = i3), this.hls.trigger(s.Events.ERROR, d2);
          }, e3.handlePlaylistLoaded = function(t4, e4, r3, i3) {
            var n2 = r3.type, a2 = r3.level, o2 = r3.id, l2 = r3.groupId, u2 = r3.loader, d2 = r3.levelDetails, h2 = r3.deliveryDirectives;
            if (null != d2 && d2.targetduration) {
              if (u2)
                switch (d2.live && (u2.getCacheAge && (d2.ageHeader = u2.getCacheAge() || 0), u2.getCacheAge && !isNaN(d2.ageHeader) || (d2.ageHeader = 0)), n2) {
                  case V.PlaylistContextType.MANIFEST:
                  case V.PlaylistContextType.LEVEL:
                    this.hls.trigger(s.Events.LEVEL_LOADED, { details: d2, level: a2 || 0, id: o2 || 0, stats: e4, networkDetails: i3, deliveryDirectives: h2 });
                    break;
                  case V.PlaylistContextType.AUDIO_TRACK:
                    this.hls.trigger(s.Events.AUDIO_TRACK_LOADED, { details: d2, id: o2 || 0, groupId: l2 || "", stats: e4, networkDetails: i3, deliveryDirectives: h2 });
                    break;
                  case V.PlaylistContextType.SUBTITLE_TRACK:
                    this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADED, { details: d2, id: o2 || 0, groupId: l2 || "", stats: e4, networkDetails: i3, deliveryDirectives: h2 });
                }
            } else
              this.handleManifestParsingError(t4, r3, "invalid target duration", i3);
          }, t3;
        }();
        function q(t3, e3) {
          var r3;
          try {
            r3 = new Event("addtrack");
          } catch (t4) {
            (r3 = document.createEvent("Event")).initEvent("addtrack", false, false);
          }
          r3.track = t3, e3.dispatchEvent(r3);
        }
        function X(t3, e3) {
          var r3 = t3.mode;
          if ("disabled" === r3 && (t3.mode = "hidden"), t3.cues && !t3.cues.getCueById(e3.id))
            try {
              if (t3.addCue(e3), !t3.cues.getCueById(e3.id))
                throw new Error("addCue is failed for: " + e3);
            } catch (r4) {
              l.logger.debug("[texttrack-utils]: " + r4);
              var i3 = new self.TextTrackCue(e3.startTime, e3.endTime, e3.text);
              i3.id = e3.id, t3.addCue(i3);
            }
          "disabled" === r3 && (t3.mode = r3);
        }
        function z(t3) {
          var e3 = t3.mode;
          if ("disabled" === e3 && (t3.mode = "hidden"), t3.cues)
            for (var r3 = t3.cues.length; r3--; )
              t3.removeCue(t3.cues[r3]);
          "disabled" === e3 && (t3.mode = e3);
        }
        function Q(t3, e3, r3, i3) {
          var n2 = t3.mode;
          if ("disabled" === n2 && (t3.mode = "hidden"), t3.cues && t3.cues.length > 0)
            for (var a2 = function(t4, e4, r4) {
              var i4 = [], n3 = function(t5, e5) {
                if (e5 < t5[0].startTime)
                  return 0;
                var r5 = t5.length - 1;
                if (e5 > t5[r5].endTime)
                  return -1;
                for (var i5 = 0, n4 = r5; i5 <= n4; ) {
                  var a4 = Math.floor((n4 + i5) / 2);
                  if (e5 < t5[a4].startTime)
                    n4 = a4 - 1;
                  else {
                    if (!(e5 > t5[a4].startTime && i5 < r5))
                      return a4;
                    i5 = a4 + 1;
                  }
                }
                return t5[i5].startTime - e5 < e5 - t5[n4].startTime ? i5 : n4;
              }(t4, e4);
              if (n3 > -1)
                for (var a3 = n3, s3 = t4.length; a3 < s3; a3++) {
                  var o2 = t4[a3];
                  if (o2.startTime >= e4 && o2.endTime <= r4)
                    i4.push(o2);
                  else if (o2.startTime > r4)
                    return i4;
                }
              return i4;
            }(t3.cues, e3, r3), s2 = 0; s2 < a2.length; s2++)
              i3 && !i3(a2[s2]) || t3.removeCue(a2[s2]);
          "disabled" === n2 && (t3.mode = n2);
        }
        var $ = r2(181), J = r2(856);
        function Z() {
          return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
        }
        var tt = function() {
          var t3 = Z();
          try {
            new t3(0, Number.POSITIVE_INFINITY, "");
          } catch (t4) {
            return Number.MAX_VALUE;
          }
          return Number.POSITIVE_INFINITY;
        }();
        function et(t3, e3) {
          return t3.getTime() / 1e3 - e3;
        }
        const rt = function() {
          function t3(t4) {
            this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = t4, this._registerListeners();
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null;
          }, e3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e3.onMediaAttached = function(t4, e4) {
            this.media = e4.media;
          }, e3.onMediaDetaching = function() {
            this.id3Track && (z(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {});
          }, e3.onManifestLoading = function() {
            this.dateRangeCuesAppended = {};
          }, e3.createTrack = function(t4) {
            var e4 = this.getID3Track(t4.textTracks);
            return e4.mode = "hidden", e4;
          }, e3.getID3Track = function(t4) {
            if (this.media) {
              for (var e4 = 0; e4 < t4.length; e4++) {
                var r3 = t4[e4];
                if ("metadata" === r3.kind && "id3" === r3.label)
                  return q(r3, this.media), r3;
              }
              return this.media.addTextTrack("metadata", "id3");
            }
          }, e3.onFragParsingMetadata = function(t4, e4) {
            if (this.media) {
              var r3 = this.hls.config, i3 = r3.enableEmsgMetadataCues, n2 = r3.enableID3MetadataCues;
              if (i3 || n2) {
                var a2 = e4.samples;
                this.id3Track || (this.id3Track = this.createTrack(this.media));
                for (var s2 = Z(), o2 = 0; o2 < a2.length; o2++) {
                  var l2 = a2[o2].type;
                  if ((l2 !== J.MetadataSchema.emsg || i3) && n2) {
                    var u2 = $.getID3Frames(a2[o2].data);
                    if (u2) {
                      var d2 = a2[o2].pts, h2 = d2 + a2[o2].duration;
                      h2 > tt && (h2 = tt), h2 - d2 <= 0 && (h2 = d2 + 0.25);
                      for (var c2 = 0; c2 < u2.length; c2++) {
                        var f2 = u2[c2];
                        if (!$.isTimeStampFrame(f2)) {
                          this.updateId3CueEnds(d2);
                          var g2 = new s2(d2, h2, "");
                          g2.value = f2, l2 && (g2.type = l2), this.id3Track.addCue(g2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }, e3.updateId3CueEnds = function(t4) {
            var e4, r3 = null === (e4 = this.id3Track) || void 0 === e4 ? void 0 : e4.cues;
            if (r3)
              for (var i3 = r3.length; i3--; ) {
                var n2 = r3[i3];
                n2.startTime < t4 && n2.endTime === tt && (n2.endTime = t4);
              }
          }, e3.onBufferFlushing = function(t4, e4) {
            var r3 = e4.startOffset, i3 = e4.endOffset, n2 = e4.type, a2 = this.id3Track, s2 = this.hls;
            if (s2) {
              var o2 = s2.config, l2 = o2.enableEmsgMetadataCues, u2 = o2.enableID3MetadataCues;
              a2 && (l2 || u2) && Q(a2, r3, i3, "audio" === n2 ? function(t5) {
                return t5.type === J.MetadataSchema.audioId3 && u2;
              } : "video" === n2 ? function(t5) {
                return t5.type === J.MetadataSchema.emsg && l2;
              } : function(t5) {
                return t5.type === J.MetadataSchema.audioId3 && u2 || t5.type === J.MetadataSchema.emsg && l2;
              });
            }
          }, e3.onLevelUpdated = function(t4, e4) {
            var r3 = this, n2 = e4.details;
            if (this.media && n2.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) {
              var s2 = this.dateRangeCuesAppended, o2 = this.id3Track, l2 = n2.dateRanges, u2 = Object.keys(l2);
              if (o2)
                for (var d2 = Object.keys(s2).filter(function(t5) {
                  return !u2.includes(t5);
                }), h2 = function(t5) {
                  var e5 = d2[t5];
                  Object.keys(s2[e5].cues).forEach(function(t6) {
                    o2.removeCue(s2[e5].cues[t6]);
                  }), delete s2[e5];
                }, c2 = d2.length; c2--; )
                  h2(c2);
              var f2 = n2.fragments[n2.fragments.length - 1];
              if (0 !== u2.length && (0, a.isFiniteNumber)(null == f2 ? void 0 : f2.programDateTime)) {
                this.id3Track || (this.id3Track = this.createTrack(this.media));
                for (var g2 = f2.programDateTime / 1e3 - f2.start, v2 = Z(), p2 = function(t5) {
                  var e5 = u2[t5], n3 = l2[e5], a2 = s2[e5], o3 = (null == a2 ? void 0 : a2.cues) || {}, d3 = (null == a2 ? void 0 : a2.durationKnown) || false, h3 = et(n3.startDate, g2), c3 = tt, f3 = n3.endDate;
                  if (f3)
                    c3 = et(f3, g2), d3 = true;
                  else if (n3.endOnNext && !d3) {
                    var p3 = u2.reduce(function(t6, e6) {
                      var r4 = l2[e6];
                      return r4.class === n3.class && r4.id !== e6 && r4.startDate > n3.startDate && t6.push(r4), t6;
                    }, []).sort(function(t6, e6) {
                      return t6.startDate.getTime() - e6.startDate.getTime();
                    })[0];
                    p3 && (c3 = et(p3.startDate, g2), d3 = true);
                  }
                  for (var m3, y2 = Object.keys(n3.attr), E2 = 0; E2 < y2.length; E2++) {
                    var T2 = y2[E2];
                    if (T2 !== i2.ID && T2 !== i2.CLASS && T2 !== i2.START_DATE && T2 !== i2.DURATION && T2 !== i2.END_DATE && T2 !== i2.END_ON_NEXT) {
                      var S2 = o3[T2];
                      if (S2)
                        d3 && !a2.durationKnown && (S2.endTime = c3);
                      else {
                        var b2 = n3.attr[T2];
                        S2 = new v2(h3, c3, ""), T2 !== i2.SCTE35_OUT && T2 !== i2.SCTE35_IN || (m3 = b2, b2 = Uint8Array.from(m3.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer), S2.value = { key: T2, data: b2 }, S2.type = J.MetadataSchema.dateRange, r3.id3Track.addCue(S2), o3[T2] = S2;
                      }
                    }
                  }
                  s2[e5] = { cues: o3, dateRange: n3, durationKnown: d3 };
                }, m2 = 0; m2 < u2.length; m2++)
                  p2(m2);
              }
            }
          }, t3;
        }();
        function it(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        var nt = function() {
          function t3(t4) {
            var e4 = this;
            this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
              return e4.timeupdate();
            }, this.hls = t4, this.config = t4.config, this.registerListeners();
          }
          var e3, r3, i3 = t3.prototype;
          return i3.destroy = function() {
            this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null;
          }, i3.registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(s.Events.ERROR, this.onError, this);
          }, i3.unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached), this.hls.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching), this.hls.off(s.Events.MANIFEST_LOADING, this.onManifestLoading), this.hls.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated), this.hls.off(s.Events.ERROR, this.onError);
          }, i3.onMediaAttached = function(t4, e4) {
            this.media = e4.media, this.media.addEventListener("timeupdate", this.timeupdateHandler);
          }, i3.onMediaDetaching = function() {
            this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null);
          }, i3.onManifestLoading = function() {
            this.levelDetails = null, this._latency = null, this.stallCount = 0;
          }, i3.onLevelUpdated = function(t4, e4) {
            var r4 = e4.details;
            this.levelDetails = r4, r4.advanced && this.timeupdate(), !r4.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler);
          }, i3.onError = function(t4, e4) {
            e4.details === o.ErrorDetails.BUFFER_STALLED_ERROR && (this.stallCount++, l.logger.warn("[playback-rate-controller]: Stall detected, adjusting target latency"));
          }, i3.timeupdate = function() {
            var t4 = this.media, e4 = this.levelDetails;
            if (t4 && e4) {
              this.currentTime = t4.currentTime;
              var r4 = this.computeLatency();
              if (null !== r4) {
                this._latency = r4;
                var i4 = this.config, n2 = i4.lowLatencyMode, a2 = i4.maxLiveSyncPlaybackRate;
                if (n2 && 1 !== a2) {
                  var s2 = this.targetLatency;
                  if (null !== s2) {
                    var o2 = r4 - s2, l2 = o2 < Math.min(this.maxLatency, s2 + e4.targetduration);
                    if (e4.live && l2 && o2 > 0.05 && this.forwardBufferLength > 1) {
                      var u2 = Math.min(2, Math.max(1, a2)), d2 = Math.round(2 / (1 + Math.exp(-0.75 * o2 - this.edgeStalled)) * 20) / 20;
                      t4.playbackRate = Math.min(u2, Math.max(1, d2));
                    } else
                      1 !== t4.playbackRate && 0 !== t4.playbackRate && (t4.playbackRate = 1);
                  }
                }
              }
            }
          }, i3.estimateLiveEdge = function() {
            var t4 = this.levelDetails;
            return null === t4 ? null : t4.edge + t4.age;
          }, i3.computeLatency = function() {
            var t4 = this.estimateLiveEdge();
            return null === t4 ? null : t4 - this.currentTime;
          }, e3 = t3, (r3 = [{ key: "latency", get: function() {
            return this._latency || 0;
          } }, { key: "maxLatency", get: function() {
            var t4 = this.config, e4 = this.levelDetails;
            return void 0 !== t4.liveMaxLatencyDuration ? t4.liveMaxLatencyDuration : e4 ? t4.liveMaxLatencyDurationCount * e4.targetduration : 0;
          } }, { key: "targetLatency", get: function() {
            var t4 = this.levelDetails;
            if (null === t4)
              return null;
            var e4 = t4.holdBack, r4 = t4.partHoldBack, i4 = t4.targetduration, n2 = this.config, a2 = n2.liveSyncDuration, s2 = n2.liveSyncDurationCount, o2 = n2.lowLatencyMode, l2 = this.hls.userConfig, u2 = o2 && r4 || e4;
            (l2.liveSyncDuration || l2.liveSyncDurationCount || 0 === u2) && (u2 = void 0 !== a2 ? a2 : s2 * i4);
            var d2 = i4;
            return u2 + Math.min(1 * this.stallCount, d2);
          } }, { key: "liveSyncPosition", get: function() {
            var t4 = this.estimateLiveEdge(), e4 = this.targetLatency, r4 = this.levelDetails;
            if (null === t4 || null === e4 || null === r4)
              return null;
            var i4 = r4.edge, n2 = t4 - e4 - this.edgeStalled, a2 = i4 - r4.totalduration, s2 = i4 - (this.config.lowLatencyMode && r4.partTarget || r4.targetduration);
            return Math.min(Math.max(a2, n2), s2);
          } }, { key: "drift", get: function() {
            var t4 = this.levelDetails;
            return null === t4 ? 1 : t4.drift;
          } }, { key: "edgeStalled", get: function() {
            var t4 = this.levelDetails;
            if (null === t4)
              return 0;
            var e4 = 3 * (this.config.lowLatencyMode && t4.partTarget || t4.targetduration);
            return Math.max(t4.age - e4, 0);
          } }, { key: "forwardBufferLength", get: function() {
            var t4 = this.media, e4 = this.levelDetails;
            if (!t4 || !e4)
              return 0;
            var r4 = t4.buffered.length;
            return (r4 ? t4.buffered.end(r4 - 1) : e4.edge) - this.currentTime;
          } }]) && it(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }();
        function at(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        var st, ot = ["NONE", "TYPE-0", "TYPE-1", "TYPE-2", null];
        !function(t3) {
          t3.No = "", t3.Yes = "YES", t3.v2 = "v2";
        }(st || (st = {}));
        var lt = function() {
          function t3(t4, e3, r3) {
            this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = t4, this.part = e3, this.skip = r3;
          }
          return t3.prototype.addDirectives = function(t4) {
            var e3 = new self.URL(t4);
            return void 0 !== this.msn && e3.searchParams.set("_HLS_msn", this.msn.toString()), void 0 !== this.part && e3.searchParams.set("_HLS_part", this.part.toString()), this.skip && e3.searchParams.set("_HLS_skip", this.skip), e3.href;
          }, t3;
        }(), ut = function() {
          function t3(t4) {
            this.attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.unknownCodecs = void 0, this.audioGroupIds = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.textGroupIds = void 0, this.url = void 0, this._urlId = 0, this.url = [t4.url], this.attrs = t4.attrs, this.bitrate = t4.bitrate, t4.details && (this.details = t4.details), this.id = t4.id || 0, this.name = t4.name, this.width = t4.width || 0, this.height = t4.height || 0, this.audioCodec = t4.audioCodec, this.videoCodec = t4.videoCodec, this.unknownCodecs = t4.unknownCodecs, this.codecSet = [t4.videoCodec, t4.audioCodec].filter(function(t5) {
              return t5;
            }).join(",").replace(/\.[^.,]+/g, "");
          }
          var e3, r3;
          return e3 = t3, (r3 = [{ key: "maxBitrate", get: function() {
            return Math.max(this.realBitrate, this.bitrate);
          } }, { key: "uri", get: function() {
            return this.url[this._urlId] || "";
          } }, { key: "urlId", get: function() {
            return this._urlId;
          }, set: function(t4) {
            var e4 = t4 % this.url.length;
            this._urlId !== e4 && (this.details = void 0, this._urlId = e4);
          } }]) && at(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }();
        function dt() {
          return dt = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, dt.apply(this, arguments);
        }
        function ht(t3, e3, r3) {
          switch (e3) {
            case "audio":
              t3.audioGroupIds || (t3.audioGroupIds = []), t3.audioGroupIds.push(r3);
              break;
            case "text":
              t3.textGroupIds || (t3.textGroupIds = []), t3.textGroupIds.push(r3);
          }
        }
        function ct(t3) {
          var e3 = {};
          t3.forEach(function(t4) {
            var r3 = t4.groupId || "";
            t4.id = e3[r3] = e3[r3] || 0, e3[r3]++;
          });
        }
        function ft(t3, e3) {
          var r3 = e3.startPTS;
          if ((0, a.isFiniteNumber)(r3)) {
            var i3, n2 = 0;
            e3.sn > t3.sn ? (n2 = r3 - t3.start, i3 = t3) : (n2 = t3.start - r3, i3 = e3), i3.duration !== n2 && (i3.duration = n2);
          } else
            e3.sn > t3.sn ? t3.cc === e3.cc && t3.minEndPTS ? e3.start = t3.start + (t3.minEndPTS - t3.start) : e3.start = t3.start + t3.duration : e3.start = Math.max(t3.start - e3.duration, 0);
        }
        function gt(t3, e3, r3, i3, n2, s2) {
          i3 - r3 <= 0 && (l.logger.warn("Fragment should have a positive duration", e3), i3 = r3 + e3.duration, s2 = n2 + e3.duration);
          var o2 = r3, u2 = i3, d2 = e3.startPTS, h2 = e3.endPTS;
          if ((0, a.isFiniteNumber)(d2)) {
            var c2 = Math.abs(d2 - r3);
            (0, a.isFiniteNumber)(e3.deltaPTS) ? e3.deltaPTS = Math.max(c2, e3.deltaPTS) : e3.deltaPTS = c2, o2 = Math.max(r3, d2), r3 = Math.min(r3, d2), n2 = Math.min(n2, e3.startDTS), u2 = Math.min(i3, h2), i3 = Math.max(i3, h2), s2 = Math.max(s2, e3.endDTS);
          }
          e3.duration = i3 - r3;
          var f2 = r3 - e3.start;
          e3.start = e3.startPTS = r3, e3.maxStartPTS = o2, e3.startDTS = n2, e3.endPTS = i3, e3.minEndPTS = u2, e3.endDTS = s2;
          var g2, v2 = e3.sn;
          if (!t3 || v2 < t3.startSN || v2 > t3.endSN)
            return 0;
          var p2 = v2 - t3.startSN, m2 = t3.fragments;
          for (m2[p2] = e3, g2 = p2; g2 > 0; g2--)
            ft(m2[g2], m2[g2 - 1]);
          for (g2 = p2; g2 < m2.length - 1; g2++)
            ft(m2[g2], m2[g2 + 1]);
          return t3.fragmentHint && ft(m2[m2.length - 1], t3.fragmentHint), t3.PTSKnown = t3.alignedSliding = true, f2;
        }
        function vt(t3, e3) {
          var r3 = e3.startSN + e3.skippedSegments - t3.startSN, i3 = t3.fragments;
          r3 < 0 || r3 >= i3.length || pt(e3, i3[r3].start);
        }
        function pt(t3, e3) {
          if (e3) {
            for (var r3 = t3.fragments, i3 = t3.skippedSegments; i3 < r3.length; i3++)
              r3[i3].start += e3;
            t3.fragmentHint && (t3.fragmentHint.start += e3);
          }
        }
        var mt = function() {
          function t3(t4, e4) {
            this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = false, this.retryCount = 0, this.log = void 0, this.warn = void 0, this.log = l.logger.log.bind(l.logger, e4 + ":"), this.warn = l.logger.warn.bind(l.logger, e4 + ":"), this.hls = t4;
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.clearTimer(), this.hls = this.log = this.warn = null;
          }, e3.onError = function(t4, e4) {
            !e4.fatal || e4.type !== o.ErrorTypes.NETWORK_ERROR && e4.type !== o.ErrorTypes.KEY_SYSTEM_ERROR || this.stopLoad();
          }, e3.clearTimer = function() {
            clearTimeout(this.timer), this.timer = -1;
          }, e3.startLoad = function() {
            this.canLoad = true, this.retryCount = 0, this.requestScheduled = -1, this.loadPlaylist();
          }, e3.stopLoad = function() {
            this.canLoad = false, this.clearTimer();
          }, e3.switchParams = function(t4, e4) {
            var r3 = null == e4 ? void 0 : e4.renditionReports;
            if (r3)
              for (var i3 = 0; i3 < r3.length; i3++) {
                var n2 = r3[i3], a2 = void 0;
                try {
                  a2 = new self.URL(n2.URI, e4.url).href;
                } catch (t5) {
                  l.logger.warn("Could not construct new URL for Rendition Report: " + t5), a2 = n2.URI || "";
                }
                if (a2 === t4.slice(-a2.length)) {
                  var s2 = parseInt(n2["LAST-MSN"]) || (null == e4 ? void 0 : e4.lastPartSn), o2 = parseInt(n2["LAST-PART"]) || (null == e4 ? void 0 : e4.lastPartIndex);
                  if (this.hls.config.lowLatencyMode) {
                    var u2 = Math.min(e4.age - e4.partTarget, e4.targetduration);
                    o2 >= 0 && u2 > e4.partTarget && (o2 += 1);
                  }
                  return new lt(s2, o2 >= 0 ? o2 : void 0, st.No);
                }
              }
          }, e3.loadPlaylist = function(t4) {
            -1 === this.requestScheduled && (this.requestScheduled = self.performance.now());
          }, e3.shouldLoadTrack = function(t4) {
            return this.canLoad && t4 && !!t4.url && (!t4.details || t4.details.live);
          }, e3.playlistLoaded = function(t4, e4, r3) {
            var i3 = this, n2 = e4.details, s2 = e4.stats, o2 = self.performance.now(), u2 = s2.loading.first ? Math.max(0, o2 - s2.loading.first) : 0;
            if (n2.advancedDateTime = Date.now() - u2, n2.live || null != r3 && r3.live) {
              if (n2.reloaded(r3), r3 && this.log("live playlist " + t4 + " " + (n2.advanced ? "REFRESHED " + n2.lastPartSn + "-" + n2.lastPartIndex : "MISSED")), r3 && n2.fragments.length > 0 && function(t5, e5) {
                for (var r4 = null, i4 = t5.fragments, n3 = i4.length - 1; n3 >= 0; n3--) {
                  var s3 = i4[n3].initSegment;
                  if (s3) {
                    r4 = s3;
                    break;
                  }
                }
                t5.fragmentHint && delete t5.fragmentHint.endPTS;
                var o3, u3, d3, h3, c3, f3 = 0;
                if (function(t6, e6, r5) {
                  for (var i5 = e6.skippedSegments, n4 = Math.max(t6.startSN, e6.startSN) - e6.startSN, a2 = (t6.fragmentHint ? 1 : 0) + (i5 ? e6.endSN : Math.min(t6.endSN, e6.endSN)) - e6.startSN, s4 = e6.startSN - t6.startSN, o4 = e6.fragmentHint ? e6.fragments.concat(e6.fragmentHint) : e6.fragments, l2 = t6.fragmentHint ? t6.fragments.concat(t6.fragmentHint) : t6.fragments, u4 = n4; u4 <= a2; u4++) {
                    var d4 = l2[s4 + u4], h4 = o4[u4];
                    i5 && !h4 && u4 < i5 && (h4 = e6.fragments[u4] = d4), d4 && h4 && r5(d4, h4);
                  }
                }(t5, e5, function(t6, i5) {
                  t6.relurl && (f3 = t6.cc - i5.cc), (0, a.isFiniteNumber)(t6.startPTS) && (0, a.isFiniteNumber)(t6.endPTS) && (i5.start = i5.startPTS = t6.startPTS, i5.startDTS = t6.startDTS, i5.appendedPTS = t6.appendedPTS, i5.maxStartPTS = t6.maxStartPTS, i5.endPTS = t6.endPTS, i5.endDTS = t6.endDTS, i5.minEndPTS = t6.minEndPTS, i5.duration = t6.endPTS - t6.startPTS, i5.duration && (o3 = i5), e5.PTSKnown = e5.alignedSliding = true), i5.elementaryStreams = t6.elementaryStreams, i5.loader = t6.loader, i5.stats = t6.stats, i5.urlId = t6.urlId, t6.initSegment && (i5.initSegment = t6.initSegment, r4 = t6.initSegment);
                }), r4 && (e5.fragmentHint ? e5.fragments.concat(e5.fragmentHint) : e5.fragments).forEach(function(t6) {
                  var e6;
                  t6.initSegment && t6.initSegment.relurl !== (null === (e6 = r4) || void 0 === e6 ? void 0 : e6.relurl) || (t6.initSegment = r4);
                }), e5.skippedSegments)
                  if (e5.deltaUpdateFailed = e5.fragments.some(function(t6) {
                    return !t6;
                  }), e5.deltaUpdateFailed) {
                    l.logger.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                    for (var v3 = e5.skippedSegments; v3--; )
                      e5.fragments.shift();
                    e5.startSN = e5.fragments[0].sn, e5.startCC = e5.fragments[0].cc;
                  } else
                    e5.canSkipDateRanges && (e5.dateRanges = (u3 = t5.dateRanges, d3 = e5.dateRanges, h3 = e5.recentlyRemovedDateranges, c3 = dt({}, u3), h3 && h3.forEach(function(t6) {
                      delete c3[t6];
                    }), Object.keys(d3).forEach(function(t6) {
                      var e6 = new g(d3[t6].attr, c3[t6]);
                      e6.isValid ? c3[t6] = e6 : l.logger.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(d3[t6].attr) + '"');
                    }), c3));
                var p3 = e5.fragments;
                if (f3) {
                  l.logger.warn("discontinuity sliding from playlist, take drift into account");
                  for (var m3 = 0; m3 < p3.length; m3++)
                    p3[m3].cc += f3;
                }
                e5.skippedSegments && (e5.startCC = e5.fragments[0].cc), function(t6, e6, r5) {
                  if (t6 && e6)
                    for (var i5 = 0, n4 = 0, a2 = t6.length; n4 <= a2; n4++) {
                      var s4 = t6[n4], o4 = e6[n4 + i5];
                      s4 && o4 && s4.index === o4.index && s4.fragment.sn === o4.fragment.sn ? (l2 = s4, (u4 = o4).elementaryStreams = l2.elementaryStreams, u4.stats = l2.stats) : i5--;
                    }
                  var l2, u4;
                }(t5.partList, e5.partList), o3 ? gt(e5, o3, o3.startPTS, o3.endPTS, o3.startDTS, o3.endDTS) : vt(t5, e5), p3.length && (e5.totalduration = e5.edge - p3[0].start), e5.driftStartTime = t5.driftStartTime, e5.driftStart = t5.driftStart;
                var y3 = e5.advancedDateTime;
                if (e5.advanced && y3) {
                  var E3 = e5.edge;
                  e5.driftStart || (e5.driftStartTime = y3, e5.driftStart = E3), e5.driftEndTime = y3, e5.driftEnd = E3;
                } else
                  e5.driftEndTime = t5.driftEndTime, e5.driftEnd = t5.driftEnd, e5.advancedDateTime = t5.advancedDateTime;
              }(r3, n2), !this.canLoad || !n2.live)
                return;
              var d2, h2 = void 0, c2 = void 0;
              if (n2.canBlockReload && n2.endSN && n2.advanced) {
                var f2 = this.hls.config.lowLatencyMode, v2 = n2.lastPartSn, p2 = n2.endSN, m2 = n2.lastPartIndex, y2 = v2 === p2;
                -1 !== m2 ? (h2 = y2 ? p2 + 1 : v2, c2 = y2 ? f2 ? 0 : m2 : m2 + 1) : h2 = p2 + 1;
                var E2 = n2.age, T2 = E2 + n2.ageHeader, S2 = Math.min(T2 - n2.partTarget, 1.5 * n2.targetduration);
                if (S2 > 0) {
                  if (r3 && S2 > r3.tuneInGoal)
                    this.warn("CDN Tune-in goal increased from: " + r3.tuneInGoal + " to: " + S2 + " with playlist age: " + n2.age), S2 = 0;
                  else {
                    var b2 = Math.floor(S2 / n2.targetduration);
                    h2 += b2, void 0 !== c2 && (c2 += Math.round(S2 % n2.targetduration / n2.partTarget)), this.log("CDN Tune-in age: " + n2.ageHeader + "s last advanced " + E2.toFixed(2) + "s goal: " + S2 + " skip sn " + b2 + " to part " + c2);
                  }
                  n2.tuneInGoal = S2;
                }
                if (d2 = this.getDeliveryDirectives(n2, e4.deliveryDirectives, h2, c2), f2 || !y2)
                  return void this.loadPlaylist(d2);
              } else
                d2 = this.getDeliveryDirectives(n2, e4.deliveryDirectives, h2, c2);
              var L2 = this.hls.mainForwardBufferInfo, A2 = L2 ? L2.end - L2.len : 0, D2 = function(t5, e5) {
                void 0 === e5 && (e5 = 1 / 0);
                var r4 = 1e3 * t5.targetduration;
                if (t5.updated) {
                  var i4 = t5.fragments;
                  if (i4.length && 4 * r4 > e5) {
                    var n3 = 1e3 * i4[i4.length - 1].duration;
                    n3 < r4 && (r4 = n3);
                  }
                } else
                  r4 /= 2;
                return Math.round(r4);
              }(n2, 1e3 * (n2.edge - A2));
              n2.updated ? o2 > this.requestScheduled + D2 && (this.requestScheduled = s2.loading.start) : this.requestScheduled = -1, void 0 !== h2 && n2.canBlockReload ? this.requestScheduled = s2.loading.first + D2 - (1e3 * n2.partTarget || 1e3) : this.requestScheduled = (-1 === this.requestScheduled ? o2 : this.requestScheduled) + D2;
              var k2 = this.requestScheduled - o2;
              k2 = Math.max(0, k2), this.log("reload live playlist " + t4 + " in " + Math.round(k2) + " ms"), this.timer = self.setTimeout(function() {
                return i3.loadPlaylist(d2);
              }, k2);
            } else
              this.clearTimer();
          }, e3.getDeliveryDirectives = function(t4, e4, r3, i3) {
            var n2 = function(t5, e5) {
              var r4 = t5.canSkipUntil, i4 = t5.canSkipDateRanges, n3 = t5.endSN;
              return r4 && (void 0 !== e5 ? e5 - n3 : 0) < r4 ? i4 ? st.v2 : st.Yes : st.No;
            }(t4, r3);
            return null != e4 && e4.skip && t4.deltaUpdateFailed && (r3 = e4.msn, i3 = e4.part, n2 = st.No), new lt(r3, i3, n2);
          }, e3.retryLoadingOrFail = function(t4) {
            var e4, r3 = this, i3 = this.hls.config, n2 = this.retryCount < i3.levelLoadingMaxRetry;
            if (n2)
              if (this.requestScheduled = -1, this.retryCount++, t4.details.indexOf("LoadTimeOut") > -1 && null !== (e4 = t4.context) && void 0 !== e4 && e4.deliveryDirectives)
                this.warn("retry playlist loading #" + this.retryCount + ' after "' + t4.details + '"'), this.loadPlaylist();
              else {
                var a2 = Math.min(Math.pow(2, this.retryCount) * i3.levelLoadingRetryDelay, i3.levelLoadingMaxRetryTimeout);
                this.timer = self.setTimeout(function() {
                  return r3.loadPlaylist();
                }, a2), this.warn("retry playlist loading #" + this.retryCount + " in " + a2 + ' ms after "' + t4.details + '"');
              }
            else
              this.warn('cannot recover from error "' + t4.details + '"'), this.clearTimer(), t4.fatal = true;
            return n2;
          }, t3;
        }();
        function yt() {
          return yt = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, yt.apply(this, arguments);
        }
        function Et(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function Tt(t3, e3) {
          return Tt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Tt(t3, e3);
        }
        var St, bt = /chrome|firefox/.test(navigator.userAgent.toLowerCase()), Lt = function(t3) {
          var e3, r3;
          function i3(e4) {
            var r4;
            return (r4 = t3.call(this, e4, "[level-controller]") || this)._levels = [], r4._firstLevel = -1, r4._startLevel = void 0, r4.currentLevelIndex = -1, r4.manualLevelIndex = -1, r4.onParsedComplete = void 0, r4._registerListeners(), r4;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Tt(e3, r3);
          var n2, a2, l2 = i3.prototype;
          return l2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, l2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, l2.destroy = function() {
            this._unregisterListeners(), this.manualLevelIndex = -1, this._levels.length = 0, t3.prototype.destroy.call(this);
          }, l2.startLoad = function() {
            this._levels.forEach(function(t4) {
              t4.loadError = 0;
            }), t3.prototype.startLoad.call(this);
          }, l2.onManifestLoaded = function(t4, e4) {
            var r4, i4, n3 = [], a3 = [], l3 = [], u2 = {}, d2 = false, h2 = false, c2 = false;
            if (e4.levels.forEach(function(t5) {
              var e5 = t5.attrs;
              d2 = d2 || !(!t5.width || !t5.height), h2 = h2 || !!t5.videoCodec, c2 = c2 || !!t5.audioCodec, bt && t5.audioCodec && -1 !== t5.audioCodec.indexOf("mp4a.40.34") && (t5.audioCodec = void 0);
              var r5 = t5.bitrate + "-" + t5.attrs.RESOLUTION + "-" + t5.attrs.CODECS;
              (i4 = u2[r5]) ? i4.url.push(t5.url) : (i4 = new ut(t5), u2[r5] = i4, n3.push(i4)), e5 && (e5.AUDIO && ht(i4, "audio", e5.AUDIO), e5.SUBTITLES && ht(i4, "text", e5.SUBTITLES));
            }), (d2 || h2) && c2 && (n3 = n3.filter(function(t5) {
              var e5 = t5.videoCodec, r5 = t5.width, i5 = t5.height;
              return !!e5 || !(!r5 || !i5);
            })), n3 = n3.filter(function(t5) {
              var e5 = t5.audioCodec, r5 = t5.videoCodec;
              return (!e5 || _(e5, "audio")) && (!r5 || _(r5, "video"));
            }), e4.audioTracks && ct(a3 = e4.audioTracks.filter(function(t5) {
              return !t5.audioCodec || _(t5.audioCodec, "audio");
            })), e4.subtitles && ct(l3 = e4.subtitles), n3.length > 0) {
              r4 = n3[0].bitrate, n3.sort(function(t5, e5) {
                return t5.attrs["HDCP-LEVEL"] !== e5.attrs["HDCP-LEVEL"] ? (t5.attrs["HDCP-LEVEL"] || "") > (e5.attrs["HDCP-LEVEL"] || "") ? 1 : -1 : t5.bitrate !== e5.bitrate ? t5.bitrate - e5.bitrate : t5.attrs.SCORE !== e5.attrs.SCORE ? t5.attrs.decimalFloatingPoint("SCORE") - e5.attrs.decimalFloatingPoint("SCORE") : d2 && t5.height !== e5.height ? t5.height - e5.height : 0;
              }), this._levels = n3;
              for (var f2 = 0; f2 < n3.length; f2++)
                if (n3[f2].bitrate === r4) {
                  this._firstLevel = f2, this.log("manifest loaded, " + n3.length + " level(s) found, first bitrate: " + r4);
                  break;
                }
              var g2 = c2 && !h2, v2 = { levels: n3, audioTracks: a3, subtitleTracks: l3, sessionData: e4.sessionData, sessionKeys: e4.sessionKeys, firstLevel: this._firstLevel, stats: e4.stats, audio: c2, video: h2, altAudio: !g2 && a3.some(function(t5) {
                return !!t5.url;
              }) };
              this.hls.trigger(s.Events.MANIFEST_PARSED, v2), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition);
            } else
              this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: e4.url, reason: "no level with compatible codecs found in manifest" });
          }, l2.onError = function(e4, r4) {
            var i4, n3;
            if (t3.prototype.onError.call(this, e4, r4), !r4.fatal) {
              var a3 = r4.context, s2 = this._levels[this.currentLevelIndex];
              if (a3 && (a3.type === V.PlaylistContextType.AUDIO_TRACK && s2.audioGroupIds && a3.groupId === s2.audioGroupIds[s2.urlId] || a3.type === V.PlaylistContextType.SUBTITLE_TRACK && s2.textGroupIds && a3.groupId === s2.textGroupIds[s2.urlId]))
                this.redundantFailover(this.currentLevelIndex);
              else {
                var l3, u2 = false, d2 = true;
                switch (r4.details) {
                  case o.ErrorDetails.FRAG_LOAD_ERROR:
                  case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                  case o.ErrorDetails.KEY_LOAD_ERROR:
                  case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                    if (r4.frag) {
                      var h2 = r4.frag.type === V.PlaylistLevelType.MAIN ? r4.frag.level : this.currentLevelIndex, c2 = this._levels[h2];
                      c2 ? (c2.fragmentError++, c2.fragmentError > this.hls.config.fragLoadingMaxRetry && (l3 = h2)) : l3 = h2;
                    }
                    break;
                  case o.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                    var f2 = s2.attrs["HDCP-LEVEL"];
                    f2 && (this.hls.maxHdcpLevel = ot[ot.indexOf(f2) - 1], this.warn('Restricting playback to HDCP-LEVEL of "' + this.hls.maxHdcpLevel + '" or lower'));
                  case o.ErrorDetails.FRAG_PARSING_ERROR:
                  case o.ErrorDetails.KEY_SYSTEM_NO_SESSION:
                    l3 = (null === (i4 = r4.frag) || void 0 === i4 ? void 0 : i4.type) === V.PlaylistLevelType.MAIN ? r4.frag.level : this.currentLevelIndex, r4.levelRetry = false;
                    break;
                  case o.ErrorDetails.LEVEL_LOAD_ERROR:
                  case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                    a3 && (a3.deliveryDirectives && (d2 = false), l3 = a3.level), u2 = true;
                    break;
                  case o.ErrorDetails.REMUX_ALLOC_ERROR:
                    l3 = null != (n3 = r4.level) ? n3 : this.currentLevelIndex, u2 = true;
                }
                void 0 !== l3 && this.recoverLevel(r4, l3, u2, d2);
              }
            }
          }, l2.recoverLevel = function(t4, e4, r4, i4) {
            var n3 = t4.details, a3 = this._levels[e4];
            if (a3.loadError++, r4) {
              if (!this.retryLoadingOrFail(t4))
                return void (this.currentLevelIndex = -1);
              t4.levelRetry = true;
            }
            if (i4) {
              var s2 = a3.url.length;
              if (s2 > 1 && a3.loadError < s2)
                t4.levelRetry = true, this.redundantFailover(e4);
              else if (-1 === this.manualLevelIndex) {
                for (var o2 = -1, l3 = this._levels, u2 = l3.length; u2--; ) {
                  var d2 = (u2 + this.currentLevelIndex) % l3.length;
                  if (d2 !== this.currentLevelIndex && 0 === l3[d2].loadError) {
                    o2 = d2;
                    break;
                  }
                }
                o2 > -1 && this.currentLevelIndex !== o2 ? (this.warn(n3 + ": switch to " + o2), t4.levelRetry = true, this.hls.nextAutoLevel = o2) : false === t4.levelRetry && (t4.fatal = true);
              }
            }
          }, l2.redundantFailover = function(t4) {
            var e4 = this._levels[t4], r4 = e4.url.length;
            if (r4 > 1) {
              var i4 = (e4.urlId + 1) % r4;
              this.warn("Switching to redundant URL-id " + i4), this._levels.forEach(function(t5) {
                t5.urlId = i4;
              }), this.level = t4;
            }
          }, l2.onFragLoaded = function(t4, e4) {
            var r4 = e4.frag;
            if (void 0 !== r4 && r4.type === V.PlaylistLevelType.MAIN) {
              var i4 = this._levels[r4.level];
              void 0 !== i4 && (i4.fragmentError = 0, i4.loadError = 0);
            }
          }, l2.onLevelLoaded = function(t4, e4) {
            var r4, i4, n3 = e4.level, a3 = e4.details, s2 = this._levels[n3];
            if (!s2)
              return this.warn("Invalid level index " + n3), void (null !== (i4 = e4.deliveryDirectives) && void 0 !== i4 && i4.skip && (a3.deltaUpdateFailed = true));
            n3 === this.currentLevelIndex ? (0 === s2.fragmentError && (s2.loadError = 0, this.retryCount = 0), this.playlistLoaded(n3, e4, s2.details)) : null !== (r4 = e4.deliveryDirectives) && void 0 !== r4 && r4.skip && (a3.deltaUpdateFailed = true);
          }, l2.onAudioTrackSwitched = function(t4, e4) {
            var r4 = this.hls.levels[this.currentLevelIndex];
            if (r4 && r4.audioGroupIds) {
              for (var i4 = -1, n3 = this.hls.audioTracks[e4.id].groupId, a3 = 0; a3 < r4.audioGroupIds.length; a3++)
                if (r4.audioGroupIds[a3] === n3) {
                  i4 = a3;
                  break;
                }
              i4 !== r4.urlId && (r4.urlId = i4, this.startLoad());
            }
          }, l2.loadPlaylist = function(e4) {
            t3.prototype.loadPlaylist.call(this);
            var r4 = this.currentLevelIndex, i4 = this._levels[r4];
            if (this.canLoad && i4 && i4.url.length > 0) {
              var n3 = i4.urlId, a3 = i4.url[n3];
              if (e4)
                try {
                  a3 = e4.addDirectives(a3);
                } catch (t4) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
                }
              this.log("Attempt loading level index " + r4 + (void 0 !== (null == e4 ? void 0 : e4.msn) ? " at sn " + e4.msn + " part " + e4.part : "") + " with URL-id " + n3 + " " + a3), this.clearTimer(), this.hls.trigger(s.Events.LEVEL_LOADING, { url: a3, level: r4, id: n3, deliveryDirectives: e4 || null });
            }
          }, l2.removeLevel = function(t4, e4) {
            var r4 = function(t5, r5) {
              return r5 !== e4;
            }, i4 = this._levels.filter(function(i5, n3) {
              return n3 !== t4 || i5.url.length > 1 && void 0 !== e4 && (i5.url = i5.url.filter(r4), i5.audioGroupIds && (i5.audioGroupIds = i5.audioGroupIds.filter(r4)), i5.textGroupIds && (i5.textGroupIds = i5.textGroupIds.filter(r4)), i5.urlId = 0, true);
            }).map(function(t5, e5) {
              var r5 = t5.details;
              return null != r5 && r5.fragments && r5.fragments.forEach(function(t6) {
                t6.level = e5;
              }), t5;
            });
            this._levels = i4, this.hls.trigger(s.Events.LEVELS_UPDATED, { levels: i4 });
          }, n2 = i3, (a2 = [{ key: "levels", get: function() {
            return 0 === this._levels.length ? null : this._levels;
          } }, { key: "level", get: function() {
            return this.currentLevelIndex;
          }, set: function(t4) {
            var e4, r4 = this._levels;
            if (0 !== r4.length && (this.currentLevelIndex !== t4 || null === (e4 = r4[t4]) || void 0 === e4 || !e4.details)) {
              if (t4 < 0 || t4 >= r4.length) {
                var i4 = t4 < 0;
                if (this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.LEVEL_SWITCH_ERROR, level: t4, fatal: i4, reason: "invalid level idx" }), i4)
                  return;
                t4 = Math.min(t4, r4.length - 1);
              }
              this.clearTimer();
              var n3 = this.currentLevelIndex, a3 = r4[n3], l3 = r4[t4];
              this.log("switching to level " + t4 + " from " + n3), this.currentLevelIndex = t4;
              var u2 = yt({}, l3, { level: t4, maxBitrate: l3.maxBitrate, uri: l3.uri, urlId: l3.urlId });
              delete u2._urlId, this.hls.trigger(s.Events.LEVEL_SWITCHING, u2);
              var d2 = l3.details;
              if (!d2 || d2.live) {
                var h2 = this.switchParams(l3.uri, null == a3 ? void 0 : a3.details);
                this.loadPlaylist(h2);
              }
            }
          } }, { key: "manualLevel", get: function() {
            return this.manualLevelIndex;
          }, set: function(t4) {
            this.manualLevelIndex = t4, void 0 === this._startLevel && (this._startLevel = t4), -1 !== t4 && (this.level = t4);
          } }, { key: "firstLevel", get: function() {
            return this._firstLevel;
          }, set: function(t4) {
            this._firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            if (void 0 === this._startLevel) {
              var t4 = this.hls.config.startLevel;
              return void 0 !== t4 ? t4 : this._firstLevel;
            }
            return this._startLevel;
          }, set: function(t4) {
            this._startLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hls.nextAutoLevel;
          }, set: function(t4) {
            this.level = t4, -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = t4);
          } }]) && Et(n2.prototype, a2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(mt);
        !function(t3) {
          t3.NOT_LOADED = "NOT_LOADED", t3.APPENDING = "APPENDING", t3.PARTIAL = "PARTIAL", t3.OK = "OK";
        }(St || (St = {}));
        var At = function() {
          function t3(t4) {
            this.activeFragment = null, this.activeParts = null, this.endListFragments = /* @__PURE__ */ Object.create(null), this.fragments = /* @__PURE__ */ Object.create(null), this.timeRanges = /* @__PURE__ */ Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hls = t4, this._registerListeners();
          }
          var e3 = t3.prototype;
          return e3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.BUFFER_APPENDED, this.onBufferAppended, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this);
          }, e3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.BUFFER_APPENDED, this.onBufferAppended, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this);
          }, e3.destroy = function() {
            this._unregisterListeners(), this.fragments = this.endListFragments = this.timeRanges = this.activeFragment = this.activeParts = null;
          }, e3.getAppendedFrag = function(t4, e4) {
            if (e4 === V.PlaylistLevelType.MAIN) {
              var r3 = this.activeFragment, i3 = this.activeParts;
              if (!r3)
                return null;
              if (i3)
                for (var n2 = i3.length; n2--; ) {
                  var a2 = i3[n2], s2 = a2 ? a2.end : r3.appendedPTS;
                  if (a2.start <= t4 && void 0 !== s2 && t4 <= s2)
                    return n2 > 9 && (this.activeParts = i3.slice(n2 - 9)), a2;
                }
              else if (r3.start <= t4 && void 0 !== r3.appendedPTS && t4 <= r3.appendedPTS)
                return r3;
            }
            return this.getBufferedFrag(t4, e4);
          }, e3.getBufferedFrag = function(t4, e4) {
            for (var r3 = this.fragments, i3 = Object.keys(r3), n2 = i3.length; n2--; ) {
              var a2 = r3[i3[n2]];
              if ((null == a2 ? void 0 : a2.body.type) === e4 && a2.buffered) {
                var s2 = a2.body;
                if (s2.start <= t4 && t4 <= s2.end)
                  return s2;
              }
            }
            return null;
          }, e3.detectEvictedFragments = function(t4, e4, r3) {
            var i3 = this;
            this.timeRanges && (this.timeRanges[t4] = e4), Object.keys(this.fragments).forEach(function(n2) {
              var a2 = i3.fragments[n2];
              if (a2)
                if (a2.buffered || a2.loaded) {
                  var s2 = a2.range[t4];
                  s2 && s2.time.some(function(t5) {
                    var r4 = !i3.isTimeBuffered(t5.startPTS, t5.endPTS, e4);
                    return r4 && i3.removeFragment(a2.body), r4;
                  });
                } else
                  a2.body.type === r3 && i3.removeFragment(a2.body);
            });
          }, e3.detectPartialFragments = function(t4) {
            var e4 = this, r3 = this.timeRanges, i3 = t4.frag, n2 = t4.part;
            if (r3 && "initSegment" !== i3.sn) {
              var a2 = kt(i3), s2 = this.fragments[a2];
              s2 && (Object.keys(r3).forEach(function(t5) {
                var a3 = i3.elementaryStreams[t5];
                if (a3) {
                  var o2 = r3[t5], l2 = null !== n2 || true === a3.partial;
                  s2.range[t5] = e4.getBufferedTimes(i3, n2, l2, o2);
                }
              }), s2.loaded = null, Object.keys(s2.range).length ? (s2.buffered = true, s2.body.endList && (this.endListFragments[s2.body.type] = s2)) : this.removeFragment(s2.body));
            }
          }, e3.fragBuffered = function(t4) {
            var e4 = kt(t4), r3 = this.fragments[e4];
            r3 && (r3.loaded = null, r3.buffered = true);
          }, e3.getBufferedTimes = function(t4, e4, r3, i3) {
            for (var n2 = { time: [], partial: r3 }, a2 = e4 ? e4.start : t4.start, s2 = e4 ? e4.end : t4.end, o2 = t4.minEndPTS || s2, l2 = t4.maxStartPTS || a2, u2 = 0; u2 < i3.length; u2++) {
              var d2 = i3.start(u2) - this.bufferPadding, h2 = i3.end(u2) + this.bufferPadding;
              if (l2 >= d2 && o2 <= h2) {
                n2.time.push({ startPTS: Math.max(a2, i3.start(u2)), endPTS: Math.min(s2, i3.end(u2)) });
                break;
              }
              if (a2 < h2 && s2 > d2)
                n2.partial = true, n2.time.push({ startPTS: Math.max(a2, i3.start(u2)), endPTS: Math.min(s2, i3.end(u2)) });
              else if (s2 <= d2)
                break;
            }
            return n2;
          }, e3.getPartialFragment = function(t4) {
            var e4, r3, i3, n2 = null, a2 = 0, s2 = this.bufferPadding, o2 = this.fragments;
            return Object.keys(o2).forEach(function(l2) {
              var u2 = o2[l2];
              u2 && Dt(u2) && (r3 = u2.body.start - s2, i3 = u2.body.end + s2, t4 >= r3 && t4 <= i3 && (e4 = Math.min(t4 - r3, i3 - t4), a2 <= e4 && (n2 = u2.body, a2 = e4)));
            }), n2;
          }, e3.isEndListAppended = function(t4) {
            var e4 = this.endListFragments[t4];
            return void 0 !== e4 && (e4.buffered || Dt(e4));
          }, e3.getState = function(t4) {
            var e4 = kt(t4), r3 = this.fragments[e4];
            return r3 ? r3.buffered ? Dt(r3) ? St.PARTIAL : St.OK : St.APPENDING : St.NOT_LOADED;
          }, e3.isTimeBuffered = function(t4, e4, r3) {
            for (var i3, n2, a2 = 0; a2 < r3.length; a2++) {
              if (i3 = r3.start(a2) - this.bufferPadding, n2 = r3.end(a2) + this.bufferPadding, t4 >= i3 && e4 <= n2)
                return true;
              if (e4 <= i3)
                return false;
            }
            return false;
          }, e3.onFragLoaded = function(t4, e4) {
            var r3 = e4.frag, i3 = e4.part;
            if ("initSegment" !== r3.sn && !r3.bitrateTest && !i3) {
              var n2 = kt(r3);
              this.fragments[n2] = { body: r3, loaded: e4, buffered: false, range: /* @__PURE__ */ Object.create(null) };
            }
          }, e3.onBufferAppended = function(t4, e4) {
            var r3 = this, i3 = e4.frag, n2 = e4.part, a2 = e4.timeRanges;
            if (i3.type === V.PlaylistLevelType.MAIN)
              if (this.activeFragment !== i3 && (this.activeFragment = i3, i3.appendedPTS = void 0), n2) {
                var s2 = this.activeParts;
                s2 || (this.activeParts = s2 = []), s2.push(n2);
              } else
                this.activeParts = null;
            this.timeRanges = a2, Object.keys(a2).forEach(function(t5) {
              var e5 = a2[t5];
              if (r3.detectEvictedFragments(t5, e5), !n2 && i3.type === V.PlaylistLevelType.MAIN) {
                var s3 = i3.elementaryStreams[t5];
                if (!s3)
                  return;
                for (var o2 = 0; o2 < e5.length; o2++) {
                  var l2 = e5.end(o2);
                  l2 <= s3.endPTS && l2 > s3.startPTS ? i3.appendedPTS = Math.max(l2, i3.appendedPTS || 0) : i3.appendedPTS = s3.endPTS;
                }
              }
            });
          }, e3.onFragBuffered = function(t4, e4) {
            this.detectPartialFragments(e4);
          }, e3.hasFragment = function(t4) {
            var e4 = kt(t4);
            return !!this.fragments[e4];
          }, e3.removeFragmentsInRange = function(t4, e4, r3) {
            var i3 = this;
            Object.keys(this.fragments).forEach(function(n2) {
              var a2 = i3.fragments[n2];
              if (a2 && a2.buffered) {
                var s2 = a2.body;
                s2.type === r3 && s2.start < e4 && s2.end > t4 && i3.removeFragment(s2);
              }
            });
          }, e3.removeFragment = function(t4) {
            var e4 = kt(t4);
            t4.stats.loaded = 0, t4.clearElementaryStreamInfo(), t4.appendedPTS = void 0, delete this.fragments[e4], t4.endList && delete this.endListFragments[t4.type];
          }, e3.removeAllFragments = function() {
            this.fragments = /* @__PURE__ */ Object.create(null), this.endListFragments = /* @__PURE__ */ Object.create(null), this.activeFragment = null, this.activeParts = null;
          }, t3;
        }();
        function Dt(t3) {
          var e3, r3;
          return t3.buffered && ((null === (e3 = t3.range.video) || void 0 === e3 ? void 0 : e3.partial) || (null === (r3 = t3.range.audio) || void 0 === r3 ? void 0 : r3.partial));
        }
        function kt(t3) {
          return t3.type + "_" + t3.level + "_" + t3.urlId + "_" + t3.sn;
        }
        function Rt(t3) {
          var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return Rt = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e3) {
              if (e3.has(t4))
                return e3.get(t4);
              e3.set(t4, i3);
            }
            function i3() {
              return It(t4, arguments, _t(this).constructor);
            }
            return i3.prototype = Object.create(t4.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), Ct(i3, t4);
          }, Rt(t3);
        }
        function It(t3, e3, r3) {
          return It = wt() ? Reflect.construct.bind() : function(t4, e4, r4) {
            var i3 = [null];
            i3.push.apply(i3, e4);
            var n2 = new (Function.bind.apply(t4, i3))();
            return r4 && Ct(n2, r4.prototype), n2;
          }, It.apply(null, arguments);
        }
        function wt() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function Ct(t3, e3) {
          return Ct = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Ct(t3, e3);
        }
        function _t(t3) {
          return _t = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, _t(t3);
        }
        var Pt = Math.pow(2, 17), Ot = function() {
          function t3(t4) {
            this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = t4;
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.loader && (this.loader.destroy(), this.loader = null);
          }, e3.abort = function() {
            this.loader && this.loader.abort();
          }, e3.load = function(t4, e4) {
            var r3 = this, i3 = t4.url;
            if (!i3)
              return Promise.reject(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, networkDetails: null }, "Fragment does not have a " + (i3 ? "part list" : "url")));
            this.abort();
            var n2 = this.config, a2 = n2.fLoader, s2 = n2.loader;
            return new Promise(function(i4, l2) {
              r3.loader && r3.loader.destroy();
              var u2 = r3.loader = t4.loader = a2 ? new a2(n2) : new s2(n2), d2 = xt(t4), h2 = { timeout: n2.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n2.fragLoadingMaxRetryTimeout, highWaterMark: "initSegment" === t4.sn ? 1 / 0 : Pt };
              t4.stats = u2.stats, u2.load(d2, h2, { onSuccess: function(e5, n3, a3, s3) {
                r3.resetLoader(t4, u2);
                var o2 = e5.data;
                a3.resetIV && t4.decryptdata && (t4.decryptdata.iv = new Uint8Array(o2.slice(0, 16)), o2 = o2.slice(16)), i4({ frag: t4, part: null, payload: o2, networkDetails: s3 });
              }, onError: function(e5, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, response: e5, networkDetails: n3 }));
              }, onAbort: function(e5, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: t4, networkDetails: n3 }));
              }, onTimeout: function(e5, i5, n3) {
                r3.resetLoader(t4, u2), l2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, networkDetails: n3 }));
              }, onProgress: function(r4, i5, n3, a3) {
                e4 && e4({ frag: t4, part: null, payload: n3, networkDetails: a3 });
              } });
            });
          }, e3.loadPart = function(t4, e4, r3) {
            var i3 = this;
            this.abort();
            var n2 = this.config, a2 = n2.fLoader, s2 = n2.loader;
            return new Promise(function(l2, u2) {
              i3.loader && i3.loader.destroy();
              var d2 = i3.loader = t4.loader = a2 ? new a2(n2) : new s2(n2), h2 = xt(t4, e4), c2 = { timeout: n2.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n2.fragLoadingMaxRetryTimeout, highWaterMark: Pt };
              e4.stats = d2.stats, d2.load(h2, c2, { onSuccess: function(n3, a3, s3, o2) {
                i3.resetLoader(t4, d2), i3.updateStatsFromPart(t4, e4);
                var u3 = { frag: t4, part: e4, payload: n3.data, networkDetails: o2 };
                r3(u3), l2(u3);
              }, onError: function(r4, n3, a3) {
                i3.resetLoader(t4, d2), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: t4, part: e4, response: r4, networkDetails: a3 }));
              }, onAbort: function(r4, n3, a3) {
                t4.stats.aborted = e4.stats.aborted, i3.resetLoader(t4, d2), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: t4, part: e4, networkDetails: a3 }));
              }, onTimeout: function(r4, n3, a3) {
                i3.resetLoader(t4, d2), u2(new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: o.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, part: e4, networkDetails: a3 }));
              } });
            });
          }, e3.updateStatsFromPart = function(t4, e4) {
            var r3 = t4.stats, i3 = e4.stats, n2 = i3.total;
            if (r3.loaded += i3.loaded, n2) {
              var a2 = Math.round(t4.duration / e4.duration), s2 = Math.min(Math.round(r3.loaded / n2), a2), o2 = (a2 - s2) * Math.round(r3.loaded / s2);
              r3.total = r3.loaded + o2;
            } else
              r3.total = Math.max(r3.loaded, r3.total);
            var l2 = r3.loading, u2 = i3.loading;
            l2.start ? l2.first += u2.first - u2.start : (l2.start = u2.start, l2.first = u2.first), l2.end = u2.end;
          }, e3.resetLoader = function(t4, e4) {
            t4.loader = null, this.loader === e4 && (self.clearTimeout(this.partLoadTimeout), this.loader = null), e4.destroy();
          }, t3;
        }();
        function xt(t3, e3) {
          void 0 === e3 && (e3 = null);
          var r3 = e3 || t3, i3 = { frag: t3, part: e3, responseType: "arraybuffer", url: r3.url, headers: {}, rangeStart: 0, rangeEnd: 0 }, n2 = r3.byteRangeStartOffset, s2 = r3.byteRangeEndOffset;
          if ((0, a.isFiniteNumber)(n2) && (0, a.isFiniteNumber)(s2)) {
            var o2, l2 = n2, u2 = s2;
            if ("initSegment" === t3.sn && "AES-128" === (null === (o2 = t3.decryptdata) || void 0 === o2 ? void 0 : o2.method)) {
              var d2 = s2 - n2;
              d2 % 16 && (u2 = s2 + (16 - d2 % 16)), 0 !== n2 && (i3.resetIV = true, l2 = n2 - 16);
            }
            i3.rangeStart = l2, i3.rangeEnd = u2;
          }
          return i3;
        }
        var Ft = function(t3) {
          var e3, r3;
          function i3(e4) {
            for (var r4, i4 = arguments.length, n2 = new Array(i4 > 1 ? i4 - 1 : 0), a2 = 1; a2 < i4; a2++)
              n2[a2 - 1] = arguments[a2];
            return (r4 = t3.call.apply(t3, [this].concat(n2)) || this).data = void 0, r4.data = e4, r4;
          }
          return r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Ct(e3, r3), i3;
        }(Rt(Error)), Mt = function() {
          function t3(t4) {
            this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = t4;
          }
          var e3 = t3.prototype;
          return e3.abort = function() {
            for (var t4 in this.keyUriToKeyInfo) {
              var e4 = this.keyUriToKeyInfo[t4].loader;
              e4 && e4.abort();
            }
          }, e3.detach = function() {
            for (var t4 in this.keyUriToKeyInfo) {
              var e4 = this.keyUriToKeyInfo[t4];
              (e4.mediaKeySessionContext || e4.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[t4];
            }
          }, e3.destroy = function() {
            for (var t4 in this.detach(), this.keyUriToKeyInfo) {
              var e4 = this.keyUriToKeyInfo[t4].loader;
              e4 && e4.destroy();
            }
            this.keyUriToKeyInfo = {};
          }, e3.createKeyLoadError = function(t4, e4, r3, i3) {
            return void 0 === e4 && (e4 = o.ErrorDetails.KEY_LOAD_ERROR), new Ft({ type: o.ErrorTypes.NETWORK_ERROR, details: e4, fatal: false, frag: t4, networkDetails: r3 });
          }, e3.loadClear = function(t4, e4) {
            var r3 = this;
            if (this.emeController && this.config.emeEnabled)
              for (var i3 = t4.sn, n2 = t4.cc, a2 = function(t5) {
                var a3 = e4[t5];
                if (n2 <= a3.cc && ("initSegment" === i3 || i3 < a3.sn))
                  return r3.emeController.selectKeySystemFormat(a3).then(function(t6) {
                    a3.setKeyFormat(t6);
                  }), "break";
              }, s2 = 0; s2 < e4.length && "break" !== a2(s2); s2++)
                ;
          }, e3.load = function(t4) {
            var e4 = this;
            return !t4.decryptdata && t4.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(t4).then(function(r3) {
              return e4.loadInternal(t4, r3);
            }) : this.loadInternal(t4);
          }, e3.loadInternal = function(t4, e4) {
            var r3, i3;
            e4 && t4.setKeyFormat(e4);
            var n2 = t4.decryptdata;
            if (!n2) {
              var a2 = e4 ? "Expected frag.decryptdata to be defined after setting format " + e4 : "Missing decryption data on fragment in onKeyLoading";
              return Promise.reject(this.createKeyLoadError(t4, o.ErrorDetails.KEY_LOAD_ERROR, null, a2));
            }
            var s2 = n2.uri;
            if (!s2)
              return Promise.reject(this.createKeyLoadError(t4, o.ErrorDetails.KEY_LOAD_ERROR, null, 'Invalid key URI: "' + s2 + '"'));
            var l2, u2 = this.keyUriToKeyInfo[s2];
            if (null !== (r3 = u2) && void 0 !== r3 && r3.decryptdata.key)
              return n2.key = u2.decryptdata.key, Promise.resolve({ frag: t4, keyInfo: u2 });
            if (null !== (i3 = u2) && void 0 !== i3 && i3.keyLoadPromise)
              switch (null === (l2 = u2.mediaKeySessionContext) || void 0 === l2 ? void 0 : l2.keyStatus) {
                case void 0:
                case "status-pending":
                case "usable":
                case "usable-in-future":
                  return u2.keyLoadPromise.then(function(e5) {
                    return n2.key = e5.keyInfo.decryptdata.key, { frag: t4, keyInfo: u2 };
                  });
              }
            switch (u2 = this.keyUriToKeyInfo[s2] = { decryptdata: n2, keyLoadPromise: null, loader: null, mediaKeySessionContext: null }, n2.method) {
              case "ISO-23001-7":
              case "SAMPLE-AES":
              case "SAMPLE-AES-CENC":
              case "SAMPLE-AES-CTR":
                return "identity" === n2.keyFormat ? this.loadKeyHTTP(u2, t4) : this.loadKeyEME(u2, t4);
              case "AES-128":
                return this.loadKeyHTTP(u2, t4);
              default:
                return Promise.reject(this.createKeyLoadError(t4, o.ErrorDetails.KEY_LOAD_ERROR, null, 'Key supplied with unsupported METHOD: "' + n2.method + '"'));
            }
          }, e3.loadKeyEME = function(t4, e4) {
            var r3 = { frag: e4, keyInfo: t4 };
            if (this.emeController && this.config.emeEnabled) {
              var i3 = this.emeController.loadKey(r3);
              if (i3)
                return (t4.keyLoadPromise = i3.then(function(e5) {
                  return t4.mediaKeySessionContext = e5, r3;
                })).catch(function(e5) {
                  throw t4.keyLoadPromise = null, e5;
                });
            }
            return Promise.resolve(r3);
          }, e3.loadKeyHTTP = function(t4, e4) {
            var r3 = this, i3 = this.config, n2 = new (0, i3.loader)(i3);
            return e4.keyLoader = t4.loader = n2, t4.keyLoadPromise = new Promise(function(a2, s2) {
              var l2 = { keyInfo: t4, frag: e4, responseType: "arraybuffer", url: t4.decryptdata.uri }, u2 = { timeout: i3.fragLoadingTimeOut, maxRetry: 0, retryDelay: i3.fragLoadingRetryDelay, maxRetryDelay: i3.fragLoadingMaxRetryTimeout, highWaterMark: 0 }, d2 = { onSuccess: function(t5, e5, i4, n3) {
                var l3 = i4.frag, u3 = i4.keyInfo, d3 = i4.url;
                if (!l3.decryptdata || u3 !== r3.keyUriToKeyInfo[d3])
                  return s2(r3.createKeyLoadError(l3, o.ErrorDetails.KEY_LOAD_ERROR, n3, "after key load, decryptdata unset or changed"));
                u3.decryptdata.key = l3.decryptdata.key = new Uint8Array(t5.data), l3.keyLoader = null, u3.loader = null, a2({ frag: l3, keyInfo: u3 });
              }, onError: function(t5, i4, n3) {
                r3.resetLoader(i4), s2(r3.createKeyLoadError(e4, o.ErrorDetails.KEY_LOAD_ERROR, n3));
              }, onTimeout: function(t5, i4, n3) {
                r3.resetLoader(i4), s2(r3.createKeyLoadError(e4, o.ErrorDetails.KEY_LOAD_TIMEOUT, n3));
              }, onAbort: function(t5, i4, n3) {
                r3.resetLoader(i4), s2(r3.createKeyLoadError(e4, o.ErrorDetails.INTERNAL_ABORTED, n3));
              } };
              n2.load(l2, u2, d2);
            });
          }, e3.resetLoader = function(t4) {
            var e4 = t4.frag, r3 = t4.keyInfo, i3 = t4.url, n2 = r3.loader;
            e4.keyLoader === n2 && (e4.keyLoader = null, r3.loader = null), delete this.keyUriToKeyInfo[i3], n2 && n2.destroy();
          }, t3;
        }(), Nt = function() {
          function t3() {
            this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this);
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.onHandlerDestroying(), this.onHandlerDestroyed();
          }, e3.onHandlerDestroying = function() {
            this.clearNextTick(), this.clearInterval();
          }, e3.onHandlerDestroyed = function() {
          }, e3.hasInterval = function() {
            return !!this._tickInterval;
          }, e3.hasNextTick = function() {
            return !!this._tickTimer;
          }, e3.setInterval = function(t4) {
            return !this._tickInterval && (this._tickInterval = self.setInterval(this._boundTick, t4), true);
          }, e3.clearInterval = function() {
            return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, true);
          }, e3.clearNextTick = function() {
            return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, true);
          }, e3.tick = function() {
            this._tickCallCount++, 1 === this._tickCallCount && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0);
          }, e3.tickImmediate = function() {
            this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0);
          }, e3.doTick = function() {
          }, t3;
        }(), Ut = { length: 0, start: function() {
          return 0;
        }, end: function() {
          return 0;
        } }, Bt = function() {
          function t3() {
          }
          return t3.isBuffered = function(e3, r3) {
            try {
              if (e3) {
                for (var i3 = t3.getBuffered(e3), n2 = 0; n2 < i3.length; n2++)
                  if (r3 >= i3.start(n2) && r3 <= i3.end(n2))
                    return true;
              }
            } catch (t4) {
            }
            return false;
          }, t3.bufferInfo = function(e3, r3, i3) {
            try {
              if (e3) {
                var n2, a2 = t3.getBuffered(e3), s2 = [];
                for (n2 = 0; n2 < a2.length; n2++)
                  s2.push({ start: a2.start(n2), end: a2.end(n2) });
                return this.bufferedInfo(s2, r3, i3);
              }
            } catch (t4) {
            }
            return { len: 0, start: r3, end: r3, nextStart: void 0 };
          }, t3.bufferedInfo = function(t4, e3, r3) {
            e3 = Math.max(0, e3), t4.sort(function(t5, e4) {
              return t5.start - e4.start || e4.end - t5.end;
            });
            var i3 = [];
            if (r3)
              for (var n2 = 0; n2 < t4.length; n2++) {
                var a2 = i3.length;
                if (a2) {
                  var s2 = i3[a2 - 1].end;
                  t4[n2].start - s2 < r3 ? t4[n2].end > s2 && (i3[a2 - 1].end = t4[n2].end) : i3.push(t4[n2]);
                } else
                  i3.push(t4[n2]);
              }
            else
              i3 = t4;
            for (var o2, l2 = 0, u2 = e3, d2 = e3, h2 = 0; h2 < i3.length; h2++) {
              var c2 = i3[h2].start, f2 = i3[h2].end;
              if (e3 + r3 >= c2 && e3 < f2)
                u2 = c2, l2 = (d2 = f2) - e3;
              else if (e3 + r3 < c2) {
                o2 = c2;
                break;
              }
            }
            return { len: l2, start: u2 || 0, end: d2 || 0, nextStart: o2 };
          }, t3.getBuffered = function(t4) {
            try {
              return t4.buffered;
            } catch (t5) {
              return l.logger.log("failed to get media.buffered", t5), Ut;
            }
          }, t3;
        }(), Gt = function(t3, e3, r3, i3, n2, a2) {
          void 0 === i3 && (i3 = 0), void 0 === n2 && (n2 = -1), void 0 === a2 && (a2 = false), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, this.buffering = { audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 } }, this.level = t3, this.sn = e3, this.id = r3, this.size = i3, this.part = n2, this.partial = a2;
        };
        function Kt(t3, e3) {
          for (var r3 = null, i3 = 0, n2 = t3.length; i3 < n2; i3++) {
            var a2 = t3[i3];
            if (a2 && a2.cc === e3) {
              r3 = a2;
              break;
            }
          }
          return r3;
        }
        function Ht(t3, e3) {
          if (t3) {
            var r3 = t3.start + e3;
            t3.start = t3.startPTS = r3, t3.endPTS = r3 + t3.duration;
          }
        }
        function jt(t3, e3) {
          for (var r3 = e3.fragments, i3 = 0, n2 = r3.length; i3 < n2; i3++)
            Ht(r3[i3], t3);
          e3.fragmentHint && Ht(e3.fragmentHint, t3), e3.alignedSliding = true;
        }
        function Vt(t3, e3) {
          if (t3.hasProgramDateTime && e3.hasProgramDateTime) {
            var r3 = t3.fragments, i3 = e3.fragments;
            if (r3.length && i3.length) {
              var n2 = i3[Math.round(i3.length / 2) - 1], a2 = Kt(r3, n2.cc) || r3[Math.round(r3.length / 2) - 1], s2 = n2.programDateTime, o2 = a2.programDateTime;
              null !== s2 && null !== o2 && jt((o2 - s2) / 1e3 - (a2.start - n2.start), t3);
            }
          }
        }
        const Yt = function(t3, e3) {
          for (var r3 = 0, i3 = t3.length - 1, n2 = null, a2 = null; r3 <= i3; ) {
            var s2 = e3(a2 = t3[n2 = (r3 + i3) / 2 | 0]);
            if (s2 > 0)
              r3 = n2 + 1;
            else {
              if (!(s2 < 0))
                return a2;
              i3 = n2 - 1;
            }
          }
          return null;
        };
        function Wt(t3, e3, r3, i3) {
          void 0 === r3 && (r3 = 0), void 0 === i3 && (i3 = 0);
          var n2 = null;
          if (t3 ? n2 = e3[t3.sn - e3[0].sn + 1] || null : 0 === r3 && 0 === e3[0].start && (n2 = e3[0]), n2 && 0 === qt(r3, i3, n2))
            return n2;
          var a2 = Yt(e3, qt.bind(null, r3, i3));
          return !a2 || a2 === t3 && n2 ? n2 : a2;
        }
        function qt(t3, e3, r3) {
          if (void 0 === t3 && (t3 = 0), void 0 === e3 && (e3 = 0), r3.start <= t3 && r3.start + r3.duration > t3)
            return 0;
          var i3 = Math.min(e3, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return r3.start + r3.duration - i3 <= t3 ? 1 : r3.start - i3 > t3 && r3.start ? -1 : 0;
        }
        function Xt(t3, e3, r3) {
          var i3 = 1e3 * Math.min(e3, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return (r3.endProgramDateTime || 0) - i3 > t3;
        }
        var zt = r2(21);
        const Qt = function(t3) {
          for (var e3 = "", r3 = t3.length, i3 = 0; i3 < r3; i3++)
            e3 += "[" + t3.start(i3).toFixed(3) + "-" + t3.end(i3).toFixed(3) + "]";
          return e3;
        };
        function $t(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function Jt(t3, e3) {
          return Jt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Jt(t3, e3);
        }
        var Zt = "STOPPED", te = "IDLE", ee = "KEY_LOADING", re = "FRAG_LOADING", ie = "FRAG_LOADING_WAITING_RETRY", ne = "WAITING_TRACK", ae = "PARSING", se = "PARSED", oe = "ENDED", le = "ERROR", ue = "WAITING_INIT_PTS", de = "WAITING_LEVEL", he = function(t3) {
          var e3, r3;
          function i3(e4, r4, i4, n3) {
            var a2;
            return (a2 = t3.call(this) || this).hls = void 0, a2.fragPrevious = null, a2.fragCurrent = null, a2.fragmentTracker = void 0, a2.transmuxer = null, a2._state = Zt, a2.media = null, a2.mediaBuffer = null, a2.config = void 0, a2.bitrateTest = false, a2.lastCurrentTime = 0, a2.nextLoadPosition = 0, a2.startPosition = 0, a2.loadedmetadata = false, a2.fragLoadError = 0, a2.retryDate = 0, a2.levels = null, a2.fragmentLoader = void 0, a2.keyLoader = void 0, a2.levelLastLoaded = null, a2.startFragRequested = false, a2.decrypter = void 0, a2.initPTS = [], a2.onvseeking = null, a2.onvended = null, a2.logPrefix = "", a2.log = void 0, a2.warn = void 0, a2.logPrefix = n3, a2.log = l.logger.log.bind(l.logger, n3 + ":"), a2.warn = l.logger.warn.bind(l.logger, n3 + ":"), a2.hls = e4, a2.fragmentLoader = new Ot(e4.config), a2.keyLoader = i4, a2.fragmentTracker = r4, a2.config = e4.config, a2.decrypter = new zt.default(e4.config), e4.on(s.Events.LEVEL_SWITCHING, a2.onLevelSwitching, function(t4) {
              if (void 0 === t4)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return t4;
            }(a2)), a2;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Jt(e3, r3);
          var n2, u2, d2 = i3.prototype;
          return d2.doTick = function() {
            this.onTickEnd();
          }, d2.onTickEnd = function() {
          }, d2.startLoad = function(t4) {
          }, d2.stopLoad = function() {
            this.fragmentLoader.abort(), this.keyLoader.abort();
            var t4 = this.fragCurrent;
            t4 && (t4.abortRequests(), this.fragmentTracker.removeFragment(t4)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = Zt;
          }, d2._streamEnded = function(t4, e4) {
            if (e4.live || t4.nextStart || !t4.end || !this.media)
              return false;
            var r4 = e4.partList;
            if (null != r4 && r4.length) {
              var i4 = r4[r4.length - 1];
              return Bt.isBuffered(this.media, i4.start + i4.duration / 2);
            }
            var n3 = e4.fragments[e4.fragments.length - 1].type;
            return this.fragmentTracker.isEndListAppended(n3);
          }, d2.getLevelDetails = function() {
            var t4;
            if (this.levels && null !== this.levelLastLoaded)
              return null === (t4 = this.levels[this.levelLastLoaded]) || void 0 === t4 ? void 0 : t4.details;
          }, d2.onMediaAttached = function(t4, e4) {
            var r4 = this.media = this.mediaBuffer = e4.media;
            this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r4.addEventListener("seeking", this.onvseeking), r4.addEventListener("ended", this.onvended);
            var i4 = this.config;
            this.levels && i4.autoStartLoad && this.state === Zt && this.startLoad(i4.startPosition);
          }, d2.onMediaDetaching = function() {
            var t4 = this.media;
            null != t4 && t4.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), t4 && this.onvseeking && this.onvended && (t4.removeEventListener("seeking", this.onvseeking), t4.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = false, this.fragmentTracker.removeAllFragments(), this.stopLoad();
          }, d2.onMediaSeeking = function() {
            var t4 = this.config, e4 = this.fragCurrent, r4 = this.media, i4 = this.mediaBuffer, n3 = this.state, s2 = r4 ? r4.currentTime : 0, o2 = Bt.bufferInfo(i4 || r4, s2, t4.maxBufferHole);
            if (this.log("media seeking to " + ((0, a.isFiniteNumber)(s2) ? s2.toFixed(3) : s2) + ", state: " + n3), this.state === oe)
              this.resetLoadingState();
            else if (e4) {
              var l2 = t4.maxFragLookUpTolerance, u3 = e4.start - l2, d3 = e4.start + e4.duration + l2;
              if (!o2.len || d3 < o2.start || u3 > o2.end) {
                var h2 = s2 > d3;
                (s2 < u3 || h2) && (h2 && e4.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), e4.abortRequests()), this.resetLoadingState());
              }
            }
            r4 && (this.lastCurrentTime = s2), this.loadedmetadata || o2.len || (this.nextLoadPosition = this.startPosition = s2), this.tickImmediate();
          }, d2.onMediaEnded = function() {
            this.startPosition = this.lastCurrentTime = 0;
          }, d2.onLevelSwitching = function(t4, e4) {
            this.fragLoadError = 0;
          }, d2.onHandlerDestroying = function() {
            this.stopLoad(), t3.prototype.onHandlerDestroying.call(this);
          }, d2.onHandlerDestroyed = function() {
            this.state = Zt, this.hls.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, t3.prototype.onHandlerDestroyed.call(this);
          }, d2.loadFragment = function(t4, e4, r4) {
            this._loadFragForPlayback(t4, e4, r4);
          }, d2._loadFragForPlayback = function(t4, e4, r4) {
            var i4 = this;
            this._doFragLoad(t4, e4, r4, function(e5) {
              if (i4.fragContextChanged(t4))
                return i4.warn("Fragment " + t4.sn + (e5.part ? " p: " + e5.part.index : "") + " of level " + t4.level + " was dropped during download."), void i4.fragmentTracker.removeFragment(t4);
              t4.stats.chunkCount++, i4._handleFragmentLoadProgress(e5);
            }).then(function(e5) {
              if (e5) {
                i4.fragLoadError = 0;
                var r5 = i4.state;
                i4.fragContextChanged(t4) ? (r5 === re || !i4.fragCurrent && r5 === ae) && (i4.fragmentTracker.removeFragment(t4), i4.state = te) : ("payload" in e5 && (i4.log("Loaded fragment " + t4.sn + " of level " + t4.level), i4.hls.trigger(s.Events.FRAG_LOADED, e5)), i4._handleFragmentLoadComplete(e5));
              }
            }).catch(function(e5) {
              i4.state !== Zt && i4.state !== le && (i4.warn(e5), i4.resetFragmentLoading(t4));
            });
          }, d2.flushMainBuffer = function(t4, e4, r4) {
            if (void 0 === r4 && (r4 = null), t4 - e4) {
              var i4 = { startOffset: t4, endOffset: e4, type: r4 };
              this.fragLoadError = 0, this.hls.trigger(s.Events.BUFFER_FLUSHING, i4);
            }
          }, d2._loadInitSegment = function(t4, e4) {
            var r4 = this;
            this._doFragLoad(t4, e4).then(function(e5) {
              if (!e5 || r4.fragContextChanged(t4) || !r4.levels)
                throw new Error("init load aborted");
              return e5;
            }).then(function(e5) {
              var i4 = r4.hls, n3 = e5.payload, a2 = t4.decryptdata;
              if (n3 && n3.byteLength > 0 && a2 && a2.key && a2.iv && "AES-128" === a2.method) {
                var o2 = self.performance.now();
                return r4.decrypter.decrypt(new Uint8Array(n3), a2.key.buffer, a2.iv.buffer).then(function(r5) {
                  var n4 = self.performance.now();
                  return i4.trigger(s.Events.FRAG_DECRYPTED, { frag: t4, payload: r5, stats: { tstart: o2, tdecrypt: n4 } }), e5.payload = r5, e5;
                });
              }
              return e5;
            }).then(function(e5) {
              var i4 = r4.fragCurrent, n3 = r4.hls, a2 = r4.levels;
              if (!a2)
                throw new Error("init load aborted, missing levels");
              a2[t4.level].details;
              var o2 = t4.stats;
              r4.state = te, r4.fragLoadError = 0, t4.data = new Uint8Array(e5.payload), o2.parsing.start = o2.buffering.start = self.performance.now(), o2.parsing.end = o2.buffering.end = self.performance.now(), e5.frag === i4 && n3.trigger(s.Events.FRAG_BUFFERED, { stats: o2, frag: i4, part: null, id: t4.type }), r4.tick();
            }).catch(function(e5) {
              r4.state !== Zt && r4.state !== le && (r4.warn(e5), r4.resetFragmentLoading(t4));
            });
          }, d2.fragContextChanged = function(t4) {
            var e4 = this.fragCurrent;
            return !t4 || !e4 || t4.level !== e4.level || t4.sn !== e4.sn || t4.urlId !== e4.urlId;
          }, d2.fragBufferedComplete = function(t4, e4) {
            var r4, i4, n3, a2, s2 = this.mediaBuffer ? this.mediaBuffer : this.media;
            this.log("Buffered " + t4.type + " sn: " + t4.sn + (e4 ? " part: " + e4.index : "") + " of " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t4.level + " (frag:[" + (null != (r4 = t4.startPTS) ? r4 : NaN).toFixed(3) + "-" + (null != (i4 = t4.endPTS) ? i4 : NaN).toFixed(3) + "] > buffer:" + (s2 ? Qt(Bt.getBuffered(s2)) : "(detached)") + ")"), this.state = te, s2 && (!this.loadedmetadata && t4.type == V.PlaylistLevelType.MAIN && s2.buffered.length && (null === (n3 = this.fragCurrent) || void 0 === n3 ? void 0 : n3.sn) === (null === (a2 = this.fragPrevious) || void 0 === a2 ? void 0 : a2.sn) && (this.loadedmetadata = true, this.seekToStartPos()), this.tick());
          }, d2.seekToStartPos = function() {
          }, d2._handleFragmentLoadComplete = function(t4) {
            var e4 = this.transmuxer;
            if (e4) {
              var r4 = t4.frag, i4 = t4.part, n3 = t4.partsLoaded, a2 = !n3 || 0 === n3.length || n3.some(function(t5) {
                return !t5;
              }), s2 = new Gt(r4.level, r4.sn, r4.stats.chunkCount + 1, 0, i4 ? i4.index : -1, !a2);
              e4.flush(s2);
            }
          }, d2._handleFragmentLoadProgress = function(t4) {
          }, d2._doFragLoad = function(t4, e4, r4, i4) {
            var n3, o2 = this;
            if (void 0 === r4 && (r4 = null), !this.levels)
              throw new Error("frag load aborted, missing levels");
            var l2 = null;
            if (!t4.encrypted || null !== (n3 = t4.decryptdata) && void 0 !== n3 && n3.key ? !t4.encrypted && e4.encryptedFragments.length && this.keyLoader.loadClear(t4, e4.encryptedFragments) : (this.log("Loading key for " + t4.sn + " of [" + e4.startSN + "-" + e4.endSN + "], " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t4.level), this.state = ee, this.fragCurrent = t4, l2 = this.keyLoader.load(t4).then(function(t5) {
              if (!o2.fragContextChanged(t5.frag))
                return o2.hls.trigger(s.Events.KEY_LOADED, t5), o2.state === ee && (o2.state = te), t5;
            }), this.hls.trigger(s.Events.KEY_LOADING, { frag: t4 }), this.throwIfFragContextChanged("KEY_LOADING")), r4 = Math.max(t4.start, r4 || 0), this.config.lowLatencyMode && e4) {
              var u3 = e4.partList;
              if (u3 && i4) {
                r4 > t4.end && e4.fragmentHint && (t4 = e4.fragmentHint);
                var d3 = this.getNextPart(u3, t4, r4);
                if (d3 > -1) {
                  var h2 = u3[d3];
                  return this.log("Loading part sn: " + t4.sn + " p: " + h2.index + " cc: " + t4.cc + " of playlist [" + e4.startSN + "-" + e4.endSN + "] parts [0-" + d3 + "-" + (u3.length - 1) + "] " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), this.nextLoadPosition = h2.start + h2.duration, this.state = re, this.hls.trigger(s.Events.FRAG_LOADING, { frag: t4, part: u3[d3], targetBufferTime: r4 }), this.throwIfFragContextChanged("FRAG_LOADING parts"), l2 ? l2.then(function(e5) {
                    return !e5 || o2.fragContextChanged(e5.frag) ? null : o2.doFragPartsLoad(t4, u3, d3, i4);
                  }).catch(function(t5) {
                    return o2.handleFragLoadError(t5);
                  }) : this.doFragPartsLoad(t4, u3, d3, i4).catch(function(t5) {
                    return o2.handleFragLoadError(t5);
                  });
                }
                if (!t4.url || this.loadedEndOfParts(u3, r4))
                  return Promise.resolve(null);
              }
            }
            this.log("Loading fragment " + t4.sn + " cc: " + t4.cc + " " + (e4 ? "of [" + e4.startSN + "-" + e4.endSN + "] " : "") + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), (0, a.isFiniteNumber)(t4.sn) && !this.bitrateTest && (this.nextLoadPosition = t4.start + t4.duration), this.state = re, this.hls.trigger(s.Events.FRAG_LOADING, { frag: t4, targetBufferTime: r4 }), this.throwIfFragContextChanged("FRAG_LOADING");
            var c2 = this.config.progressive;
            return c2 && l2 ? l2.then(function(e5) {
              return !e5 || o2.fragContextChanged(null == e5 ? void 0 : e5.frag) ? null : o2.fragmentLoader.load(t4, i4);
            }).catch(function(t5) {
              return o2.handleFragLoadError(t5);
            }) : Promise.all([this.fragmentLoader.load(t4, c2 ? i4 : void 0), l2]).then(function(t5) {
              var e5 = t5[0];
              return !c2 && e5 && i4 && i4(e5), e5;
            }).catch(function(t5) {
              return o2.handleFragLoadError(t5);
            });
          }, d2.throwIfFragContextChanged = function(t4) {
            if (null === this.fragCurrent)
              throw new Error("frag load aborted, context changed in " + t4);
          }, d2.doFragPartsLoad = function(t4, e4, r4, i4) {
            var n3 = this;
            return new Promise(function(a2, o2) {
              var l2 = [];
              !function r5(u3) {
                var d3 = e4[u3];
                n3.fragmentLoader.loadPart(t4, d3, i4).then(function(i5) {
                  l2[d3.index] = i5;
                  var o3 = i5.part;
                  n3.hls.trigger(s.Events.FRAG_LOADED, i5);
                  var h2 = e4[u3 + 1];
                  if (!h2 || h2.fragment !== t4)
                    return a2({ frag: t4, part: o3, partsLoaded: l2 });
                  r5(u3 + 1);
                }).catch(o2);
              }(r4);
            });
          }, d2.handleFragLoadError = function(t4) {
            if ("data" in t4) {
              var e4 = t4.data;
              t4.data && e4.details === o.ErrorDetails.INTERNAL_ABORTED ? this.handleFragLoadAborted(e4.frag, e4.part) : this.hls.trigger(s.Events.ERROR, e4);
            } else
              this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.INTERNAL_EXCEPTION, err: t4, fatal: true });
            return null;
          }, d2._handleTransmuxerFlush = function(t4) {
            var e4 = this.getCurrentContext(t4);
            if (e4 && this.state === ae) {
              var r4 = e4.frag, i4 = e4.part, n3 = e4.level, a2 = self.performance.now();
              r4.stats.parsing.end = a2, i4 && (i4.stats.parsing.end = a2), this.updateLevelTiming(r4, i4, n3, t4.partial);
            } else
              this.fragCurrent || this.state === Zt || this.state === le || (this.state = te);
          }, d2.getCurrentContext = function(t4) {
            var e4 = this.levels, r4 = t4.level, i4 = t4.sn, n3 = t4.part;
            if (!e4 || !e4[r4])
              return this.warn("Levels object was unset while buffering fragment " + i4 + " of level " + r4 + ". The current chunk will not be buffered."), null;
            var a2 = e4[r4], s2 = n3 > -1 ? function(t5, e5, r5) {
              if (!t5 || !t5.details)
                return null;
              var i5 = t5.details.partList;
              if (i5)
                for (var n4 = i5.length; n4--; ) {
                  var a3 = i5[n4];
                  if (a3.index === r5 && a3.fragment.sn === e5)
                    return a3;
                }
              return null;
            }(a2, i4, n3) : null, o2 = s2 ? s2.fragment : function(t5, e5, r5) {
              if (!t5 || !t5.details)
                return null;
              var i5 = t5.details, n4 = i5.fragments[e5 - i5.startSN];
              return n4 || ((n4 = i5.fragmentHint) && n4.sn === e5 ? n4 : e5 < i5.startSN && r5 && r5.sn === e5 ? r5 : null);
            }(a2, i4, this.fragCurrent);
            return o2 ? { frag: o2, part: s2, level: a2 } : null;
          }, d2.bufferFragmentData = function(t4, e4, r4, i4) {
            if (t4 && this.state === ae) {
              var n3 = t4.data1, a2 = t4.data2, o2 = n3;
              if (n3 && a2 && (o2 = (0, R.appendUint8Array)(n3, a2)), o2 && o2.length) {
                var l2 = { type: t4.type, frag: e4, part: r4, chunkMeta: i4, parent: e4.type, data: o2 };
                this.hls.trigger(s.Events.BUFFER_APPENDING, l2), t4.dropped && t4.independent && !r4 && this.flushBufferGap(e4);
              }
            }
          }, d2.flushBufferGap = function(t4) {
            var e4 = this.media;
            if (e4)
              if (Bt.isBuffered(e4, e4.currentTime)) {
                var r4 = e4.currentTime, i4 = Bt.bufferInfo(e4, r4, 0), n3 = t4.duration, a2 = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * n3), s2 = Math.max(Math.min(t4.start - a2, i4.end - a2), r4 + a2);
                t4.start - s2 > a2 && this.flushMainBuffer(s2, t4.start);
              } else
                this.flushMainBuffer(0, t4.start);
          }, d2.getFwdBufferInfo = function(t4, e4) {
            var r4 = this.config, i4 = this.getLoadPosition();
            if (!(0, a.isFiniteNumber)(i4))
              return null;
            var n3 = Bt.bufferInfo(t4, i4, r4.maxBufferHole);
            if (0 === n3.len && void 0 !== n3.nextStart) {
              var s2 = this.fragmentTracker.getBufferedFrag(i4, e4);
              if (s2 && n3.nextStart < s2.end)
                return Bt.bufferInfo(t4, i4, Math.max(n3.nextStart, r4.maxBufferHole));
            }
            return n3;
          }, d2.getMaxBufferLength = function(t4) {
            var e4, r4 = this.config;
            return e4 = t4 ? Math.max(8 * r4.maxBufferSize / t4, r4.maxBufferLength) : r4.maxBufferLength, Math.min(e4, r4.maxMaxBufferLength);
          }, d2.reduceMaxBufferLength = function(t4) {
            var e4 = this.config, r4 = t4 || e4.maxBufferLength;
            return e4.maxMaxBufferLength >= r4 && (e4.maxMaxBufferLength /= 2, this.warn("Reduce max buffer length to " + e4.maxMaxBufferLength + "s"), true);
          }, d2.getNextFragment = function(t4, e4) {
            var r4 = e4.fragments, i4 = r4.length;
            if (!i4)
              return null;
            var n3, a2 = this.config, s2 = r4[0].start;
            if (e4.live) {
              var o2 = a2.initialLiveManifestSize;
              if (i4 < o2)
                return this.warn("Not enough fragments to start playback (have: " + i4 + ", need: " + o2 + ")"), null;
              e4.PTSKnown || this.startFragRequested || -1 !== this.startPosition || (n3 = this.getInitialLiveFragment(e4, r4), this.startPosition = n3 ? this.hls.liveSyncPosition || n3.start : t4);
            } else
              t4 <= s2 && (n3 = r4[0]);
            if (!n3) {
              var l2 = a2.lowLatencyMode ? e4.partEnd : e4.fragmentEnd;
              n3 = this.getFragmentAtPosition(t4, l2, e4);
            }
            return this.mapToInitFragWhenRequired(n3);
          }, d2.mapToInitFragWhenRequired = function(t4) {
            return null == t4 || !t4.initSegment || null != t4 && t4.initSegment.data || this.bitrateTest ? t4 : t4.initSegment;
          }, d2.getNextPart = function(t4, e4, r4) {
            for (var i4 = -1, n3 = false, a2 = true, s2 = 0, o2 = t4.length; s2 < o2; s2++) {
              var l2 = t4[s2];
              if (a2 = a2 && !l2.independent, i4 > -1 && r4 < l2.start)
                break;
              var u3 = l2.loaded;
              u3 ? i4 = -1 : (n3 || l2.independent || a2) && l2.fragment === e4 && (i4 = s2), n3 = u3;
            }
            return i4;
          }, d2.loadedEndOfParts = function(t4, e4) {
            var r4 = t4[t4.length - 1];
            return r4 && e4 > r4.start && r4.loaded;
          }, d2.getInitialLiveFragment = function(t4, e4) {
            var r4 = this.fragPrevious, i4 = null;
            if (r4) {
              if (t4.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + r4.programDateTime), i4 = function(t5, e5, r5) {
                if (null === e5 || !Array.isArray(t5) || !t5.length || !(0, a.isFiniteNumber)(e5))
                  return null;
                if (e5 < (t5[0].programDateTime || 0))
                  return null;
                if (e5 >= (t5[t5.length - 1].endProgramDateTime || 0))
                  return null;
                r5 = r5 || 0;
                for (var i5 = 0; i5 < t5.length; ++i5) {
                  var n4 = t5[i5];
                  if (Xt(e5, r5, n4))
                    return n4;
                }
                return null;
              }(e4, r4.endProgramDateTime, this.config.maxFragLookUpTolerance)), !i4) {
                var n3 = r4.sn + 1;
                if (n3 >= t4.startSN && n3 <= t4.endSN) {
                  var s2 = e4[n3 - t4.startSN];
                  r4.cc === s2.cc && (i4 = s2, this.log("Live playlist, switching playlist, load frag with next SN: " + i4.sn));
                }
                i4 || (i4 = function(t5, e5) {
                  return Yt(t5, function(t6) {
                    return t6.cc < e5 ? 1 : t6.cc > e5 ? -1 : 0;
                  });
                }(e4, r4.cc), i4 && this.log("Live playlist, switching playlist, load frag with same CC: " + i4.sn));
              }
            } else {
              var o2 = this.hls.liveSyncPosition;
              null !== o2 && (i4 = this.getFragmentAtPosition(o2, this.bitrateTest ? t4.fragmentEnd : t4.edge, t4));
            }
            return i4;
          }, d2.getFragmentAtPosition = function(t4, e4, r4) {
            var i4, n3 = this.config, a2 = this.fragPrevious, s2 = r4.fragments, o2 = r4.endSN, l2 = r4.fragmentHint, u3 = n3.maxFragLookUpTolerance, d3 = !!(n3.lowLatencyMode && r4.partList && l2);
            if (d3 && l2 && !this.bitrateTest && (s2 = s2.concat(l2), o2 = l2.sn), i4 = t4 < e4 ? Wt(a2, s2, t4, t4 > e4 - u3 ? 0 : u3) : s2[s2.length - 1]) {
              var h2 = i4.sn - r4.startSN;
              if (this.fragmentTracker.getState(i4) === St.OK && (a2 = i4), a2 && i4.sn === a2.sn && !d3 && a2 && i4.level === a2.level) {
                var c2 = s2[h2 + 1];
                i4.sn < o2 && this.fragmentTracker.getState(c2) !== St.OK ? (this.log("SN " + i4.sn + " just loaded, load next one: " + c2.sn), i4 = c2) : i4 = null;
              }
            }
            return i4;
          }, d2.synchronizeToLiveEdge = function(t4) {
            var e4 = this.config, r4 = this.media;
            if (r4) {
              var i4 = this.hls.liveSyncPosition, n3 = r4.currentTime, a2 = t4.fragments[0].start, s2 = t4.edge, o2 = n3 >= a2 - e4.maxFragLookUpTolerance && n3 <= s2;
              if (null !== i4 && r4.duration > i4 && (n3 < i4 || !o2)) {
                var l2 = void 0 !== e4.liveMaxLatencyDuration ? e4.liveMaxLatencyDuration : e4.liveMaxLatencyDurationCount * t4.targetduration;
                (!o2 && r4.readyState < 4 || n3 < s2 - l2) && (this.loadedmetadata || (this.nextLoadPosition = i4), r4.readyState && (this.warn("Playback: " + n3.toFixed(3) + " is located too far from the end of live sliding playlist: " + s2 + ", reset currentTime to : " + i4.toFixed(3)), r4.currentTime = i4));
              }
            }
          }, d2.alignPlaylists = function(t4, e4) {
            var r4 = this.levels, i4 = this.levelLastLoaded, n3 = this.fragPrevious, s2 = null !== i4 ? r4[i4] : null, o2 = t4.fragments.length;
            if (!o2)
              return this.warn("No fragments in live playlist"), 0;
            var u3 = t4.fragments[0].start, d3 = !e4, h2 = t4.alignedSliding && (0, a.isFiniteNumber)(u3);
            if (d3 || !h2 && !u3) {
              !function(t5, e5, r5) {
                e5 && (function(t6, e6, r6) {
                  if (function(t7, e7, r7) {
                    return !(!e7.details || !(r7.endCC > r7.startCC || t7 && t7.cc < r7.startCC));
                  }(t6, r6, e6)) {
                    var i5 = function(t7, e7, r7) {
                      void 0 === r7 && (r7 = 0);
                      var i6 = t7.fragments, n4 = e7.fragments;
                      if (n4.length && i6.length) {
                        var a2 = Kt(i6, n4[0].cc);
                        if (a2 && (!a2 || a2.startPTS))
                          return a2;
                        l.logger.log("No frag in previous level to align on");
                      } else
                        l.logger.log("No fragments to align");
                    }(r6.details, e6);
                    i5 && (0, a.isFiniteNumber)(i5.start) && (l.logger.log("Adjusting PTS using last level due to CC increase within current level " + e6.url), jt(i5.start, e6));
                  }
                }(t5, r5, e5), !r5.alignedSliding && e5.details && function(t6, e6) {
                  if (e6.fragments.length && t6.hasProgramDateTime && e6.hasProgramDateTime) {
                    var r6 = e6.fragments[0].programDateTime, i5 = t6.fragments[0].programDateTime, n4 = (i5 - r6) / 1e3 + e6.fragments[0].start;
                    n4 && (0, a.isFiniteNumber)(n4) && (l.logger.log("Adjusting PTS using programDateTime delta " + (i5 - r6) + "ms, sliding:" + n4.toFixed(3) + " " + t6.url + " "), jt(n4, t6));
                  }
                }(r5, e5.details), r5.alignedSliding || !e5.details || r5.skippedSegments || vt(e5.details, r5));
              }(n3, s2, t4);
              var c2 = t4.fragments[0].start;
              return this.log("Live playlist sliding: " + c2.toFixed(2) + " start-sn: " + (e4 ? e4.startSN : "na") + "->" + t4.startSN + " prev-sn: " + (n3 ? n3.sn : "na") + " fragments: " + o2), c2;
            }
            return u3;
          }, d2.waitForCdnTuneIn = function(t4) {
            return t4.live && t4.canBlockReload && t4.partTarget && t4.tuneInGoal > Math.max(t4.partHoldBack, 3 * t4.partTarget);
          }, d2.setStartPosition = function(t4, e4) {
            var r4 = this.startPosition;
            if (r4 < e4 && (r4 = -1), -1 === r4 || -1 === this.lastCurrentTime) {
              var i4 = t4.startTimeOffset;
              (0, a.isFiniteNumber)(i4) ? (r4 = e4 + i4, i4 < 0 && (r4 += t4.totalduration), r4 = Math.min(Math.max(e4, r4), e4 + t4.totalduration), this.log("Start time offset " + i4 + " found in playlist, adjust startPosition to " + r4), this.startPosition = r4) : t4.live ? r4 = this.hls.liveSyncPosition || e4 : this.startPosition = r4 = 0, this.lastCurrentTime = r4;
            }
            this.nextLoadPosition = r4;
          }, d2.getLoadPosition = function() {
            var t4 = this.media, e4 = 0;
            return this.loadedmetadata && t4 ? e4 = t4.currentTime : this.nextLoadPosition && (e4 = this.nextLoadPosition), e4;
          }, d2.handleFragLoadAborted = function(t4, e4) {
            this.transmuxer && "initSegment" !== t4.sn && t4.stats.aborted && (this.warn("Fragment " + t4.sn + (e4 ? " part" + e4.index : "") + " of level " + t4.level + " was aborted"), this.resetFragmentLoading(t4));
          }, d2.resetFragmentLoading = function(t4) {
            this.fragCurrent && (this.fragContextChanged(t4) || this.state === ie) || (this.state = te);
          }, d2.onFragmentOrKeyLoadError = function(t4, e4) {
            if (e4.fatal)
              return this.stopLoad(), void (this.state = le);
            var r4 = this.config;
            if (e4.chunkMeta) {
              var i4 = this.getCurrentContext(e4.chunkMeta);
              i4 && (e4.frag = i4.frag, e4.levelRetry = true, this.fragLoadError = r4.fragLoadingMaxRetry);
            }
            var n3 = e4.frag;
            if (n3 && n3.type === t4)
              if (this.fragCurrent, this.fragLoadError + 1 <= r4.fragLoadingMaxRetry) {
                this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition);
                var a2 = Math.min(Math.pow(2, this.fragLoadError) * r4.fragLoadingRetryDelay, r4.fragLoadingMaxRetryTimeout);
                this.warn("Fragment " + n3.sn + " of " + t4 + " " + n3.level + " failed to load, retrying in " + a2 + "ms"), this.retryDate = self.performance.now() + a2, this.fragLoadError++, this.state = ie;
              } else
                e4.levelRetry ? (t4 === V.PlaylistLevelType.AUDIO && (this.fragCurrent = null), this.fragLoadError = 0, this.state = te) : (l.logger.error(e4.details + " reaches max retry, redispatch as fatal ..."), e4.fatal = true, this.hls.stopLoad(), this.state = le);
          }, d2.afterBufferFlushed = function(t4, e4, r4) {
            if (t4) {
              var i4 = Bt.getBuffered(t4);
              this.fragmentTracker.detectEvictedFragments(e4, i4, r4), this.state === oe && this.resetLoadingState();
            }
          }, d2.resetLoadingState = function() {
            this.log("Reset loading state"), this.fragCurrent = null, this.fragPrevious = null, this.state = te;
          }, d2.resetStartWhenNotLoaded = function(t4) {
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              var e4 = this.levels ? this.levels[t4].details : null;
              null != e4 && e4.live ? (this.startPosition = -1, this.setStartPosition(e4, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition;
            }
          }, d2.updateLevelTiming = function(t4, e4, r4, i4) {
            var n3 = this, a2 = r4.details;
            Object.keys(t4.elementaryStreams).reduce(function(e5, o2) {
              var l2 = t4.elementaryStreams[o2];
              if (l2) {
                var u3 = l2.endPTS - l2.startPTS;
                if (u3 <= 0)
                  return n3.warn("Could not parse fragment " + t4.sn + " " + o2 + " duration reliably (" + u3 + ")"), e5 || false;
                var d3 = i4 ? 0 : gt(a2, t4, l2.startPTS, l2.endPTS, l2.startDTS, l2.endDTS);
                return n3.hls.trigger(s.Events.LEVEL_PTS_UPDATED, { details: a2, level: r4, drift: d3, type: o2, frag: t4, start: l2.startPTS, end: l2.endPTS }), true;
              }
              return e5;
            }, false) || (this.warn("Found no media in fragment " + t4.sn + " of level " + r4.id + " resetting transmuxer to fallback to playlist timing"), this.resetTransmuxer()), this.state = se, this.hls.trigger(s.Events.FRAG_PARSED, { frag: t4, part: e4 });
          }, d2.resetTransmuxer = function() {
            this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null);
          }, n2 = i3, (u2 = [{ key: "state", get: function() {
            return this._state;
          }, set: function(t4) {
            var e4 = this._state;
            e4 !== t4 && (this._state = t4, this.log(e4 + "->" + t4));
          } }]) && $t(n2.prototype, u2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(Nt);
        function ce() {
          return self.MediaSource || self.WebKitMediaSource;
        }
        function fe() {
          return self.SourceBuffer || self.WebKitSourceBuffer;
        }
        var ge = function() {
          var t3 = ENTRY_MODULE, e3 = {}, r3 = function r4(i4) {
            var n2 = e3[i4];
            if (void 0 !== n2)
              return n2.exports;
            var a2 = e3[i4] = { exports: {} };
            return t3[i4].call(a2.exports, a2, a2.exports, r4), a2.exports;
          };
          r3.m = t3, r3.n = function(t4) {
            var e4 = t4 && t4.__esModule ? function() {
              return t4.default;
            } : function() {
              return t4;
            };
            return r3.d(e4, { a: e4 }), e4;
          }, r3.d = function(t4, e4) {
            for (var i4 in e4)
              r3.o(e4, i4) && !r3.o(t4, i4) && Object.defineProperty(t4, i4, { enumerable: true, get: e4[i4] });
          }, r3.o = function(t4, e4) {
            return Object.prototype.hasOwnProperty.call(t4, e4);
          }, r3.r = function(t4) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
          };
          var i3 = r3(ENTRY_MODULE);
          return i3.default || i3;
        }.toString().split("ENTRY_MODULE"), ve = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)";
        function pe(t3) {
          return (t3 + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        }
        function me(t3, e3, i3) {
          var n2 = {};
          n2[i3] = [];
          var a2 = e3.toString().replace(/^"[^"]+"/, "function"), s2 = a2.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/) || a2.match(/^\(\w+,\s*\w+,\s*(\w+)\)\s?\=\s?\>/);
          if (!s2)
            return n2;
          for (var o2, l2 = s2[1], u2 = new RegExp("(\\\\n|\\W)" + pe(l2) + ve, "g"); o2 = u2.exec(a2); )
            "dll-reference" !== o2[3] && n2[i3].push(o2[3]);
          for (u2 = new RegExp("\\(" + pe(l2) + '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)' + ve, "g"); o2 = u2.exec(a2); )
            t3[o2[2]] || (n2[i3].push(o2[1]), t3[o2[2]] = r2(o2[1]).m), n2[o2[2]] = n2[o2[2]] || [], n2[o2[2]].push(o2[4]);
          for (var d2, h2 = Object.keys(n2), c2 = 0; c2 < h2.length; c2++)
            for (var f2 = 0; f2 < n2[h2[c2]].length; f2++)
              d2 = n2[h2[c2]][f2], isNaN(1 * d2) || (n2[h2[c2]][f2] = 1 * n2[h2[c2]][f2]);
          return n2;
        }
        function ye(t3) {
          return Object.keys(t3).reduce(function(e3, r3) {
            return e3 || t3[r3].length > 0;
          }, false);
        }
        function Ee(t3, e3, r3, i3) {
          var n2 = t3[i3].map(function(t4) {
            return '"' + t4 + '": ' + e3[i3][t4].toString().replace(/^"[^"]+"/, "function");
          }).join(",");
          return ge[0] + "{" + n2 + "}" + ge[1] + '"' + r3 + '"' + ge[2];
        }
        var Te = r2(544), Se = r2(729), be = r2.n(Se), Le = ce() || { isTypeSupported: function() {
          return false;
        } }, Ae = function() {
          function t3(t4, e4, i3, n2) {
            var a2 = this;
            this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.worker = void 0, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
            var u2 = t4.config;
            this.hls = t4, this.id = e4, this.useWorker = !!u2.enableWorker, this.onTransmuxComplete = i3, this.onFlush = n2;
            var d2 = function(t5, e5) {
              (e5 = e5 || {}).frag = a2.frag, e5.id = a2.id, a2.hls.trigger(t5, e5);
            };
            this.observer = new Se.EventEmitter(), this.observer.on(s.Events.FRAG_DECRYPTED, d2), this.observer.on(s.Events.ERROR, d2);
            var h2 = { mp4: Le.isTypeSupported("video/mp4"), mpeg: Le.isTypeSupported("audio/mpeg"), mp3: Le.isTypeSupported('audio/mp4; codecs="mp3"') }, c2 = navigator.vendor;
            if (this.useWorker && "undefined" != typeof Worker) {
              var f2;
              l.logger.log("demuxing in webworker");
              try {
                f2 = this.worker = function(t5, e5) {
                  e5 = e5 || {};
                  var i4 = { main: r2.m }, n3 = e5.all ? { main: Object.keys(i4.main) } : function(t6, e6) {
                    for (var r3 = { main: [e6] }, i5 = { main: [] }, n4 = { main: {} }; ye(r3); )
                      for (var a4 = Object.keys(r3), s3 = 0; s3 < a4.length; s3++) {
                        var o3 = a4[s3], l3 = r3[o3].pop();
                        if (n4[o3] = n4[o3] || {}, !n4[o3][l3] && t6[o3][l3]) {
                          n4[o3][l3] = true, i5[o3] = i5[o3] || [], i5[o3].push(l3);
                          for (var u3 = me(t6, t6[o3][l3], o3), d3 = Object.keys(u3), h3 = 0; h3 < d3.length; h3++)
                            r3[d3[h3]] = r3[d3[h3]] || [], r3[d3[h3]] = r3[d3[h3]].concat(u3[d3[h3]]);
                        }
                      }
                    return i5;
                  }(i4, t5), a3 = "";
                  Object.keys(n3).filter(function(t6) {
                    return "main" !== t6;
                  }).forEach(function(t6) {
                    for (var e6 = 0; n3[t6][e6]; )
                      e6++;
                    n3[t6].push(e6), i4[t6][e6] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })", a3 = a3 + "var " + t6 + " = (" + Ee(n3, i4, e6, modules) + ")();\n";
                  }), a3 = a3 + "new ((" + Ee(n3, i4, t5, "main") + ")())(self);";
                  var s2 = new window.Blob([a3], { type: "text/javascript" }), o2 = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(s2), l2 = new window.Worker(o2);
                  return l2.objectURL = o2, l2;
                }(182), this.onwmsg = this.onWorkerMessage.bind(this), f2.addEventListener("message", this.onwmsg), f2.onerror = function(t5) {
                  a2.useWorker = false, l.logger.warn("Exception in webworker, fallback to inline"), a2.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: "demuxerWorker", error: new Error(t5.message + "  (" + t5.filename + ":" + t5.lineno + ")") });
                }, f2.postMessage({ cmd: "init", typeSupported: h2, vendor: c2, id: e4, config: JSON.stringify(u2) });
              } catch (t5) {
                l.logger.warn("Error in worker:", t5), l.logger.error("Error while initializing DemuxerWorker, fallback to inline"), f2 && self.URL.revokeObjectURL(f2.objectURL), this.transmuxer = new Te.default(this.observer, h2, u2, c2, e4), this.worker = null;
              }
            } else
              this.transmuxer = new Te.default(this.observer, h2, u2, c2, e4);
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            var t4 = this.worker;
            if (t4)
              t4.removeEventListener("message", this.onwmsg), t4.terminate(), this.worker = null, this.onwmsg = void 0;
            else {
              var e4 = this.transmuxer;
              e4 && (e4.destroy(), this.transmuxer = null);
            }
            var r3 = this.observer;
            r3 && r3.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null;
          }, e3.push = function(t4, e4, r3, i3, n2, a2, s2, o2, u2, d2) {
            var h2, c2, f2 = this;
            u2.transmuxing.start = self.performance.now();
            var g2 = this.transmuxer, v2 = this.worker, p2 = a2 ? a2.start : n2.start, m2 = n2.decryptdata, y2 = this.frag, E2 = !(y2 && n2.cc === y2.cc), T2 = !(y2 && u2.level === y2.level), S2 = y2 ? u2.sn - y2.sn : -1, b2 = this.part ? u2.part - this.part.index : -1, L2 = 0 === S2 && u2.id > 1 && u2.id === (null == y2 ? void 0 : y2.stats.chunkCount), A2 = !T2 && (1 === S2 || 0 === S2 && (1 === b2 || L2 && b2 <= 0)), D2 = self.performance.now();
            (T2 || S2 || 0 === n2.stats.parsing.start) && (n2.stats.parsing.start = D2), !a2 || !b2 && A2 || (a2.stats.parsing.start = D2);
            var k2 = !(y2 && (null === (h2 = n2.initSegment) || void 0 === h2 ? void 0 : h2.url) === (null === (c2 = y2.initSegment) || void 0 === c2 ? void 0 : c2.url)), R2 = new Te.TransmuxState(E2, A2, o2, T2, p2, k2);
            if (!A2 || E2 || k2) {
              l.logger.log("[transmuxer-interface, " + n2.type + "]: Starting new transmux session for sn: " + u2.sn + " p: " + u2.part + " level: " + u2.level + " id: " + u2.id + "\n        discontinuity: " + E2 + "\n        trackSwitch: " + T2 + "\n        contiguous: " + A2 + "\n        accurateTimeOffset: " + o2 + "\n        timeOffset: " + p2 + "\n        initSegmentChange: " + k2);
              var I2 = new Te.TransmuxConfig(r3, i3, e4, s2, d2);
              this.configureTransmuxer(I2);
            }
            if (this.frag = n2, this.part = a2, v2)
              v2.postMessage({ cmd: "demux", data: t4, decryptdata: m2, chunkMeta: u2, state: R2 }, t4 instanceof ArrayBuffer ? [t4] : []);
            else if (g2) {
              var w2 = g2.push(t4, m2, u2, R2);
              (0, Te.isPromise)(w2) ? (g2.async = true, w2.then(function(t5) {
                f2.handleTransmuxComplete(t5);
              }).catch(function(t5) {
                f2.transmuxerError(t5, u2, "transmuxer-interface push error");
              })) : (g2.async = false, this.handleTransmuxComplete(w2));
            }
          }, e3.flush = function(t4) {
            var e4 = this;
            t4.transmuxing.start = self.performance.now();
            var r3 = this.transmuxer, i3 = this.worker;
            if (i3)
              i3.postMessage({ cmd: "flush", chunkMeta: t4 });
            else if (r3) {
              var n2 = r3.flush(t4);
              (0, Te.isPromise)(n2) || r3.async ? ((0, Te.isPromise)(n2) || (n2 = Promise.resolve(n2)), n2.then(function(r4) {
                e4.handleFlushResult(r4, t4);
              }).catch(function(r4) {
                e4.transmuxerError(r4, t4, "transmuxer-interface flush error");
              })) : this.handleFlushResult(n2, t4);
            }
          }, e3.transmuxerError = function(t4, e4, r3) {
            this.hls && this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: e4, fatal: false, error: t4, err: t4, reason: r3 });
          }, e3.handleFlushResult = function(t4, e4) {
            var r3 = this;
            t4.forEach(function(t5) {
              r3.handleTransmuxComplete(t5);
            }), this.onFlush(e4);
          }, e3.onWorkerMessage = function(t4) {
            var e4 = t4.data, r3 = this.hls;
            switch (e4.event) {
              case "init":
                self.URL.revokeObjectURL(this.worker.objectURL);
                break;
              case "transmuxComplete":
                this.handleTransmuxComplete(e4.data);
                break;
              case "flush":
                this.onFlush(e4.data);
                break;
              case "workerLog":
                l.logger[e4.data.logType] && l.logger[e4.data.logType](e4.data.message);
                break;
              default:
                e4.data = e4.data || {}, e4.data.frag = this.frag, e4.data.id = this.id, r3.trigger(e4.event, e4.data);
            }
          }, e3.configureTransmuxer = function(t4) {
            var e4 = this.worker, r3 = this.transmuxer;
            e4 ? e4.postMessage({ cmd: "configure", config: t4 }) : r3 && r3.configure(t4);
          }, e3.handleTransmuxComplete = function(t4) {
            t4.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(t4);
          }, t3;
        }(), De = function() {
          function t3(t4, e4, r3, i3) {
            this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = false, this.stalled = null, this.moved = false, this.seeking = false, this.config = t4, this.media = e4, this.fragmentTracker = r3, this.hls = i3;
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.media = null, this.hls = this.fragmentTracker = null;
          }, e3.poll = function(t4, e4) {
            var r3 = this.config, i3 = this.media, n2 = this.stalled;
            if (null !== i3) {
              var a2 = i3.currentTime, s2 = i3.seeking, o2 = this.seeking && !s2, u2 = !this.seeking && s2;
              if (this.seeking = s2, a2 === t4) {
                if ((u2 || o2) && (this.stalled = null), !(i3.paused && !s2 || i3.ended || 0 === i3.playbackRate) && Bt.getBuffered(i3).length) {
                  var d2 = Bt.bufferInfo(i3, a2, 0), h2 = d2.len > 0, c2 = d2.nextStart || 0;
                  if (h2 || c2) {
                    if (s2) {
                      var f2 = d2.len > 2, g2 = !c2 || e4 && e4.start <= a2 || c2 - a2 > 2 && !this.fragmentTracker.getPartialFragment(a2);
                      if (f2 || g2)
                        return;
                      this.moved = false;
                    }
                    if (!this.moved && null !== this.stalled) {
                      var v2, p2 = Math.max(c2, d2.start || 0) - a2, m2 = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null, y2 = (null == m2 || null === (v2 = m2.details) || void 0 === v2 ? void 0 : v2.live) ? 2 * m2.details.targetduration : 2;
                      if (p2 > 0 && p2 <= y2)
                        return void this._trySkipBufferHole(null);
                    }
                    var E2 = self.performance.now();
                    if (null !== n2) {
                      var T2 = E2 - n2;
                      if (s2 || !(T2 >= 250) || (this._reportStall(d2), this.media)) {
                        var S2 = Bt.bufferInfo(i3, a2, r3.maxBufferHole);
                        this._tryFixBufferStall(S2, T2);
                      }
                    } else
                      this.stalled = E2;
                  }
                }
              } else if (this.moved = true, null !== n2) {
                if (this.stallReported) {
                  var b2 = self.performance.now() - n2;
                  l.logger.warn("playback not stuck anymore @" + a2 + ", after " + Math.round(b2) + "ms"), this.stallReported = false;
                }
                this.stalled = null, this.nudgeRetry = 0;
              }
            }
          }, e3._tryFixBufferStall = function(t4, e4) {
            var r3 = this.config, i3 = this.fragmentTracker, n2 = this.media;
            if (null !== n2) {
              var a2 = n2.currentTime, s2 = i3.getPartialFragment(a2);
              if (s2 && (this._trySkipBufferHole(s2) || !this.media))
                return;
              t4.len > r3.maxBufferHole && e4 > 1e3 * r3.highBufferWatchdogPeriod && (l.logger.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer());
            }
          }, e3._reportStall = function(t4) {
            var e4 = this.hls, r3 = this.media;
            !this.stallReported && r3 && (this.stallReported = true, l.logger.warn("Playback stalling at @" + r3.currentTime + " due to low buffer (" + JSON.stringify(t4) + ")"), e4.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: t4.len }));
          }, e3._trySkipBufferHole = function(t4) {
            var e4 = this.config, r3 = this.hls, i3 = this.media;
            if (null === i3)
              return 0;
            for (var n2 = i3.currentTime, a2 = 0, u2 = Bt.getBuffered(i3), d2 = 0; d2 < u2.length; d2++) {
              var h2 = u2.start(d2);
              if (n2 + e4.maxBufferHole >= a2 && n2 < h2) {
                var c2 = Math.max(h2 + 0.05, i3.currentTime + 0.1);
                return l.logger.warn("skipping hole, adjusting currentTime from " + n2 + " to " + c2), this.moved = true, this.stalled = null, i3.currentTime = c2, t4 && r3.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, reason: "fragment loaded with buffer holes, seeking from " + n2 + " to " + c2, frag: t4 }), c2;
              }
              a2 = u2.end(d2);
            }
            return 0;
          }, e3._tryNudgeBuffer = function() {
            var t4 = this.config, e4 = this.hls, r3 = this.media, i3 = this.nudgeRetry;
            if (null !== r3) {
              var n2 = r3.currentTime;
              if (this.nudgeRetry++, i3 < t4.nudgeMaxRetry) {
                var a2 = n2 + (i3 + 1) * t4.nudgeOffset;
                l.logger.warn("Nudging 'currentTime' from " + n2 + " to " + a2), r3.currentTime = a2, e4.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false });
              } else
                l.logger.error("Playhead still not moving while enough data buffered @" + n2 + " after " + t4.nudgeMaxRetry + " nudges"), e4.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_STALLED_ERROR, fatal: true });
            }
          }, t3;
        }();
        function ke(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function Re(t3, e3) {
          return Re = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Re(t3, e3);
        }
        var Ie = function(t3) {
          var e3, r3;
          function i3(e4, r4, i4) {
            var n3;
            return (n3 = t3.call(this, e4, r4, i4, "[stream-controller]") || this).audioCodecSwap = false, n3.gapController = null, n3.level = -1, n3._forceStartLoad = false, n3.altAudio = false, n3.audioOnly = false, n3.fragPlaying = null, n3.onvplaying = null, n3.onvseeked = null, n3.fragLastKbps = 0, n3.couldBacktrack = false, n3.backtrackFragment = null, n3.audioCodecSwitch = false, n3.videoBuffer = null, n3._registerListeners(), n3;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Re(e3, r3);
          var n2, l2, u2 = i3.prototype;
          return u2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, u2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(s.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, u2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.onMediaDetaching();
          }, u2.startLoad = function(t4) {
            if (this.levels) {
              var e4 = this.lastCurrentTime, r4 = this.hls;
              if (this.stopLoad(), this.setInterval(100), this.level = -1, this.fragLoadError = 0, !this.startFragRequested) {
                var i4 = r4.startLevel;
                -1 === i4 && (r4.config.testBandwidth && this.levels.length > 1 ? (i4 = 0, this.bitrateTest = true) : i4 = r4.nextAutoLevel), this.level = r4.nextLoadLevel = i4, this.loadedmetadata = false;
              }
              e4 > 0 && -1 === t4 && (this.log("Override startPosition with lastCurrentTime @" + e4.toFixed(3)), t4 = e4), this.state = te, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
            } else
              this._forceStartLoad = true, this.state = Zt;
          }, u2.stopLoad = function() {
            this._forceStartLoad = false, t3.prototype.stopLoad.call(this);
          }, u2.doTick = function() {
            switch (this.state) {
              case te:
                this.doTickIdle();
                break;
              case de:
                var t4, e4 = this.levels, r4 = this.level, i4 = null == e4 || null === (t4 = e4[r4]) || void 0 === t4 ? void 0 : t4.details;
                if (i4 && (!i4.live || this.levelLastLoaded === this.level)) {
                  if (this.waitForCdnTuneIn(i4))
                    break;
                  this.state = te;
                  break;
                }
                break;
              case ie:
                var n3, a2 = self.performance.now(), s2 = this.retryDate;
                (!s2 || a2 >= s2 || null !== (n3 = this.media) && void 0 !== n3 && n3.seeking) && (this.log("retryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.level), this.state = te);
            }
            this.onTickEnd();
          }, u2.onTickEnd = function() {
            t3.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged();
          }, u2.doTickIdle = function() {
            var t4 = this.hls, e4 = this.levelLastLoaded, r4 = this.levels, i4 = this.media, n3 = t4.config, a2 = t4.nextLoadLevel;
            if (null !== e4 && (i4 || !this.startFragRequested && n3.startFragPrefetch) && (!this.altAudio || !this.audioOnly) && r4 && r4[a2]) {
              var o2 = r4[a2], l3 = this.getMainFwdBufferInfo();
              if (null !== l3) {
                var u3 = this.getLevelDetails();
                if (u3 && this._streamEnded(l3, u3)) {
                  var d2 = {};
                  return this.altAudio && (d2.type = "video"), this.hls.trigger(s.Events.BUFFER_EOS, d2), void (this.state = oe);
                }
                this.level = t4.nextLoadLevel = a2;
                var h2 = o2.details;
                if (!h2 || this.state === de || h2.live && this.levelLastLoaded !== a2)
                  return this.level = a2, void (this.state = de);
                if (!(l3.len >= this.getMaxBufferLength(o2.maxBitrate))) {
                  this.backtrackFragment && this.backtrackFragment.start > l3.end && (this.backtrackFragment = null);
                  var c2 = this.backtrackFragment ? this.backtrackFragment.start : l3.end, f2 = this.getNextFragment(c2, h2);
                  if (this.couldBacktrack && !this.fragPrevious && f2 && "initSegment" !== f2.sn && this.fragmentTracker.getState(f2) !== St.OK) {
                    var g2, p2 = (null != (g2 = this.backtrackFragment) ? g2 : f2).sn - h2.startSN, m2 = h2.fragments[p2 - 1];
                    m2 && f2.cc === m2.cc && (f2 = m2, this.fragmentTracker.removeFragment(m2));
                  } else
                    this.backtrackFragment && l3.len && (this.backtrackFragment = null);
                  if (f2 && this.fragmentTracker.getState(f2) === St.OK && this.nextLoadPosition > c2) {
                    var y2 = this.audioOnly && !this.altAudio ? v.ElementaryStreamTypes.AUDIO : v.ElementaryStreamTypes.VIDEO, E2 = (y2 === v.ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                    E2 && this.afterBufferFlushed(E2, y2, V.PlaylistLevelType.MAIN), f2 = this.getNextFragment(this.nextLoadPosition, h2);
                  }
                  f2 && (!f2.initSegment || f2.initSegment.data || this.bitrateTest || (f2 = f2.initSegment), this.loadFragment(f2, h2, c2));
                }
              }
            }
          }, u2.loadFragment = function(e4, r4, i4) {
            var n3, a2 = this.fragmentTracker.getState(e4);
            this.fragCurrent = e4, a2 === St.NOT_LOADED ? "initSegment" === e4.sn ? this._loadInitSegment(e4, r4) : this.bitrateTest ? (this.log("Fragment " + e4.sn + " of level " + e4.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(e4, r4)) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e4, r4, i4)) : a2 === St.APPENDING ? this.reduceMaxBufferLength(e4.duration) && this.fragmentTracker.removeFragment(e4) : 0 === (null === (n3 = this.media) || void 0 === n3 ? void 0 : n3.buffered.length) && this.fragmentTracker.removeAllFragments();
          }, u2.getAppendedFrag = function(t4) {
            var e4 = this.fragmentTracker.getAppendedFrag(t4, V.PlaylistLevelType.MAIN);
            return e4 && "fragment" in e4 ? e4.fragment : e4;
          }, u2.getBufferedFrag = function(t4) {
            return this.fragmentTracker.getBufferedFrag(t4, V.PlaylistLevelType.MAIN);
          }, u2.followingBufferedFrag = function(t4) {
            return t4 ? this.getBufferedFrag(t4.end + 0.5) : null;
          }, u2.immediateLevelSwitch = function() {
            this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          }, u2.nextLevelSwitch = function() {
            var t4 = this.levels, e4 = this.media;
            if (null != e4 && e4.readyState) {
              var r4, i4 = this.getAppendedFrag(e4.currentTime);
              if (i4 && i4.start > 1 && this.flushMainBuffer(0, i4.start - 1), !e4.paused && t4) {
                var n3 = t4[this.hls.nextLoadLevel], a2 = this.fragLastKbps;
                r4 = a2 && this.fragCurrent ? this.fragCurrent.duration * n3.maxBitrate / (1e3 * a2) + 1 : 0;
              } else
                r4 = 0;
              var s2 = this.getBufferedFrag(e4.currentTime + r4);
              if (s2) {
                var o2 = this.followingBufferedFrag(s2);
                if (o2) {
                  this.abortCurrentFrag();
                  var l3 = o2.maxStartPTS ? o2.maxStartPTS : o2.start, u3 = o2.duration, d2 = Math.max(s2.end, l3 + Math.min(Math.max(u3 - this.config.maxFragLookUpTolerance, 0.5 * u3), 0.75 * u3));
                  this.flushMainBuffer(d2, Number.POSITIVE_INFINITY);
                }
              }
            }
          }, u2.abortCurrentFrag = function() {
            var t4 = this.fragCurrent;
            switch (this.fragCurrent = null, this.backtrackFragment = null, t4 && t4.abortRequests(), this.state) {
              case ee:
              case re:
              case ie:
              case ae:
              case se:
                this.state = te;
            }
            this.nextLoadPosition = this.getLoadPosition();
          }, u2.flushMainBuffer = function(e4, r4) {
            t3.prototype.flushMainBuffer.call(this, e4, r4, this.altAudio ? "video" : null);
          }, u2.onMediaAttached = function(e4, r4) {
            t3.prototype.onMediaAttached.call(this, e4, r4);
            var i4 = r4.media;
            this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), i4.addEventListener("playing", this.onvplaying), i4.addEventListener("seeked", this.onvseeked), this.gapController = new De(this.config, i4, this.fragmentTracker, this.hls);
          }, u2.onMediaDetaching = function() {
            var e4 = this.media;
            e4 && this.onvplaying && this.onvseeked && (e4.removeEventListener("playing", this.onvplaying), e4.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), t3.prototype.onMediaDetaching.call(this);
          }, u2.onMediaPlaying = function() {
            this.tick();
          }, u2.onMediaSeeked = function() {
            var t4 = this.media, e4 = t4 ? t4.currentTime : null;
            (0, a.isFiniteNumber)(e4) && this.log("Media seeked to " + e4.toFixed(3)), this.tick();
          }, u2.onManifestLoading = function() {
            this.log("Trigger BUFFER_RESET"), this.hls.trigger(s.Events.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = false, this.startPosition = this.lastCurrentTime = 0, this.fragPlaying = null, this.backtrackFragment = null;
          }, u2.onManifestParsed = function(t4, e4) {
            var r4, i4, n3, a2 = false, s2 = false;
            e4.levels.forEach(function(t5) {
              (r4 = t5.audioCodec) && (-1 !== r4.indexOf("mp4a.40.2") && (a2 = true), -1 !== r4.indexOf("mp4a.40.5") && (s2 = true));
            }), this.audioCodecSwitch = a2 && s2 && !("function" == typeof (null == (n3 = fe()) || null === (i4 = n3.prototype) || void 0 === i4 ? void 0 : i4.changeType)), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = e4.levels, this.startFragRequested = false;
          }, u2.onLevelLoading = function(t4, e4) {
            var r4 = this.levels;
            if (r4 && this.state === te) {
              var i4 = r4[e4.level];
              (!i4.details || i4.details.live && this.levelLastLoaded !== e4.level || this.waitForCdnTuneIn(i4.details)) && (this.state = de);
            }
          }, u2.onLevelLoaded = function(t4, e4) {
            var r4, i4 = this.levels, n3 = e4.level, a2 = e4.details, o2 = a2.totalduration;
            if (i4) {
              this.log("Level " + n3 + " loaded [" + a2.startSN + "," + a2.endSN + "], cc [" + a2.startCC + ", " + a2.endCC + "] duration:" + o2);
              var l3 = this.fragCurrent;
              !l3 || this.state !== re && this.state !== ie || l3.level !== e4.level && l3.loader && (this.state = te, this.backtrackFragment = null, l3.abortRequests());
              var u3 = i4[n3], d2 = 0;
              if (a2.live || null !== (r4 = u3.details) && void 0 !== r4 && r4.live) {
                if (a2.fragments[0] || (a2.deltaUpdateFailed = true), a2.deltaUpdateFailed)
                  return;
                d2 = this.alignPlaylists(a2, u3.details);
              }
              if (u3.details = a2, this.levelLastLoaded = n3, this.hls.trigger(s.Events.LEVEL_UPDATED, { details: a2, level: n3 }), this.state === de) {
                if (this.waitForCdnTuneIn(a2))
                  return;
                this.state = te;
              }
              this.startFragRequested ? a2.live && this.synchronizeToLiveEdge(a2) : this.setStartPosition(a2, d2), this.tick();
            } else
              this.warn("Levels were reset while loading level " + n3);
          }, u2._handleFragmentLoadProgress = function(t4) {
            var e4, r4 = t4.frag, i4 = t4.part, n3 = t4.payload, a2 = this.levels;
            if (a2) {
              var s2 = a2[r4.level], o2 = s2.details;
              if (o2) {
                var l3 = s2.videoCodec, u3 = o2.PTSKnown || !o2.live, d2 = null === (e4 = r4.initSegment) || void 0 === e4 ? void 0 : e4.data, h2 = this._getAudioCodec(s2), c2 = this.transmuxer = this.transmuxer || new Ae(this.hls, V.PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)), f2 = i4 ? i4.index : -1, g2 = -1 !== f2, v2 = new Gt(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, f2, g2), p2 = this.initPTS[r4.cc];
                c2.push(n3, d2, h2, l3, r4, i4, o2.totalduration, u3, v2, p2);
              } else
                this.warn("Dropping fragment " + r4.sn + " of level " + r4.level + " after level details were reset");
            } else
              this.warn("Levels were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, u2.onAudioTrackSwitching = function(t4, e4) {
            var r4 = this.altAudio, i4 = !!e4.url, n3 = e4.id;
            if (!i4) {
              if (this.mediaBuffer !== this.media) {
                this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                var a2 = this.fragCurrent;
                a2 && (this.log("Switching to main audio track, cancel main fragment load"), a2.abortRequests()), this.resetTransmuxer(), this.resetLoadingState();
              } else
                this.audioOnly && this.resetTransmuxer();
              var o2 = this.hls;
              r4 && o2.trigger(s.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: "audio" }), o2.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: n3 });
            }
          }, u2.onAudioTrackSwitched = function(t4, e4) {
            var r4 = e4.id, i4 = !!this.hls.audioTracks[r4].url;
            if (i4) {
              var n3 = this.videoBuffer;
              n3 && this.mediaBuffer !== n3 && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = n3);
            }
            this.altAudio = i4, this.tick();
          }, u2.onBufferCreated = function(t4, e4) {
            var r4, i4, n3 = e4.tracks, a2 = false;
            for (var s2 in n3) {
              var o2 = n3[s2];
              if ("main" === o2.id) {
                if (i4 = s2, r4 = o2, "video" === s2) {
                  var l3 = n3[s2];
                  l3 && (this.videoBuffer = l3.buffer);
                }
              } else
                a2 = true;
            }
            a2 && r4 ? (this.log("Alternate track found, use " + i4 + ".buffered to schedule main fragment loading"), this.mediaBuffer = r4.buffer) : this.mediaBuffer = this.media;
          }, u2.onFragBuffered = function(t4, e4) {
            var r4 = e4.frag, i4 = e4.part;
            if (!r4 || r4.type === V.PlaylistLevelType.MAIN) {
              if (this.fragContextChanged(r4))
                return this.warn("Fragment " + r4.sn + (i4 ? " p: " + i4.index : "") + " of level " + r4.level + " finished buffering, but was aborted. state: " + this.state), void (this.state === se && (this.state = te));
              var n3 = i4 ? i4.stats : r4.stats;
              this.fragLastKbps = Math.round(8 * n3.total / (n3.buffering.end - n3.loading.first)), "initSegment" !== r4.sn && (this.fragPrevious = r4), this.fragBufferedComplete(r4, i4);
            }
          }, u2.onError = function(t4, e4) {
            if (e4.type !== o.ErrorTypes.KEY_SYSTEM_ERROR)
              switch (e4.details) {
                case o.ErrorDetails.FRAG_LOAD_ERROR:
                case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                case o.ErrorDetails.FRAG_PARSING_ERROR:
                case o.ErrorDetails.KEY_LOAD_ERROR:
                case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                  this.onFragmentOrKeyLoadError(V.PlaylistLevelType.MAIN, e4);
                  break;
                case o.ErrorDetails.LEVEL_LOAD_ERROR:
                case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                  this.state !== le && (e4.fatal ? (this.warn("" + e4.details), this.state = le) : e4.levelRetry || this.state !== de || (this.state = te));
                  break;
                case o.ErrorDetails.BUFFER_FULL_ERROR:
                  if ("main" === e4.parent && (this.state === ae || this.state === se)) {
                    var r4 = true, i4 = this.getFwdBufferInfo(this.media, V.PlaylistLevelType.MAIN);
                    i4 && i4.len > 0.5 && (r4 = !this.reduceMaxBufferLength(i4.len)), r4 && (this.warn("buffer full error also media.currentTime is not buffered, flush main"), this.immediateLevelSwitch()), this.resetLoadingState();
                  }
              }
            else
              this.onFragmentOrKeyLoadError(V.PlaylistLevelType.MAIN, e4);
          }, u2.checkBuffer = function() {
            var t4 = this.media, e4 = this.gapController;
            if (t4 && e4 && t4.readyState) {
              if (this.loadedmetadata || !Bt.getBuffered(t4).length) {
                var r4 = this.state !== te ? this.fragCurrent : null;
                e4.poll(this.lastCurrentTime, r4);
              }
              this.lastCurrentTime = t4.currentTime;
            }
          }, u2.onFragLoadEmergencyAborted = function() {
            this.state = te, this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition), this.tickImmediate();
          }, u2.onBufferFlushed = function(t4, e4) {
            var r4 = e4.type;
            if (r4 !== v.ElementaryStreamTypes.AUDIO || this.audioOnly && !this.altAudio) {
              var i4 = (r4 === v.ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
              this.afterBufferFlushed(i4, r4, V.PlaylistLevelType.MAIN);
            }
          }, u2.onLevelsUpdated = function(t4, e4) {
            this.levels = e4.levels;
          }, u2.swapAudioCodec = function() {
            this.audioCodecSwap = !this.audioCodecSwap;
          }, u2.seekToStartPos = function() {
            var t4 = this.media;
            if (t4) {
              var e4 = t4.currentTime, r4 = this.startPosition;
              if (r4 >= 0 && e4 < r4) {
                if (t4.seeking)
                  return void this.log("could not seek to " + r4 + ", already seeking at " + e4);
                var i4 = Bt.getBuffered(t4), n3 = (i4.length ? i4.start(0) : 0) - r4;
                n3 > 0 && (n3 < this.config.maxBufferHole || n3 < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + n3 + " to match buffer start"), r4 += n3, this.startPosition = r4), this.log("seek to target start position " + r4 + " from current time " + e4), t4.currentTime = r4;
              }
            }
          }, u2._getAudioCodec = function(t4) {
            var e4 = this.config.defaultAudioCodec || t4.audioCodec;
            return this.audioCodecSwap && e4 && (this.log("Swapping audio codec"), e4 = -1 !== e4.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), e4;
          }, u2._loadBitrateTestFrag = function(t4, e4) {
            var r4 = this;
            t4.bitrateTest = true, this._doFragLoad(t4, e4).then(function(e5) {
              var i4 = r4.hls;
              if (e5 && !r4.fragContextChanged(t4)) {
                r4.fragLoadError = 0, r4.state = te, r4.startFragRequested = false, r4.bitrateTest = false;
                var n3 = t4.stats;
                n3.parsing.start = n3.parsing.end = n3.buffering.start = n3.buffering.end = self.performance.now(), i4.trigger(s.Events.FRAG_LOADED, e5), t4.bitrateTest = false;
              }
            });
          }, u2._handleTransmuxComplete = function(t4) {
            var e4, r4 = "main", i4 = this.hls, n3 = t4.remuxResult, o2 = t4.chunkMeta, l3 = this.getCurrentContext(o2);
            if (!l3)
              return this.warn("The loading context changed while buffering fragment " + o2.sn + " of level " + o2.level + ". This chunk will not be buffered."), void this.resetStartWhenNotLoaded(o2.level);
            var u3 = l3.frag, d2 = l3.part, h2 = l3.level, c2 = n3.video, f2 = n3.text, g2 = n3.id3, p2 = n3.initSegment, m2 = h2.details, y2 = this.altAudio ? void 0 : n3.audio;
            if (!this.fragContextChanged(u3)) {
              if (this.state = ae, p2) {
                p2.tracks && (this._bufferInitSegment(h2, p2.tracks, u3, o2), i4.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, { frag: u3, id: r4, tracks: p2.tracks }));
                var E2 = p2.initPTS, T2 = p2.timescale;
                (0, a.isFiniteNumber)(E2) && (this.initPTS[u3.cc] = E2, i4.trigger(s.Events.INIT_PTS_FOUND, { frag: u3, id: r4, initPTS: E2, timescale: T2 }));
              }
              if (c2 && false !== n3.independent) {
                if (m2) {
                  var S2 = c2.startPTS, b2 = c2.endPTS, L2 = c2.startDTS, A2 = c2.endDTS;
                  if (d2)
                    d2.elementaryStreams[c2.type] = { startPTS: S2, endPTS: b2, startDTS: L2, endDTS: A2 };
                  else if (c2.firstKeyFrame && c2.independent && 1 === o2.id && (this.couldBacktrack = true), c2.dropped && c2.independent) {
                    var D2 = this.getMainFwdBufferInfo();
                    if ((D2 ? D2.end : this.getLoadPosition()) + this.config.maxBufferHole < (c2.firstKeyFramePTS ? c2.firstKeyFramePTS : S2) - this.config.maxBufferHole)
                      return void this.backtrack(u3);
                    u3.setElementaryStreamInfo(c2.type, u3.start, b2, u3.start, A2, true);
                  }
                  u3.setElementaryStreamInfo(c2.type, S2, b2, L2, A2), this.backtrackFragment && (this.backtrackFragment = u3), this.bufferFragmentData(c2, u3, d2, o2);
                }
              } else if (false === n3.independent)
                return void this.backtrack(u3);
              if (y2) {
                var k2 = y2.startPTS, R2 = y2.endPTS, I2 = y2.startDTS, w2 = y2.endDTS;
                d2 && (d2.elementaryStreams[v.ElementaryStreamTypes.AUDIO] = { startPTS: k2, endPTS: R2, startDTS: I2, endDTS: w2 }), u3.setElementaryStreamInfo(v.ElementaryStreamTypes.AUDIO, k2, R2, I2, w2), this.bufferFragmentData(y2, u3, d2, o2);
              }
              if (m2 && null != g2 && null !== (e4 = g2.samples) && void 0 !== e4 && e4.length) {
                var C2 = { id: r4, frag: u3, details: m2, samples: g2.samples };
                i4.trigger(s.Events.FRAG_PARSING_METADATA, C2);
              }
              if (m2 && f2) {
                var _2 = { id: r4, frag: u3, details: m2, samples: f2.samples };
                i4.trigger(s.Events.FRAG_PARSING_USERDATA, _2);
              }
            }
          }, u2._bufferInitSegment = function(t4, e4, r4, i4) {
            var n3 = this;
            if (this.state === ae) {
              this.audioOnly = !!e4.audio && !e4.video, this.altAudio && !this.audioOnly && delete e4.audio;
              var a2 = e4.audio, o2 = e4.video, l3 = e4.audiovideo;
              if (a2) {
                var u3 = t4.audioCodec, d2 = navigator.userAgent.toLowerCase();
                this.audioCodecSwitch && (u3 && (u3 = -1 !== u3.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), 1 !== a2.metadata.channelCount && -1 === d2.indexOf("firefox") && (u3 = "mp4a.40.5")), -1 !== d2.indexOf("android") && "audio/mpeg" !== a2.container && (u3 = "mp4a.40.2", this.log("Android: force audio codec to " + u3)), t4.audioCodec && t4.audioCodec !== u3 && this.log('Swapping manifest audio codec "' + t4.audioCodec + '" for "' + u3 + '"'), a2.levelCodec = u3, a2.id = "main", this.log("Init audio buffer, container:" + a2.container + ", codecs[selected/level/parsed]=[" + (u3 || "") + "/" + (t4.audioCodec || "") + "/" + a2.codec + "]");
              }
              o2 && (o2.levelCodec = t4.videoCodec, o2.id = "main", this.log("Init video buffer, container:" + o2.container + ", codecs[level/parsed]=[" + (t4.videoCodec || "") + "/" + o2.codec + "]")), l3 && this.log("Init audiovideo buffer, container:" + l3.container + ", codecs[level/parsed]=[" + (t4.attrs.CODECS || "") + "/" + l3.codec + "]"), this.hls.trigger(s.Events.BUFFER_CODECS, e4), Object.keys(e4).forEach(function(t5) {
                var a3 = e4[t5].initSegment;
                null != a3 && a3.byteLength && n3.hls.trigger(s.Events.BUFFER_APPENDING, { type: t5, data: a3, frag: r4, part: null, chunkMeta: i4, parent: r4.type });
              }), this.tick();
            }
          }, u2.getMainFwdBufferInfo = function() {
            return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, V.PlaylistLevelType.MAIN);
          }, u2.backtrack = function(t4) {
            this.couldBacktrack = true, this.backtrackFragment = t4, this.resetTransmuxer(), this.flushBufferGap(t4), this.fragmentTracker.removeFragment(t4), this.fragPrevious = null, this.nextLoadPosition = t4.start, this.state = te;
          }, u2.checkFragmentChanged = function() {
            var t4 = this.media, e4 = null;
            if (t4 && t4.readyState > 1 && false === t4.seeking) {
              var r4 = t4.currentTime;
              if (Bt.isBuffered(t4, r4) ? e4 = this.getAppendedFrag(r4) : Bt.isBuffered(t4, r4 + 0.1) && (e4 = this.getAppendedFrag(r4 + 0.1)), e4) {
                this.backtrackFragment = null;
                var i4 = this.fragPlaying, n3 = e4.level;
                i4 && e4.sn === i4.sn && i4.level === n3 && e4.urlId === i4.urlId || (this.fragPlaying = e4, this.hls.trigger(s.Events.FRAG_CHANGED, { frag: e4 }), i4 && i4.level === n3 || this.hls.trigger(s.Events.LEVEL_SWITCHED, { level: n3 }));
              }
            }
          }, n2 = i3, (l2 = [{ key: "nextLevel", get: function() {
            var t4 = this.nextBufferedFrag;
            return t4 ? t4.level : -1;
          } }, { key: "currentFrag", get: function() {
            var t4 = this.media;
            return t4 ? this.fragPlaying || this.getAppendedFrag(t4.currentTime) : null;
          } }, { key: "currentProgramDateTime", get: function() {
            var t4 = this.media;
            if (t4) {
              var e4 = t4.currentTime, r4 = this.currentFrag;
              if (r4 && (0, a.isFiniteNumber)(e4) && (0, a.isFiniteNumber)(r4.programDateTime)) {
                var i4 = r4.programDateTime + 1e3 * (e4 - r4.start);
                return new Date(i4);
              }
            }
            return null;
          } }, { key: "currentLevel", get: function() {
            var t4 = this.currentFrag;
            return t4 ? t4.level : -1;
          } }, { key: "nextBufferedFrag", get: function() {
            var t4 = this.currentFrag;
            return t4 ? this.followingBufferedFrag(t4) : null;
          } }, { key: "forceStartLoad", get: function() {
            return this._forceStartLoad;
          } }]) && ke(n2.prototype, l2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(he);
        const we = function() {
          function t3(t4, e4, r3) {
            void 0 === e4 && (e4 = 0), void 0 === r3 && (r3 = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = t4, this.alpha_ = t4 ? Math.exp(Math.log(0.5) / t4) : 0, this.estimate_ = e4, this.totalWeight_ = r3;
          }
          var e3 = t3.prototype;
          return e3.sample = function(t4, e4) {
            var r3 = Math.pow(this.alpha_, t4);
            this.estimate_ = e4 * (1 - r3) + r3 * this.estimate_, this.totalWeight_ += t4;
          }, e3.getTotalWeight = function() {
            return this.totalWeight_;
          }, e3.getEstimate = function() {
            if (this.alpha_) {
              var t4 = 1 - Math.pow(this.alpha_, this.totalWeight_);
              if (t4)
                return this.estimate_ / t4;
            }
            return this.estimate_;
          }, t3;
        }(), Ce = function() {
          function t3(t4, e4, r3) {
            this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultEstimate_ = r3, this.minWeight_ = 1e-3, this.minDelayMs_ = 50, this.slow_ = new we(t4), this.fast_ = new we(e4);
          }
          var e3 = t3.prototype;
          return e3.update = function(t4, e4) {
            var r3 = this.slow_, i3 = this.fast_;
            this.slow_.halfLife !== t4 && (this.slow_ = new we(t4, r3.getEstimate(), r3.getTotalWeight())), this.fast_.halfLife !== e4 && (this.fast_ = new we(e4, i3.getEstimate(), i3.getTotalWeight()));
          }, e3.sample = function(t4, e4) {
            var r3 = (t4 = Math.max(t4, this.minDelayMs_)) / 1e3, i3 = 8 * e4 / r3;
            this.fast_.sample(r3, i3), this.slow_.sample(r3, i3);
          }, e3.canEstimate = function() {
            var t4 = this.fast_;
            return t4 && t4.getTotalWeight() >= this.minWeight_;
          }, e3.getEstimate = function() {
            return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_;
          }, e3.destroy = function() {
          }, t3;
        }();
        function _e(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        const Pe = function() {
          function t3(t4) {
            this.hls = void 0, this.lastLoadedFragLevel = 0, this._nextAutoLevel = -1, this.timer = void 0, this.onCheck = this._abandonRulesCheck.bind(this), this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this.hls = t4;
            var e4 = t4.config;
            this.bwEstimator = new Ce(e4.abrEwmaSlowVoD, e4.abrEwmaFastVoD, e4.abrEwmaDefaultEstimate), this.registerListeners();
          }
          var e3, r3, i3 = t3.prototype;
          return i3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, i3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, i3.destroy = function() {
            this.unregisterListeners(), this.clearTimer(), this.hls = this.onCheck = null, this.fragCurrent = this.partCurrent = null;
          }, i3.onFragLoading = function(t4, e4) {
            var r4, i4 = e4.frag;
            i4.type === V.PlaylistLevelType.MAIN && (this.timer || (this.fragCurrent = i4, this.partCurrent = null != (r4 = e4.part) ? r4 : null, this.timer = self.setInterval(this.onCheck, 100)));
          }, i3.onLevelLoaded = function(t4, e4) {
            var r4 = this.hls.config;
            e4.details.live ? this.bwEstimator.update(r4.abrEwmaSlowLive, r4.abrEwmaFastLive) : this.bwEstimator.update(r4.abrEwmaSlowVoD, r4.abrEwmaFastVoD);
          }, i3._abandonRulesCheck = function() {
            var t4 = this.fragCurrent, e4 = this.partCurrent, r4 = this.hls, i4 = r4.autoLevelEnabled, n2 = r4.media;
            if (t4 && n2) {
              var o2 = e4 ? e4.stats : t4.stats, u2 = e4 ? e4.duration : t4.duration;
              if (o2.aborted || o2.loaded && o2.loaded === o2.total || 0 === t4.level)
                return this.clearTimer(), void (this._nextAutoLevel = -1);
              if (i4 && !n2.paused && n2.playbackRate && n2.readyState) {
                var d2 = r4.mainForwardBufferInfo;
                if (null !== d2) {
                  var h2 = performance.now() - o2.loading.start, c2 = Math.abs(n2.playbackRate);
                  if (!(h2 <= 500 * u2 / c2)) {
                    var f2 = o2.loaded && o2.loading.first, g2 = this.bwEstimator.getEstimate(), v2 = r4.levels, p2 = r4.minAutoLevel, m2 = v2[t4.level], y2 = o2.total || Math.max(o2.loaded, Math.round(u2 * m2.maxBitrate / 8)), E2 = f2 ? 1e3 * o2.loaded / h2 : 0, T2 = E2 ? (y2 - o2.loaded) / E2 : 8 * y2 / g2, S2 = d2.len / c2;
                    if (!(T2 <= S2)) {
                      var b2, L2 = Number.POSITIVE_INFINITY;
                      for (b2 = t4.level - 1; b2 > p2; b2--) {
                        var A2 = v2[b2].maxBitrate;
                        if ((L2 = E2 ? u2 * A2 / (6.4 * E2) : u2 * A2 / g2) < S2)
                          break;
                      }
                      L2 >= T2 || (l.logger.warn("Fragment " + t4.sn + (e4 ? " part " + e4.index : "") + " of level " + t4.level + " is loading too slowly and will cause an underbuffer; aborting and switching to level " + b2 + "\n      Current BW estimate: " + ((0, a.isFiniteNumber)(g2) ? (g2 / 1024).toFixed(3) : "Unknown") + " Kb/s\n      Estimated load time for current fragment: " + T2.toFixed(3) + " s\n      Estimated load time for the next fragment: " + L2.toFixed(3) + " s\n      Time to underbuffer: " + S2.toFixed(3) + " s"), r4.nextLoadLevel = b2, f2 && this.bwEstimator.sample(h2, o2.loaded), this.clearTimer(), (t4.loader || t4.keyLoader) && (this.fragCurrent = this.partCurrent = null, t4.abortRequests()), r4.trigger(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, { frag: t4, part: e4, stats: o2 }));
                    }
                  }
                }
              }
            }
          }, i3.onFragLoaded = function(t4, e4) {
            var r4 = e4.frag, i4 = e4.part;
            if (r4.type === V.PlaylistLevelType.MAIN && (0, a.isFiniteNumber)(r4.sn)) {
              var n2 = i4 ? i4.stats : r4.stats, o2 = i4 ? i4.duration : r4.duration;
              if (this.clearTimer(), this.lastLoadedFragLevel = r4.level, this._nextAutoLevel = -1, this.hls.config.abrMaxWithRealBitrate) {
                var l2 = this.hls.levels[r4.level], u2 = (l2.loaded ? l2.loaded.bytes : 0) + n2.loaded, d2 = (l2.loaded ? l2.loaded.duration : 0) + o2;
                l2.loaded = { bytes: u2, duration: d2 }, l2.realBitrate = Math.round(8 * u2 / d2);
              }
              if (r4.bitrateTest) {
                var h2 = { stats: n2, frag: r4, part: i4, id: r4.type };
                this.onFragBuffered(s.Events.FRAG_BUFFERED, h2);
              }
            }
          }, i3.onFragBuffered = function(t4, e4) {
            var r4 = e4.frag, i4 = e4.part, n2 = i4 ? i4.stats : r4.stats;
            if (!n2.aborted && r4.type === V.PlaylistLevelType.MAIN && "initSegment" !== r4.sn) {
              var a2 = n2.parsing.end - n2.loading.start;
              this.bwEstimator.sample(a2, n2.loaded), n2.bwEstimate = this.bwEstimator.getEstimate(), r4.bitrateTest ? this.bitrateTestDelay = a2 / 1e3 : this.bitrateTestDelay = 0;
            }
          }, i3.onError = function(t4, e4) {
            var r4;
            if ((null === (r4 = e4.frag) || void 0 === r4 ? void 0 : r4.type) === V.PlaylistLevelType.MAIN) {
              if (e4.type === o.ErrorTypes.KEY_SYSTEM_ERROR)
                return void this.clearTimer();
              switch (e4.details) {
                case o.ErrorDetails.FRAG_LOAD_ERROR:
                case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                case o.ErrorDetails.KEY_LOAD_ERROR:
                case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                  this.clearTimer();
              }
            }
          }, i3.clearTimer = function() {
            self.clearInterval(this.timer), this.timer = void 0;
          }, i3.getNextABRAutoLevel = function() {
            var t4 = this.fragCurrent, e4 = this.partCurrent, r4 = this.hls, i4 = r4.maxAutoLevel, n2 = r4.config, a2 = r4.minAutoLevel, s2 = r4.media, o2 = e4 ? e4.duration : t4 ? t4.duration : 0, u2 = s2 && 0 !== s2.playbackRate ? Math.abs(s2.playbackRate) : 1, d2 = this.bwEstimator ? this.bwEstimator.getEstimate() : n2.abrEwmaDefaultEstimate, h2 = r4.mainForwardBufferInfo, c2 = (h2 ? h2.len : 0) / u2, f2 = this.findBestLevel(d2, a2, i4, c2, n2.abrBandWidthFactor, n2.abrBandWidthUpFactor);
            if (f2 >= 0)
              return f2;
            l.logger.trace((c2 ? "rebuffering expected" : "buffer is empty") + ", finding optimal quality level");
            var g2 = o2 ? Math.min(o2, n2.maxStarvationDelay) : n2.maxStarvationDelay, v2 = n2.abrBandWidthFactor, p2 = n2.abrBandWidthUpFactor;
            if (!c2) {
              var m2 = this.bitrateTestDelay;
              m2 && (g2 = (o2 ? Math.min(o2, n2.maxLoadingDelay) : n2.maxLoadingDelay) - m2, l.logger.trace("bitrate test took " + Math.round(1e3 * m2) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * g2) + " ms"), v2 = p2 = 1);
            }
            return f2 = this.findBestLevel(d2, a2, i4, c2 + g2, v2, p2), Math.max(f2, 0);
          }, i3.findBestLevel = function(t4, e4, r4, i4, n2, s2) {
            for (var o2, u2 = this.fragCurrent, d2 = this.partCurrent, h2 = this.lastLoadedFragLevel, c2 = this.hls.levels, f2 = c2[h2], g2 = !(null == f2 || null === (o2 = f2.details) || void 0 === o2 || !o2.live), v2 = null == f2 ? void 0 : f2.codecSet, p2 = d2 ? d2.duration : u2 ? u2.duration : 0, m2 = r4; m2 >= e4; m2--) {
              var y2 = c2[m2];
              if (y2 && (!v2 || y2.codecSet === v2)) {
                var E2, T2 = y2.details, S2 = (d2 ? null == T2 ? void 0 : T2.partTarget : null == T2 ? void 0 : T2.averagetargetduration) || p2;
                E2 = m2 <= h2 ? n2 * t4 : s2 * t4;
                var b2 = c2[m2].maxBitrate, L2 = b2 * S2 / E2;
                if (l.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + m2 + "/" + Math.round(E2) + "/" + b2 + "/" + S2 + "/" + i4 + "/" + L2), E2 > b2 && (0 === L2 || !(0, a.isFiniteNumber)(L2) || g2 && !this.bitrateTestDelay || L2 < i4))
                  return m2;
              }
            }
            return -1;
          }, e3 = t3, (r3 = [{ key: "nextAutoLevel", get: function() {
            var t4 = this._nextAutoLevel, e4 = this.bwEstimator;
            if (-1 !== t4 && !e4.canEstimate())
              return t4;
            var r4 = this.getNextABRAutoLevel();
            return -1 !== t4 && this.hls.levels[r4].loadError ? t4 : (-1 !== t4 && (r4 = Math.min(t4, r4)), r4);
          }, set: function(t4) {
            this._nextAutoLevel = t4;
          } }]) && _e(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }();
        var Oe = function() {
          function t3() {
            this.chunks = [], this.dataLength = 0;
          }
          var e3 = t3.prototype;
          return e3.push = function(t4) {
            this.chunks.push(t4), this.dataLength += t4.length;
          }, e3.flush = function() {
            var t4, e4 = this.chunks, r3 = this.dataLength;
            return e4.length ? (t4 = 1 === e4.length ? e4[0] : function(t5, e5) {
              for (var r4 = new Uint8Array(e5), i3 = 0, n2 = 0; n2 < t5.length; n2++) {
                var a2 = t5[n2];
                r4.set(a2, i3), i3 += a2.length;
              }
              return r4;
            }(e4, r3), this.reset(), t4) : new Uint8Array(0);
          }, e3.reset = function() {
            this.chunks.length = 0, this.dataLength = 0;
          }, t3;
        }();
        function xe() {
          return xe = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, xe.apply(this, arguments);
        }
        function Fe(t3, e3) {
          return Fe = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Fe(t3, e3);
        }
        var Me = function(t3) {
          var e3, r3;
          function i3(e4, r4, i4) {
            var n3;
            return (n3 = t3.call(this, e4, r4, i4, "[audio-stream-controller]") || this).videoBuffer = null, n3.videoTrackCC = -1, n3.waitingVideoCC = -1, n3.audioSwitch = false, n3.trackId = -1, n3.waitingData = null, n3.mainDetails = null, n3.bufferFlushed = false, n3.cachedTrackLoadedData = null, n3._registerListeners(), n3;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Fe(e3, r3);
          var n2 = i3.prototype;
          return n2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.mainDetails = null;
          }, n2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.on(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, n2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.off(s.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), t4.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, n2.onInitPtsFound = function(t4, e4) {
            var r4 = e4.frag, i4 = e4.id, n3 = e4.initPTS;
            if ("main" === i4) {
              var a2 = r4.cc;
              this.initPTS[r4.cc] = n3, this.log("InitPTS for cc: " + a2 + " found from main: " + n3), this.videoTrackCC = a2, this.state === ue && this.tick();
            }
          }, n2.startLoad = function(t4) {
            if (!this.levels)
              return this.startPosition = t4, void (this.state = Zt);
            var e4 = this.lastCurrentTime;
            this.stopLoad(), this.setInterval(100), this.fragLoadError = 0, e4 > 0 && -1 === t4 ? (this.log("Override startPosition with lastCurrentTime @" + e4.toFixed(3)), t4 = e4, this.state = te) : (this.loadedmetadata = false, this.state = ne), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, n2.doTick = function() {
            switch (this.state) {
              case te:
                this.doTickIdle();
                break;
              case ne:
                var e4, r4 = this.levels, i4 = this.trackId, n3 = null == r4 || null === (e4 = r4[i4]) || void 0 === e4 ? void 0 : e4.details;
                if (n3) {
                  if (this.waitForCdnTuneIn(n3))
                    break;
                  this.state = ue;
                }
                break;
              case ie:
                var a2, s2 = performance.now(), o2 = this.retryDate;
                (!o2 || s2 >= o2 || null !== (a2 = this.media) && void 0 !== a2 && a2.seeking) && (this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.trackId), this.state = te);
                break;
              case ue:
                var l2 = this.waitingData;
                if (l2) {
                  var u2 = l2.frag, d2 = l2.part, h2 = l2.cache, c2 = l2.complete;
                  if (void 0 !== this.initPTS[u2.cc]) {
                    this.waitingData = null, this.waitingVideoCC = -1, this.state = re;
                    var f2 = { frag: u2, part: d2, payload: h2.flush(), networkDetails: null };
                    this._handleFragmentLoadProgress(f2), c2 && t3.prototype._handleFragmentLoadComplete.call(this, f2);
                  } else if (this.videoTrackCC !== this.waitingVideoCC)
                    this.log("Waiting fragment cc (" + u2.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                  else {
                    var g2 = this.getLoadPosition(), v2 = Bt.bufferInfo(this.mediaBuffer, g2, this.config.maxBufferHole);
                    qt(v2.end, this.config.maxFragLookUpTolerance, u2) < 0 && (this.log("Waiting fragment cc (" + u2.cc + ") @ " + u2.start + " cancelled because another fragment at " + v2.end + " is needed"), this.clearWaitingFragment());
                  }
                } else
                  this.state = te;
            }
            this.onTickEnd();
          }, n2.clearWaitingFragment = function() {
            var t4 = this.waitingData;
            t4 && (this.fragmentTracker.removeFragment(t4.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = te);
          }, n2.resetLoadingState = function() {
            this.clearWaitingFragment(), t3.prototype.resetLoadingState.call(this);
          }, n2.onTickEnd = function() {
            var t4 = this.media;
            t4 && t4.readyState && (this.lastCurrentTime = t4.currentTime);
          }, n2.doTickIdle = function() {
            var t4 = this.hls, e4 = this.levels, r4 = this.media, i4 = this.trackId, n3 = t4.config;
            if (e4 && e4[i4] && (r4 || !this.startFragRequested && n3.startFragPrefetch)) {
              var a2 = e4[i4].details;
              if (!a2 || a2.live && this.levelLastLoaded !== i4 || this.waitForCdnTuneIn(a2))
                this.state = ne;
              else {
                var o2 = this.mediaBuffer ? this.mediaBuffer : this.media;
                this.bufferFlushed && o2 && (this.bufferFlushed = false, this.afterBufferFlushed(o2, v.ElementaryStreamTypes.AUDIO, V.PlaylistLevelType.AUDIO));
                var l2 = this.getFwdBufferInfo(o2, V.PlaylistLevelType.AUDIO);
                if (null !== l2) {
                  var u2 = this.audioSwitch;
                  if (!u2 && this._streamEnded(l2, a2))
                    return t4.trigger(s.Events.BUFFER_EOS, { type: "audio" }), void (this.state = oe);
                  var d2 = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, V.PlaylistLevelType.MAIN);
                  if (!(l2.len >= this.getMaxBufferLength(null == d2 ? void 0 : d2.len)) || u2) {
                    var h2 = a2.fragments[0].start, c2 = l2.end;
                    if (u2 && r4) {
                      var f2 = this.getLoadPosition();
                      c2 = f2, a2.PTSKnown && f2 < h2 && (l2.end > h2 || l2.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), r4.currentTime = h2 + 0.05);
                    }
                    if (!(d2 && c2 > d2.end + a2.targetduration) && (d2 && d2.len || !l2.len)) {
                      var g2 = this.getNextFragment(c2, a2);
                      g2 ? this.loadFragment(g2, a2, c2) : this.bufferFlushed = true;
                    }
                  }
                }
              }
            }
          }, n2.getMaxBufferLength = function(e4) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e4 ? Math.max(r4, e4) : r4;
          }, n2.onMediaDetaching = function() {
            this.videoBuffer = null, t3.prototype.onMediaDetaching.call(this);
          }, n2.onAudioTracksUpdated = function(t4, e4) {
            var r4 = e4.audioTracks;
            this.resetTransmuxer(), this.levels = r4.map(function(t5) {
              return new ut(t5);
            });
          }, n2.onAudioTrackSwitching = function(t4, e4) {
            var r4 = !!e4.url;
            this.trackId = e4.id;
            var i4 = this.fragCurrent;
            i4 && i4.abortRequests(), this.fragCurrent = null, this.clearWaitingFragment(), r4 ? this.setInterval(100) : this.resetTransmuxer(), r4 ? (this.audioSwitch = true, this.state = te) : this.state = Zt, this.tick();
          }, n2.onManifestLoading = function() {
            this.mainDetails = null, this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = false;
          }, n2.onLevelLoaded = function(t4, e4) {
            this.mainDetails = e4.details, null !== this.cachedTrackLoadedData && (this.hls.trigger(s.Events.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null);
          }, n2.onAudioTrackLoaded = function(t4, e4) {
            var r4;
            if (null != this.mainDetails) {
              var i4 = this.levels, n3 = e4.details, a2 = e4.id;
              if (i4) {
                this.log("Track " + a2 + " loaded [" + n3.startSN + "," + n3.endSN + "],duration:" + n3.totalduration);
                var s2 = i4[a2], o2 = 0;
                if (n3.live || null !== (r4 = s2.details) && void 0 !== r4 && r4.live) {
                  var l2 = this.mainDetails;
                  if (n3.fragments[0] || (n3.deltaUpdateFailed = true), n3.deltaUpdateFailed || !l2)
                    return;
                  !s2.details && n3.hasProgramDateTime && l2.hasProgramDateTime ? (Vt(n3, l2), o2 = n3.fragments[0].start) : o2 = this.alignPlaylists(n3, s2.details);
                }
                s2.details = n3, this.levelLastLoaded = a2, this.startFragRequested || !this.mainDetails && n3.live || this.setStartPosition(s2.details, o2), this.state !== ne || this.waitForCdnTuneIn(n3) || (this.state = te), this.tick();
              } else
                this.warn("Audio tracks were reset while loading level " + a2);
            } else
              this.cachedTrackLoadedData = e4;
          }, n2._handleFragmentLoadProgress = function(t4) {
            var e4, r4 = t4.frag, i4 = t4.part, n3 = t4.payload, a2 = this.config, s2 = this.trackId, o2 = this.levels;
            if (o2) {
              var l2 = o2[s2], u2 = l2.details, d2 = a2.defaultAudioCodec || l2.audioCodec || "mp4a.40.2", h2 = this.transmuxer;
              h2 || (h2 = this.transmuxer = new Ae(this.hls, V.PlaylistLevelType.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
              var c2 = this.initPTS[r4.cc], f2 = null === (e4 = r4.initSegment) || void 0 === e4 ? void 0 : e4.data;
              if (void 0 !== c2) {
                var g2 = i4 ? i4.index : -1, v2 = -1 !== g2, p2 = new Gt(r4.level, r4.sn, r4.stats.chunkCount, n3.byteLength, g2, v2);
                h2.push(n3, f2, d2, "", r4, i4, u2.totalduration, false, p2, c2);
              } else
                this.log("Unknown video PTS for cc " + r4.cc + ", waiting for video PTS before demuxing audio frag " + r4.sn + " of [" + u2.startSN + " ," + u2.endSN + "],track " + s2), (this.waitingData = this.waitingData || { frag: r4, part: i4, cache: new Oe(), complete: false }).cache.push(new Uint8Array(n3)), this.waitingVideoCC = this.videoTrackCC, this.state = ue;
            } else
              this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, n2._handleFragmentLoadComplete = function(e4) {
            this.waitingData ? this.waitingData.complete = true : t3.prototype._handleFragmentLoadComplete.call(this, e4);
          }, n2.onBufferReset = function() {
            this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = false;
          }, n2.onBufferCreated = function(t4, e4) {
            var r4 = e4.tracks.audio;
            r4 && (this.mediaBuffer = r4.buffer || null), e4.tracks.video && (this.videoBuffer = e4.tracks.video.buffer || null);
          }, n2.onFragBuffered = function(t4, e4) {
            var r4, i4 = e4.frag, n3 = e4.part;
            i4.type === V.PlaylistLevelType.AUDIO ? this.fragContextChanged(i4) ? this.warn("Fragment " + i4.sn + (n3 ? " p: " + n3.index : "") + " of level " + i4.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + this.audioSwitch) : ("initSegment" !== i4.sn && (this.fragPrevious = i4, this.audioSwitch && (this.audioSwitch = false, this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: this.trackId }))), this.fragBufferedComplete(i4, n3)) : this.loadedmetadata || i4.type !== V.PlaylistLevelType.MAIN || null !== (r4 = this.videoBuffer || this.media) && void 0 !== r4 && r4.buffered.length && (this.loadedmetadata = true);
          }, n2.onError = function(e4, r4) {
            if (r4.type !== o.ErrorTypes.KEY_SYSTEM_ERROR)
              switch (r4.details) {
                case o.ErrorDetails.FRAG_LOAD_ERROR:
                case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                case o.ErrorDetails.FRAG_PARSING_ERROR:
                case o.ErrorDetails.KEY_LOAD_ERROR:
                case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                  this.onFragmentOrKeyLoadError(V.PlaylistLevelType.AUDIO, r4);
                  break;
                case o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                case o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                  this.state !== le && this.state !== Zt && (this.state = r4.fatal ? le : te, this.warn(r4.details + " while loading frag, switching to " + this.state + " state"));
                  break;
                case o.ErrorDetails.BUFFER_FULL_ERROR:
                  if ("audio" === r4.parent && (this.state === ae || this.state === se)) {
                    var i4 = true, n3 = this.getFwdBufferInfo(this.mediaBuffer, V.PlaylistLevelType.AUDIO);
                    n3 && n3.len > 0.5 && (i4 = !this.reduceMaxBufferLength(n3.len)), i4 && (this.warn("Buffer full error also media.currentTime is not buffered, flush audio buffer"), this.fragCurrent = null, t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.resetLoadingState();
                  }
              }
            else
              this.onFragmentOrKeyLoadError(V.PlaylistLevelType.AUDIO, r4);
          }, n2.onBufferFlushed = function(t4, e4) {
            e4.type === v.ElementaryStreamTypes.AUDIO && (this.bufferFlushed = true, this.state === oe && (this.state = te));
          }, n2._handleTransmuxComplete = function(t4) {
            var e4, r4 = "audio", i4 = this.hls, n3 = t4.remuxResult, a2 = t4.chunkMeta, o2 = this.getCurrentContext(a2);
            if (!o2)
              return this.warn("The loading context changed while buffering fragment " + a2.sn + " of level " + a2.level + ". This chunk will not be buffered."), void this.resetStartWhenNotLoaded(a2.level);
            var l2 = o2.frag, u2 = o2.part, d2 = o2.level.details, h2 = n3.audio, c2 = n3.text, f2 = n3.id3, g2 = n3.initSegment;
            if (!this.fragContextChanged(l2) && d2) {
              if (this.state = ae, this.audioSwitch && h2 && this.completeAudioSwitch(), null != g2 && g2.tracks && (this._bufferInitSegment(g2.tracks, l2, a2), i4.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, { frag: l2, id: r4, tracks: g2.tracks })), h2) {
                var p2 = h2.startPTS, m2 = h2.endPTS, y2 = h2.startDTS, E2 = h2.endDTS;
                u2 && (u2.elementaryStreams[v.ElementaryStreamTypes.AUDIO] = { startPTS: p2, endPTS: m2, startDTS: y2, endDTS: E2 }), l2.setElementaryStreamInfo(v.ElementaryStreamTypes.AUDIO, p2, m2, y2, E2), this.bufferFragmentData(h2, l2, u2, a2);
              }
              if (null != f2 && null !== (e4 = f2.samples) && void 0 !== e4 && e4.length) {
                var T2 = xe({ id: r4, frag: l2, details: d2 }, f2);
                i4.trigger(s.Events.FRAG_PARSING_METADATA, T2);
              }
              if (c2) {
                var S2 = xe({ id: r4, frag: l2, details: d2 }, c2);
                i4.trigger(s.Events.FRAG_PARSING_USERDATA, S2);
              }
            }
          }, n2._bufferInitSegment = function(t4, e4, r4) {
            if (this.state === ae) {
              t4.video && delete t4.video;
              var i4 = t4.audio;
              if (i4) {
                i4.levelCodec = i4.codec, i4.id = "audio", this.log("Init audio buffer, container:" + i4.container + ", codecs[parsed]=[" + i4.codec + "]"), this.hls.trigger(s.Events.BUFFER_CODECS, t4);
                var n3 = i4.initSegment;
                if (null != n3 && n3.byteLength) {
                  var a2 = { type: "audio", frag: e4, part: null, chunkMeta: r4, parent: e4.type, data: n3 };
                  this.hls.trigger(s.Events.BUFFER_APPENDING, a2);
                }
                this.tick();
              }
            }
          }, n2.loadFragment = function(e4, r4, i4) {
            var n3 = this.fragmentTracker.getState(e4);
            this.fragCurrent = e4, (this.audioSwitch || n3 === St.NOT_LOADED || n3 === St.PARTIAL) && ("initSegment" === e4.sn ? this._loadInitSegment(e4, r4) : r4.live && !(0, a.isFiniteNumber)(this.initPTS[e4.cc]) ? (this.log("Waiting for video PTS in continuity counter " + e4.cc + " of live stream before loading audio fragment " + e4.sn + " of level " + this.trackId), this.state = ue) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e4, r4, i4)));
          }, n2.completeAudioSwitch = function() {
            var e4 = this.hls, r4 = this.media, i4 = this.trackId;
            r4 && (this.log("Switching audio track : flushing all audio"), t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.audioSwitch = false, e4.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: i4 });
          }, i3;
        }(he);
        const Ne = Me;
        function Ue(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function Be(t3, e3) {
          return Be = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Be(t3, e3);
        }
        const Ge = function(t3) {
          var e3, r3;
          function i3(e4) {
            var r4;
            return (r4 = t3.call(this, e4, "[audio-track-controller]") || this).tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.trackName = "", r4.selectDefaultTrack = true, r4.registerListeners(), r4;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Be(e3, r3);
          var n2, a2, l2 = i3.prototype;
          return l2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, l2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(s.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, l2.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, t3.prototype.destroy.call(this);
          }, l2.onManifestLoading = function() {
            this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.trackName = "", this.selectDefaultTrack = true;
          }, l2.onManifestParsed = function(t4, e4) {
            this.tracks = e4.audioTracks || [];
          }, l2.onAudioTrackLoaded = function(t4, e4) {
            var r4 = e4.id, i4 = e4.details, n3 = this.tracksInGroup[r4];
            if (n3) {
              var a3 = n3.details;
              n3.details = e4.details, this.log("audioTrack " + r4 + " loaded [" + i4.startSN + "-" + i4.endSN + "]"), r4 === this.trackId && (this.retryCount = 0, this.playlistLoaded(r4, e4, a3));
            } else
              this.warn("Invalid audio track id " + r4);
          }, l2.onLevelLoading = function(t4, e4) {
            this.switchLevel(e4.level);
          }, l2.onLevelSwitching = function(t4, e4) {
            this.switchLevel(e4.level);
          }, l2.switchLevel = function(t4) {
            var e4 = this.hls.levels[t4];
            if (null != e4 && e4.audioGroupIds) {
              var r4 = e4.audioGroupIds[e4.urlId];
              if (this.groupId !== r4) {
                this.groupId = r4;
                var i4 = this.tracks.filter(function(t5) {
                  return !r4 || t5.groupId === r4;
                });
                this.selectDefaultTrack && !i4.some(function(t5) {
                  return t5.default;
                }) && (this.selectDefaultTrack = false), this.tracksInGroup = i4;
                var n3 = { audioTracks: i4 };
                this.log("Updating audio tracks, " + i4.length + ' track(s) found in "' + r4 + '" group-id'), this.hls.trigger(s.Events.AUDIO_TRACKS_UPDATED, n3), this.selectInitialTrack();
              }
            }
          }, l2.onError = function(e4, r4) {
            t3.prototype.onError.call(this, e4, r4), !r4.fatal && r4.context && r4.context.type === V.PlaylistContextType.AUDIO_TRACK && r4.context.id === this.trackId && r4.context.groupId === this.groupId && this.retryLoadingOrFail(r4);
          }, l2.setAudioTrack = function(t4) {
            var e4 = this.tracksInGroup;
            if (t4 < 0 || t4 >= e4.length)
              this.warn("Invalid id passed to audio-track controller");
            else {
              this.clearTimer();
              var r4 = e4[this.trackId];
              this.log("Now switching to audio-track index " + t4);
              var i4 = e4[t4], n3 = i4.id, a3 = i4.groupId, o2 = void 0 === a3 ? "" : a3, l3 = i4.name, u2 = i4.type, d2 = i4.url;
              if (this.trackId = t4, this.trackName = l3, this.selectDefaultTrack = false, this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHING, { id: n3, groupId: o2, name: l3, type: u2, url: d2 }), !i4.details || i4.details.live) {
                var h2 = this.switchParams(i4.url, null == r4 ? void 0 : r4.details);
                this.loadPlaylist(h2);
              }
            }
          }, l2.selectInitialTrack = function() {
            this.tracksInGroup;
            var t4 = this.trackName, e4 = this.findTrackId(t4) || this.findTrackId();
            -1 !== e4 ? this.setAudioTrack(e4) : (this.warn("No track found for running audio group-ID: " + this.groupId), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, fatal: true }));
          }, l2.findTrackId = function(t4) {
            for (var e4 = this.tracksInGroup, r4 = 0; r4 < e4.length; r4++) {
              var i4 = e4[r4];
              if ((!this.selectDefaultTrack || i4.default) && (!t4 || t4 === i4.name))
                return i4.id;
            }
            return -1;
          }, l2.loadPlaylist = function(e4) {
            t3.prototype.loadPlaylist.call(this);
            var r4 = this.tracksInGroup[this.trackId];
            if (this.shouldLoadTrack(r4)) {
              var i4 = r4.id, n3 = r4.groupId, a3 = r4.url;
              if (e4)
                try {
                  a3 = e4.addDirectives(a3);
                } catch (t4) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
                }
              this.log("loading audio-track playlist for id: " + i4), this.clearTimer(), this.hls.trigger(s.Events.AUDIO_TRACK_LOADING, { url: a3, id: i4, groupId: n3, deliveryDirectives: e4 || null });
            }
          }, n2 = i3, (a2 = [{ key: "audioTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "audioTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false, this.setAudioTrack(t4);
          } }]) && Ue(n2.prototype, a2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(mt);
        function Ke(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function He(t3, e3) {
          return He = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, He(t3, e3);
        }
        var je = function(t3) {
          var e3, r3;
          function i3(e4, r4, i4) {
            var n3;
            return (n3 = t3.call(this, e4, r4, i4, "[subtitle-stream-controller]") || this).levels = [], n3.currentTrackId = -1, n3.tracksBuffered = [], n3.mainDetails = null, n3._registerListeners(), n3;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, He(e3, r3);
          var n2, a2, o2 = i3.prototype;
          return o2.onHandlerDestroying = function() {
            this._unregisterListeners(), this.mainDetails = null;
          }, o2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(s.Events.ERROR, this.onError, this), t4.on(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(s.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.on(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(s.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, o2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(s.Events.ERROR, this.onError, this), t4.off(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(s.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.off(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(s.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
          }, o2.startLoad = function(t4) {
            this.stopLoad(), this.state = te, this.setInterval(500), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, o2.onManifestLoading = function() {
            this.mainDetails = null, this.fragmentTracker.removeAllFragments();
          }, o2.onLevelLoaded = function(t4, e4) {
            this.mainDetails = e4.details;
          }, o2.onSubtitleFragProcessed = function(t4, e4) {
            var r4 = e4.frag, i4 = e4.success;
            if (this.fragPrevious = r4, this.state = te, i4) {
              var n3 = this.tracksBuffered[this.currentTrackId];
              if (n3) {
                for (var a3, s2 = r4.start, o3 = 0; o3 < n3.length; o3++)
                  if (s2 >= n3[o3].start && s2 <= n3[o3].end) {
                    a3 = n3[o3];
                    break;
                  }
                var l2 = r4.start + r4.duration;
                a3 ? a3.end = l2 : (a3 = { start: s2, end: l2 }, n3.push(a3)), this.fragmentTracker.fragBuffered(r4);
              }
            }
          }, o2.onBufferFlushing = function(t4, e4) {
            var r4 = e4.startOffset, i4 = e4.endOffset;
            if (0 === r4 && i4 !== Number.POSITIVE_INFINITY) {
              var n3 = this.currentTrackId, a3 = this.levels;
              if (!a3.length || !a3[n3] || !a3[n3].details)
                return;
              var s2 = i4 - a3[n3].details.targetduration;
              if (s2 <= 0)
                return;
              e4.endOffsetSubtitles = Math.max(0, s2), this.tracksBuffered.forEach(function(t5) {
                for (var e5 = 0; e5 < t5.length; )
                  if (t5[e5].end <= s2)
                    t5.shift();
                  else {
                    if (!(t5[e5].start < s2))
                      break;
                    t5[e5].start = s2, e5++;
                  }
              }), this.fragmentTracker.removeFragmentsInRange(r4, s2, V.PlaylistLevelType.SUBTITLE);
            }
          }, o2.onFragBuffered = function(t4, e4) {
            var r4;
            this.loadedmetadata || e4.frag.type !== V.PlaylistLevelType.MAIN || null !== (r4 = this.media) && void 0 !== r4 && r4.buffered.length && (this.loadedmetadata = true);
          }, o2.onError = function(t4, e4) {
            var r4 = e4.frag;
            r4 && r4.type === V.PlaylistLevelType.SUBTITLE && (this.fragCurrent && this.fragCurrent.abortRequests(), this.state = te);
          }, o2.onSubtitleTracksUpdated = function(t4, e4) {
            var r4 = this, i4 = e4.subtitleTracks;
            this.tracksBuffered = [], this.levels = i4.map(function(t5) {
              return new ut(t5);
            }), this.fragmentTracker.removeAllFragments(), this.fragPrevious = null, this.levels.forEach(function(t5) {
              r4.tracksBuffered[t5.id] = [];
            }), this.mediaBuffer = null;
          }, o2.onSubtitleTrackSwitch = function(t4, e4) {
            if (this.currentTrackId = e4.id, this.levels.length && -1 !== this.currentTrackId) {
              var r4 = this.levels[this.currentTrackId];
              null != r4 && r4.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, r4 && this.setInterval(500);
            } else
              this.clearInterval();
          }, o2.onSubtitleTrackLoaded = function(t4, e4) {
            var r4, i4 = e4.details, n3 = e4.id, a3 = this.currentTrackId, s2 = this.levels;
            if (s2.length) {
              var o3 = s2[a3];
              if (!(n3 >= s2.length || n3 !== a3) && o3) {
                this.mediaBuffer = this.mediaBufferTimeRanges;
                var l2 = 0;
                if (i4.live || null !== (r4 = o3.details) && void 0 !== r4 && r4.live) {
                  var u2 = this.mainDetails;
                  if (i4.deltaUpdateFailed || !u2)
                    return;
                  var d2 = u2.fragments[0];
                  o3.details ? 0 === (l2 = this.alignPlaylists(i4, o3.details)) && d2 && pt(i4, l2 = d2.start) : i4.hasProgramDateTime && u2.hasProgramDateTime ? (Vt(i4, u2), l2 = i4.fragments[0].start) : d2 && pt(i4, l2 = d2.start);
                }
                o3.details = i4, this.levelLastLoaded = n3, this.startFragRequested || !this.mainDetails && i4.live || this.setStartPosition(o3.details, l2), this.tick(), i4.live && !this.fragCurrent && this.media && this.state === te && (Wt(null, i4.fragments, this.media.currentTime, 0) || (this.warn("Subtitle playlist not aligned with playback"), o3.details = void 0));
              }
            }
          }, o2._handleFragmentLoadComplete = function(t4) {
            var e4 = this, r4 = t4.frag, i4 = t4.payload, n3 = r4.decryptdata, a3 = this.hls;
            if (!this.fragContextChanged(r4) && i4 && i4.byteLength > 0 && n3 && n3.key && n3.iv && "AES-128" === n3.method) {
              var o3 = performance.now();
              this.decrypter.decrypt(new Uint8Array(i4), n3.key.buffer, n3.iv.buffer).then(function(t5) {
                var e5 = performance.now();
                a3.trigger(s.Events.FRAG_DECRYPTED, { frag: r4, payload: t5, stats: { tstart: o3, tdecrypt: e5 } });
              }).catch(function(t5) {
                e4.warn(t5.name + ": " + t5.message), e4.state = te;
              });
            }
          }, o2.doTick = function() {
            if (this.media) {
              if (this.state === te) {
                var t4 = this.currentTrackId, e4 = this.levels;
                if (!e4.length || !e4[t4] || !e4[t4].details)
                  return;
                var r4 = e4[t4].details, i4 = r4.targetduration, n3 = this.config, a3 = this.getLoadPosition(), s2 = Bt.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], a3 - i4, n3.maxBufferHole), o3 = s2.end, l2 = s2.len, u2 = this.getFwdBufferInfo(this.media, V.PlaylistLevelType.MAIN);
                if (l2 > this.getMaxBufferLength(null == u2 ? void 0 : u2.len) + i4)
                  return;
                var d2 = r4.fragments, h2 = d2.length, c2 = r4.edge, f2 = null, g2 = this.fragPrevious;
                if (o3 < c2) {
                  var v2 = n3.maxFragLookUpTolerance;
                  !(f2 = Wt(g2, d2, Math.max(d2[0].start, o3), v2)) && g2 && g2.start < d2[0].start && (f2 = d2[0]);
                } else
                  f2 = d2[h2 - 1];
                if (!f2)
                  return;
                f2 = this.mapToInitFragWhenRequired(f2), this.fragmentTracker.getState(f2) === St.NOT_LOADED && this.loadFragment(f2, r4, o3);
              }
            } else
              this.state = te;
          }, o2.getMaxBufferLength = function(e4) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e4 ? Math.max(r4, e4) : r4;
          }, o2.loadFragment = function(e4, r4, i4) {
            this.fragCurrent = e4, "initSegment" === e4.sn ? this._loadInitSegment(e4, r4) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e4, r4, i4));
          }, n2 = i3, (a2 = [{ key: "mediaBufferTimeRanges", get: function() {
            return new Ve(this.tracksBuffered[this.currentTrackId] || []);
          } }]) && Ke(n2.prototype, a2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(he), Ve = function(t3) {
          this.buffered = void 0;
          var e3 = function(e4, r3, i3) {
            if ((r3 >>>= 0) > i3 - 1)
              throw new DOMException("Failed to execute '" + e4 + "' on 'TimeRanges': The index provided (" + r3 + ") is greater than the maximum bound (" + i3 + ")");
            return t3[r3][e4];
          };
          this.buffered = { get length() {
            return t3.length;
          }, end: function(r3) {
            return e3("end", r3, t3.length);
          }, start: function(r3) {
            return e3("start", r3, t3.length);
          } };
        };
        function Ye(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function We(t3, e3) {
          return We = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, We(t3, e3);
        }
        function qe(t3) {
          for (var e3 = [], r3 = 0; r3 < t3.length; r3++) {
            var i3 = t3[r3];
            "subtitles" === i3.kind && i3.label && e3.push(t3[r3]);
          }
          return e3;
        }
        const Xe = function(t3) {
          var e3, r3;
          function i3(e4) {
            var r4;
            return (r4 = t3.call(this, e4, "[subtitle-track-controller]") || this).media = null, r4.tracks = [], r4.groupId = null, r4.tracksInGroup = [], r4.trackId = -1, r4.selectDefaultTrack = true, r4.queuedDefaultTrack = -1, r4.trackChangeListener = function() {
              return r4.onTextTracksChanged();
            }, r4.asyncPollTrackChange = function() {
              return r4.pollTrackChange(0);
            }, r4.useTextTrackPolling = false, r4.subtitlePollingInterval = -1, r4._subtitleDisplay = true, r4.registerListeners(), r4;
          }
          r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, We(e3, r3);
          var n2, a2, o2 = i3.prototype;
          return o2.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.trackChangeListener = this.asyncPollTrackChange = null, t3.prototype.destroy.call(this);
          }, o2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(s.Events.ERROR, this.onError, this);
          }, o2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this), t4.off(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(s.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(s.Events.ERROR, this.onError, this);
          }, o2.onMediaAttached = function(t4, e4) {
            this.media = e4.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange));
          }, o2.pollTrackChange = function(t4) {
            self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, t4);
          }, o2.onMediaDetaching = function() {
            this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), qe(this.media.textTracks).forEach(function(t4) {
              z(t4);
            }), this.subtitleTrack = -1, this.media = null);
          }, o2.onManifestLoading = function() {
            this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.selectDefaultTrack = true;
          }, o2.onManifestParsed = function(t4, e4) {
            this.tracks = e4.subtitleTracks;
          }, o2.onSubtitleTrackLoaded = function(t4, e4) {
            var r4 = e4.id, i4 = e4.details, n3 = this.trackId, a3 = this.tracksInGroup[n3];
            if (a3) {
              var s2 = a3.details;
              a3.details = e4.details, this.log("subtitle track " + r4 + " loaded [" + i4.startSN + "-" + i4.endSN + "]"), r4 === this.trackId && (this.retryCount = 0, this.playlistLoaded(r4, e4, s2));
            } else
              this.warn("Invalid subtitle track id " + r4);
          }, o2.onLevelLoading = function(t4, e4) {
            this.switchLevel(e4.level);
          }, o2.onLevelSwitching = function(t4, e4) {
            this.switchLevel(e4.level);
          }, o2.switchLevel = function(t4) {
            var e4 = this.hls.levels[t4];
            if (null != e4 && e4.textGroupIds) {
              var r4 = e4.textGroupIds[e4.urlId];
              if (this.groupId !== r4) {
                var i4 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0, n3 = this.tracks.filter(function(t5) {
                  return !r4 || t5.groupId === r4;
                });
                this.tracksInGroup = n3;
                var a3 = this.findTrackId(null == i4 ? void 0 : i4.name) || this.findTrackId();
                this.groupId = r4;
                var o3 = { subtitleTracks: n3 };
                this.log("Updating subtitle tracks, " + n3.length + ' track(s) found in "' + r4 + '" group-id'), this.hls.trigger(s.Events.SUBTITLE_TRACKS_UPDATED, o3), -1 !== a3 && this.setSubtitleTrack(a3, i4);
              }
            }
          }, o2.findTrackId = function(t4) {
            for (var e4 = this.tracksInGroup, r4 = 0; r4 < e4.length; r4++) {
              var i4 = e4[r4];
              if ((!this.selectDefaultTrack || i4.default) && (!t4 || t4 === i4.name))
                return i4.id;
            }
            return -1;
          }, o2.onError = function(e4, r4) {
            t3.prototype.onError.call(this, e4, r4), !r4.fatal && r4.context && r4.context.type === V.PlaylistContextType.SUBTITLE_TRACK && r4.context.id === this.trackId && r4.context.groupId === this.groupId && this.retryLoadingOrFail(r4);
          }, o2.loadPlaylist = function(e4) {
            t3.prototype.loadPlaylist.call(this);
            var r4 = this.tracksInGroup[this.trackId];
            if (this.shouldLoadTrack(r4)) {
              var i4 = r4.id, n3 = r4.groupId, a3 = r4.url;
              if (e4)
                try {
                  a3 = e4.addDirectives(a3);
                } catch (t4) {
                  this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
                }
              this.log("Loading subtitle playlist for id " + i4), this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADING, { url: a3, id: i4, groupId: n3, deliveryDirectives: e4 || null });
            }
          }, o2.toggleTrackModes = function(t4) {
            var e4 = this, r4 = this.media, i4 = this.trackId;
            if (r4) {
              var n3 = qe(r4.textTracks), a3 = n3.filter(function(t5) {
                return t5.groupId === e4.groupId;
              });
              if (-1 === t4)
                [].slice.call(n3).forEach(function(t5) {
                  t5.mode = "disabled";
                });
              else {
                var s2 = a3[i4];
                s2 && (s2.mode = "disabled");
              }
              var o3 = a3[t4];
              o3 && (o3.mode = this.subtitleDisplay ? "showing" : "hidden");
            }
          }, o2.setSubtitleTrack = function(t4, e4) {
            var r4, i4 = this.tracksInGroup;
            if (this.media) {
              if (this.trackId !== t4 && this.toggleTrackModes(t4), !(this.trackId === t4 && (-1 === t4 || null !== (r4 = i4[t4]) && void 0 !== r4 && r4.details) || t4 < -1 || t4 >= i4.length)) {
                this.clearTimer();
                var n3 = i4[t4];
                if (this.log("Switching to subtitle track " + t4), this.trackId = t4, n3) {
                  var a3 = n3.id, o3 = n3.groupId, l2 = void 0 === o3 ? "" : o3, u2 = n3.name, d2 = n3.type, h2 = n3.url;
                  this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, { id: a3, groupId: l2, name: u2, type: d2, url: h2 });
                  var c2 = this.switchParams(n3.url, null == e4 ? void 0 : e4.details);
                  this.loadPlaylist(c2);
                } else
                  this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, { id: t4 });
              }
            } else
              this.queuedDefaultTrack = t4;
          }, o2.onTextTracksChanged = function() {
            if (this.useTextTrackPolling || self.clearInterval(this.subtitlePollingInterval), this.media && this.hls.config.renderTextTracksNatively) {
              for (var t4 = -1, e4 = qe(this.media.textTracks), r4 = 0; r4 < e4.length; r4++)
                if ("hidden" === e4[r4].mode)
                  t4 = r4;
                else if ("showing" === e4[r4].mode) {
                  t4 = r4;
                  break;
                }
              this.subtitleTrack !== t4 && (this.subtitleTrack = t4);
            }
          }, n2 = i3, (a2 = [{ key: "subtitleDisplay", get: function() {
            return this._subtitleDisplay;
          }, set: function(t4) {
            this._subtitleDisplay = t4, this.trackId > -1 && this.toggleTrackModes(this.trackId);
          } }, { key: "subtitleTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "subtitleTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false;
            var e4 = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
            this.setSubtitleTrack(t4, e4);
          } }]) && Ye(n2.prototype, a2), Object.defineProperty(n2, "prototype", { writable: false }), i3;
        }(mt);
        var ze, Qe = function() {
          function t3(t4) {
            this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = t4;
          }
          var e3 = t3.prototype;
          return e3.append = function(t4, e4) {
            var r3 = this.queues[e4];
            r3.push(t4), 1 === r3.length && this.buffers[e4] && this.executeNext(e4);
          }, e3.insertAbort = function(t4, e4) {
            this.queues[e4].unshift(t4), this.executeNext(e4);
          }, e3.appendBlocker = function(t4) {
            var e4, r3 = new Promise(function(t5) {
              e4 = t5;
            }), i3 = { execute: e4, onStart: function() {
            }, onComplete: function() {
            }, onError: function() {
            } };
            return this.append(i3, t4), r3;
          }, e3.executeNext = function(t4) {
            var e4 = this.buffers, r3 = this.queues, i3 = e4[t4], n2 = r3[t4];
            if (n2.length) {
              var a2 = n2[0];
              try {
                a2.execute();
              } catch (e5) {
                l.logger.warn("[buffer-operation-queue]: Unhandled exception executing the current operation"), a2.onError(e5), i3 && i3.updating || (n2.shift(), this.executeNext(t4));
              }
            }
          }, e3.shiftAndExecuteNext = function(t4) {
            this.queues[t4].shift(), this.executeNext(t4);
          }, e3.current = function(t4) {
            return this.queues[t4][0];
          }, t3;
        }(), $e = ce(), Je = /([ha]vc.)(?:\.[^.,]+)+/, Ze = function() {
          function t3(t4) {
            var e4 = this;
            this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendError = 0, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this._onMediaSourceOpen = function() {
              var t5 = e4.media, r3 = e4.mediaSource;
              l.logger.log("[buffer-controller]: Media source opened"), t5 && (t5.removeEventListener("emptied", e4._onMediaEmptied), e4.updateMediaElementDuration(), e4.hls.trigger(s.Events.MEDIA_ATTACHED, { media: t5 })), r3 && r3.removeEventListener("sourceopen", e4._onMediaSourceOpen), e4.checkPendingTracks();
            }, this._onMediaSourceClose = function() {
              l.logger.log("[buffer-controller]: Media source closed");
            }, this._onMediaSourceEnded = function() {
              l.logger.log("[buffer-controller]: Media source ended");
            }, this._onMediaEmptied = function() {
              var t5 = e4.media, r3 = e4._objectUrl;
              t5 && t5.src !== r3 && l.logger.error("Media element src was set while attaching MediaSource (" + r3 + " > " + t5.src + ")");
            }, this.hls = t4, this._initSourceBuffer(), this.registerListeners();
          }
          var e3 = t3.prototype;
          return e3.hasSourceTypes = function() {
            return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
          }, e3.destroy = function() {
            this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null;
          }, e3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.on(s.Events.BUFFER_APPENDING, this.onBufferAppending, this), t4.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(s.Events.BUFFER_EOS, this.onBufferEos, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), t4.on(s.Events.FRAG_PARSED, this.onFragParsed, this), t4.on(s.Events.FRAG_CHANGED, this.onFragChanged, this);
          }, e3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.BUFFER_RESET, this.onBufferReset, this), t4.off(s.Events.BUFFER_APPENDING, this.onBufferAppending, this), t4.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(s.Events.BUFFER_EOS, this.onBufferEos, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this), t4.off(s.Events.FRAG_PARSED, this.onFragParsed, this), t4.off(s.Events.FRAG_CHANGED, this.onFragChanged, this);
          }, e3._initSourceBuffer = function() {
            this.sourceBuffer = {}, this.operationQueue = new Qe(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] }, this.lastMpegAudioChunk = null;
          }, e3.onManifestParsed = function(t4, e4) {
            var r3 = 2;
            (e4.audio && !e4.video || !e4.altAudio) && (r3 = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r3, this.details = null, l.logger.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
          }, e3.onMediaAttaching = function(t4, e4) {
            var r3 = this.media = e4.media;
            if (r3 && $e) {
              var i3 = this.mediaSource = new $e();
              i3.addEventListener("sourceopen", this._onMediaSourceOpen), i3.addEventListener("sourceended", this._onMediaSourceEnded), i3.addEventListener("sourceclose", this._onMediaSourceClose), r3.src = self.URL.createObjectURL(i3), this._objectUrl = r3.src, r3.addEventListener("emptied", this._onMediaEmptied);
            }
          }, e3.onMediaDetaching = function() {
            var t4 = this.media, e4 = this.mediaSource, r3 = this._objectUrl;
            if (e4) {
              if (l.logger.log("[buffer-controller]: media source detaching"), "open" === e4.readyState)
                try {
                  e4.endOfStream();
                } catch (t5) {
                  l.logger.warn("[buffer-controller]: onMediaDetaching: " + t5.message + " while calling endOfStream");
                }
              this.onBufferReset(), e4.removeEventListener("sourceopen", this._onMediaSourceOpen), e4.removeEventListener("sourceended", this._onMediaSourceEnded), e4.removeEventListener("sourceclose", this._onMediaSourceClose), t4 && (t4.removeEventListener("emptied", this._onMediaEmptied), r3 && self.URL.revokeObjectURL(r3), t4.src === r3 ? (t4.removeAttribute("src"), t4.load()) : l.logger.warn("[buffer-controller]: media.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {};
            }
            this.hls.trigger(s.Events.MEDIA_DETACHED, void 0);
          }, e3.onBufferReset = function() {
            var t4 = this;
            this.getSourceBufferTypes().forEach(function(e4) {
              var r3 = t4.sourceBuffer[e4];
              try {
                r3 && (t4.removeBufferListeners(e4), t4.mediaSource && t4.mediaSource.removeSourceBuffer(r3), t4.sourceBuffer[e4] = void 0);
              } catch (t5) {
                l.logger.warn("[buffer-controller]: Failed to reset the " + e4 + " buffer", t5);
              }
            }), this._initSourceBuffer();
          }, e3.onBufferCodecs = function(t4, e4) {
            var r3 = this, i3 = this.getSourceBufferTypes().length;
            Object.keys(e4).forEach(function(t5) {
              if (i3) {
                var n2 = r3.tracks[t5];
                if (n2 && "function" == typeof n2.buffer.changeType) {
                  var a2 = e4[t5], s2 = a2.id, o2 = a2.codec, u2 = a2.levelCodec, d2 = a2.container, h2 = a2.metadata, c2 = (n2.levelCodec || n2.codec).replace(Je, "$1"), f2 = (u2 || o2).replace(Je, "$1");
                  if (c2 !== f2) {
                    var g2 = d2 + ";codecs=" + (u2 || o2);
                    r3.appendChangeType(t5, g2), l.logger.log("[buffer-controller]: switching codec " + c2 + " to " + f2), r3.tracks[t5] = { buffer: n2.buffer, codec: o2, container: d2, levelCodec: u2, metadata: h2, id: s2 };
                  }
                }
              } else
                r3.pendingTracks[t5] = e4[t5];
            }), i3 || (this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0), this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks());
          }, e3.appendChangeType = function(t4, e4) {
            var r3 = this, i3 = this.operationQueue, n2 = { execute: function() {
              var n3 = r3.sourceBuffer[t4];
              n3 && (l.logger.log("[buffer-controller]: changing " + t4 + " sourceBuffer type to " + e4), n3.changeType(e4)), i3.shiftAndExecuteNext(t4);
            }, onStart: function() {
            }, onComplete: function() {
            }, onError: function(e5) {
              l.logger.warn("[buffer-controller]: Failed to change " + t4 + " SourceBuffer type", e5);
            } };
            i3.append(n2, t4);
          }, e3.onBufferAppending = function(t4, e4) {
            var r3 = this, i3 = this.hls, n2 = this.operationQueue, a2 = this.tracks, u2 = e4.data, d2 = e4.type, h2 = e4.frag, c2 = e4.part, f2 = e4.chunkMeta, g2 = f2.buffering[d2], v2 = self.performance.now();
            g2.start = v2;
            var p2 = h2.stats.buffering, m2 = c2 ? c2.stats.buffering : null;
            0 === p2.start && (p2.start = v2), m2 && 0 === m2.start && (m2.start = v2);
            var y2 = a2.audio, E2 = false;
            "audio" === d2 && "audio/mpeg" === (null == y2 ? void 0 : y2.container) && (E2 = !this.lastMpegAudioChunk || 1 === f2.id || this.lastMpegAudioChunk.sn !== f2.sn, this.lastMpegAudioChunk = f2);
            var T2 = h2.start, S2 = { execute: function() {
              if (g2.executeStart = self.performance.now(), E2) {
                var t5 = r3.sourceBuffer[d2];
                if (t5) {
                  var e5 = T2 - t5.timestampOffset;
                  Math.abs(e5) >= 0.1 && (l.logger.log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + T2 + " (delta: " + e5 + ") sn: " + h2.sn + ")"), t5.timestampOffset = T2);
                }
              }
              r3.appendExecutor(u2, d2);
            }, onStart: function() {
            }, onComplete: function() {
              var t5 = self.performance.now();
              g2.executeEnd = g2.end = t5, 0 === p2.first && (p2.first = t5), m2 && 0 === m2.first && (m2.first = t5);
              var e5 = r3.sourceBuffer, i4 = {};
              for (var n3 in e5)
                i4[n3] = Bt.getBuffered(e5[n3]);
              r3.appendError = 0, r3.hls.trigger(s.Events.BUFFER_APPENDED, { type: d2, frag: h2, part: c2, chunkMeta: f2, parent: h2.type, timeRanges: i4 });
            }, onError: function(t5) {
              l.logger.error("[buffer-controller]: Error encountered while trying to append to the " + d2 + " SourceBuffer", t5);
              var e5 = { type: o.ErrorTypes.MEDIA_ERROR, parent: h2.type, details: o.ErrorDetails.BUFFER_APPEND_ERROR, err: t5, fatal: false };
              t5.code === DOMException.QUOTA_EXCEEDED_ERR ? e5.details = o.ErrorDetails.BUFFER_FULL_ERROR : (r3.appendError++, e5.details = o.ErrorDetails.BUFFER_APPEND_ERROR, r3.appendError > i3.config.appendErrorMaxRetry && (l.logger.error("[buffer-controller]: Failed " + i3.config.appendErrorMaxRetry + " times to append segment in sourceBuffer"), e5.fatal = true, i3.stopLoad())), i3.trigger(s.Events.ERROR, e5);
            } };
            n2.append(S2, d2);
          }, e3.onBufferFlushing = function(t4, e4) {
            var r3 = this, i3 = this.operationQueue, n2 = function(t5) {
              return { execute: r3.removeExecutor.bind(r3, t5, e4.startOffset, e4.endOffset), onStart: function() {
              }, onComplete: function() {
                r3.hls.trigger(s.Events.BUFFER_FLUSHED, { type: t5 });
              }, onError: function(e5) {
                l.logger.warn("[buffer-controller]: Failed to remove from " + t5 + " SourceBuffer", e5);
              } };
            };
            e4.type ? i3.append(n2(e4.type), e4.type) : this.getSourceBufferTypes().forEach(function(t5) {
              i3.append(n2(t5), t5);
            });
          }, e3.onFragParsed = function(t4, e4) {
            var r3 = this, i3 = e4.frag, n2 = e4.part, a2 = [], o2 = n2 ? n2.elementaryStreams : i3.elementaryStreams;
            o2[v.ElementaryStreamTypes.AUDIOVIDEO] ? a2.push("audiovideo") : (o2[v.ElementaryStreamTypes.AUDIO] && a2.push("audio"), o2[v.ElementaryStreamTypes.VIDEO] && a2.push("video")), 0 === a2.length && l.logger.warn("Fragments must have at least one ElementaryStreamType set. type: " + i3.type + " level: " + i3.level + " sn: " + i3.sn), this.blockBuffers(function() {
              var t5 = self.performance.now();
              i3.stats.buffering.end = t5, n2 && (n2.stats.buffering.end = t5);
              var e5 = n2 ? n2.stats : i3.stats;
              r3.hls.trigger(s.Events.FRAG_BUFFERED, { frag: i3, part: n2, stats: e5, id: i3.type });
            }, a2);
          }, e3.onFragChanged = function(t4, e4) {
            this.flushBackBuffer();
          }, e3.onBufferEos = function(t4, e4) {
            var r3 = this;
            this.getSourceBufferTypes().reduce(function(t5, i3) {
              var n2 = r3.sourceBuffer[i3];
              return !n2 || e4.type && e4.type !== i3 || (n2.ending = true, n2.ended || (n2.ended = true, l.logger.log("[buffer-controller]: " + i3 + " sourceBuffer now EOS"))), t5 && !(n2 && !n2.ended);
            }, true) && (l.logger.log("[buffer-controller]: Queueing mediaSource.endOfStream()"), this.blockBuffers(function() {
              r3.getSourceBufferTypes().forEach(function(t6) {
                var e5 = r3.sourceBuffer[t6];
                e5 && (e5.ending = false);
              });
              var t5 = r3.mediaSource;
              t5 && "open" === t5.readyState ? (l.logger.log("[buffer-controller]: Calling mediaSource.endOfStream()"), t5.endOfStream()) : t5 && l.logger.info("[buffer-controller]: Could not call mediaSource.endOfStream(). mediaSource.readyState: " + t5.readyState);
            }));
          }, e3.onLevelUpdated = function(t4, e4) {
            var r3 = e4.details;
            r3.fragments.length && (this.details = r3, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration());
          }, e3.flushBackBuffer = function() {
            var t4 = this.hls, e4 = this.details, r3 = this.media, i3 = this.sourceBuffer;
            if (r3 && null !== e4) {
              var n2 = this.getSourceBufferTypes();
              if (n2.length) {
                var o2 = e4.live && null !== t4.config.liveBackBufferLength ? t4.config.liveBackBufferLength : t4.config.backBufferLength;
                if ((0, a.isFiniteNumber)(o2) && !(o2 < 0)) {
                  var u2 = r3.currentTime, d2 = e4.levelTargetDuration, h2 = Math.max(o2, d2), c2 = Math.floor(u2 / d2) * d2 - h2;
                  n2.forEach(function(r4) {
                    var n3 = i3[r4];
                    if (n3) {
                      var a2 = Bt.getBuffered(n3);
                      if (a2.length > 0 && c2 > a2.start(0)) {
                        if (t4.trigger(s.Events.BACK_BUFFER_REACHED, { bufferEnd: c2 }), e4.live)
                          t4.trigger(s.Events.LIVE_BACK_BUFFER_REACHED, { bufferEnd: c2 });
                        else if (n3.ended && a2.end(a2.length - 1) - u2 < 2 * d2)
                          return void l.logger.info("[buffer-controller]: Cannot flush " + r4 + " back buffer while SourceBuffer is in ended state");
                        t4.trigger(s.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: c2, type: r4 });
                      }
                    }
                  });
                }
              }
            }
          }, e3.updateMediaElementDuration = function() {
            if (this.details && this.media && this.mediaSource && "open" === this.mediaSource.readyState) {
              var t4 = this.details, e4 = this.hls, r3 = this.media, i3 = this.mediaSource, n2 = t4.fragments[0].start + t4.totalduration, s2 = r3.duration, o2 = (0, a.isFiniteNumber)(i3.duration) ? i3.duration : 0;
              t4.live && e4.config.liveDurationInfinity ? (l.logger.log("[buffer-controller]: Media Source duration is set to Infinity"), i3.duration = 1 / 0, this.updateSeekableRange(t4)) : (n2 > o2 && n2 > s2 || !(0, a.isFiniteNumber)(s2)) && (l.logger.log("[buffer-controller]: Updating Media Source duration to " + n2.toFixed(3)), i3.duration = n2);
            }
          }, e3.updateSeekableRange = function(t4) {
            var e4 = this.mediaSource, r3 = t4.fragments;
            if (r3.length && t4.live && null != e4 && e4.setLiveSeekableRange) {
              var i3 = Math.max(0, r3[0].start), n2 = Math.max(i3, i3 + t4.totalduration);
              e4.setLiveSeekableRange(i3, n2);
            }
          }, e3.checkPendingTracks = function() {
            var t4 = this.bufferCodecEventsExpected, e4 = this.operationQueue, r3 = this.pendingTracks, i3 = Object.keys(r3).length;
            if (i3 && !t4 || 2 === i3) {
              this.createSourceBuffers(r3), this.pendingTracks = {};
              var n2 = this.getSourceBufferTypes();
              if (0 === n2.length)
                return void this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: true, reason: "could not create source buffer for media codec(s)" });
              n2.forEach(function(t5) {
                e4.executeNext(t5);
              });
            }
          }, e3.createSourceBuffers = function(t4) {
            var e4 = this.sourceBuffer, r3 = this.mediaSource;
            if (!r3)
              throw Error("createSourceBuffers called when mediaSource was null");
            var i3 = 0;
            for (var n2 in t4)
              if (!e4[n2]) {
                var a2 = t4[n2];
                if (!a2)
                  throw Error("source buffer exists for track " + n2 + ", however track does not");
                var u2 = a2.levelCodec || a2.codec, d2 = a2.container + ";codecs=" + u2;
                l.logger.log("[buffer-controller]: creating sourceBuffer(" + d2 + ")");
                try {
                  var h2 = e4[n2] = r3.addSourceBuffer(d2), c2 = n2;
                  this.addBufferListener(c2, "updatestart", this._onSBUpdateStart), this.addBufferListener(c2, "updateend", this._onSBUpdateEnd), this.addBufferListener(c2, "error", this._onSBUpdateError), this.tracks[n2] = { buffer: h2, codec: u2, container: a2.container, levelCodec: a2.levelCodec, metadata: a2.metadata, id: a2.id }, i3++;
                } catch (t5) {
                  l.logger.error("[buffer-controller]: error while trying to add sourceBuffer: " + t5.message), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, error: t5, mimeType: d2 });
                }
              }
            i3 && this.hls.trigger(s.Events.BUFFER_CREATED, { tracks: this.tracks });
          }, e3._onSBUpdateStart = function(t4) {
            this.operationQueue.current(t4).onStart();
          }, e3._onSBUpdateEnd = function(t4) {
            var e4 = this.operationQueue;
            e4.current(t4).onComplete(), e4.shiftAndExecuteNext(t4);
          }, e3._onSBUpdateError = function(t4, e4) {
            l.logger.error("[buffer-controller]: " + t4 + " SourceBuffer error", e4), this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.MEDIA_ERROR, details: o.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });
            var r3 = this.operationQueue.current(t4);
            r3 && r3.onError(e4);
          }, e3.removeExecutor = function(t4, e4, r3) {
            var i3 = this.media, n2 = this.mediaSource, s2 = this.operationQueue, o2 = this.sourceBuffer[t4];
            if (!i3 || !n2 || !o2)
              return l.logger.warn("[buffer-controller]: Attempting to remove from the " + t4 + " SourceBuffer, but it does not exist"), void s2.shiftAndExecuteNext(t4);
            var u2 = (0, a.isFiniteNumber)(i3.duration) ? i3.duration : 1 / 0, d2 = (0, a.isFiniteNumber)(n2.duration) ? n2.duration : 1 / 0, h2 = Math.max(0, e4), c2 = Math.min(r3, u2, d2);
            c2 > h2 && !o2.ending ? (o2.ended = false, l.logger.log("[buffer-controller]: Removing [" + h2 + "," + c2 + "] from the " + t4 + " SourceBuffer"), o2.remove(h2, c2)) : s2.shiftAndExecuteNext(t4);
          }, e3.appendExecutor = function(t4, e4) {
            var r3 = this.operationQueue, i3 = this.sourceBuffer[e4];
            if (!i3)
              return l.logger.warn("[buffer-controller]: Attempting to append to the " + e4 + " SourceBuffer, but it does not exist"), void r3.shiftAndExecuteNext(e4);
            i3.ended = false, i3.appendBuffer(t4);
          }, e3.blockBuffers = function(t4, e4) {
            var r3 = this;
            if (void 0 === e4 && (e4 = this.getSourceBufferTypes()), !e4.length)
              return l.logger.log("[buffer-controller]: Blocking operation requested, but no SourceBuffers exist"), void Promise.resolve().then(t4);
            var i3 = this.operationQueue, n2 = e4.map(function(t5) {
              return i3.appendBlocker(t5);
            });
            Promise.all(n2).then(function() {
              t4(), e4.forEach(function(t5) {
                var e5 = r3.sourceBuffer[t5];
                e5 && e5.updating || i3.shiftAndExecuteNext(t5);
              });
            });
          }, e3.getSourceBufferTypes = function() {
            return Object.keys(this.sourceBuffer);
          }, e3.addBufferListener = function(t4, e4, r3) {
            var i3 = this.sourceBuffer[t4];
            if (i3) {
              var n2 = r3.bind(this, t4);
              this.listeners[t4].push({ event: e4, listener: n2 }), i3.addEventListener(e4, n2);
            }
          }, e3.removeBufferListeners = function(t4) {
            var e4 = this.sourceBuffer[t4];
            e4 && this.listeners[t4].forEach(function(t5) {
              e4.removeEventListener(t5.event, t5.listener);
            });
          }, t3;
        }(), tr = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }, er = function(t3) {
          var e3 = t3;
          return tr.hasOwnProperty(t3) && (e3 = tr[t3]), String.fromCharCode(e3);
        }, rr = 15, ir = 100, nr = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }, ar = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }, sr = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }, or = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }, lr = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"];
        !function(t3) {
          t3[t3.ERROR = 0] = "ERROR", t3[t3.TEXT = 1] = "TEXT", t3[t3.WARNING = 2] = "WARNING", t3[t3.INFO = 2] = "INFO", t3[t3.DEBUG = 3] = "DEBUG", t3[t3.DATA = 3] = "DATA";
        }(ze || (ze = {}));
        var ur = function() {
          function t3() {
            this.time = null, this.verboseLevel = ze.ERROR;
          }
          return t3.prototype.log = function(t4, e3) {
            if (this.verboseLevel >= t4) {
              var r3 = "function" == typeof e3 ? e3() : e3;
              l.logger.log(this.time + " [" + t4 + "] " + r3);
            }
          }, t3;
        }(), dr = function(t3) {
          for (var e3 = [], r3 = 0; r3 < t3.length; r3++)
            e3.push(t3[r3].toString(16));
          return e3;
        }, hr = function() {
          function t3(t4, e4, r3, i3, n2) {
            this.foreground = void 0, this.underline = void 0, this.italics = void 0, this.background = void 0, this.flash = void 0, this.foreground = t4 || "white", this.underline = e4 || false, this.italics = r3 || false, this.background = i3 || "black", this.flash = n2 || false;
          }
          var e3 = t3.prototype;
          return e3.reset = function() {
            this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
          }, e3.setStyles = function(t4) {
            for (var e4 = ["foreground", "underline", "italics", "background", "flash"], r3 = 0; r3 < e4.length; r3++) {
              var i3 = e4[r3];
              t4.hasOwnProperty(i3) && (this[i3] = t4[i3]);
            }
          }, e3.isDefault = function() {
            return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
          }, e3.equals = function(t4) {
            return this.foreground === t4.foreground && this.underline === t4.underline && this.italics === t4.italics && this.background === t4.background && this.flash === t4.flash;
          }, e3.copy = function(t4) {
            this.foreground = t4.foreground, this.underline = t4.underline, this.italics = t4.italics, this.background = t4.background, this.flash = t4.flash;
          }, e3.toString = function() {
            return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
          }, t3;
        }(), cr = function() {
          function t3(t4, e4, r3, i3, n2, a2) {
            this.uchar = void 0, this.penState = void 0, this.uchar = t4 || " ", this.penState = new hr(e4, r3, i3, n2, a2);
          }
          var e3 = t3.prototype;
          return e3.reset = function() {
            this.uchar = " ", this.penState.reset();
          }, e3.setChar = function(t4, e4) {
            this.uchar = t4, this.penState.copy(e4);
          }, e3.setPenState = function(t4) {
            this.penState.copy(t4);
          }, e3.equals = function(t4) {
            return this.uchar === t4.uchar && this.penState.equals(t4.penState);
          }, e3.copy = function(t4) {
            this.uchar = t4.uchar, this.penState.copy(t4.penState);
          }, e3.isEmpty = function() {
            return " " === this.uchar && this.penState.isDefault();
          }, t3;
        }(), fr = function() {
          function t3(t4) {
            this.chars = void 0, this.pos = void 0, this.currPenState = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chars = [];
            for (var e4 = 0; e4 < ir; e4++)
              this.chars.push(new cr());
            this.logger = t4, this.pos = 0, this.currPenState = new hr();
          }
          var e3 = t3.prototype;
          return e3.equals = function(t4) {
            for (var e4 = true, r3 = 0; r3 < ir; r3++)
              if (!this.chars[r3].equals(t4.chars[r3])) {
                e4 = false;
                break;
              }
            return e4;
          }, e3.copy = function(t4) {
            for (var e4 = 0; e4 < ir; e4++)
              this.chars[e4].copy(t4.chars[e4]);
          }, e3.isEmpty = function() {
            for (var t4 = true, e4 = 0; e4 < ir; e4++)
              if (!this.chars[e4].isEmpty()) {
                t4 = false;
                break;
              }
            return t4;
          }, e3.setCursor = function(t4) {
            this.pos !== t4 && (this.pos = t4), this.pos < 0 ? (this.logger.log(ze.DEBUG, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > ir && (this.logger.log(ze.DEBUG, "Too large cursor position " + this.pos), this.pos = ir);
          }, e3.moveCursor = function(t4) {
            var e4 = this.pos + t4;
            if (t4 > 1)
              for (var r3 = this.pos + 1; r3 < e4 + 1; r3++)
                this.chars[r3].setPenState(this.currPenState);
            this.setCursor(e4);
          }, e3.backSpace = function() {
            this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
          }, e3.insertChar = function(t4) {
            var e4 = this;
            t4 >= 144 && this.backSpace();
            var r3 = er(t4);
            this.pos >= ir ? this.logger.log(ze.ERROR, function() {
              return "Cannot insert " + t4.toString(16) + " (" + r3 + ") at position " + e4.pos + ". Skipping it!";
            }) : (this.chars[this.pos].setChar(r3, this.currPenState), this.moveCursor(1));
          }, e3.clearFromPos = function(t4) {
            var e4;
            for (e4 = t4; e4 < ir; e4++)
              this.chars[e4].reset();
          }, e3.clear = function() {
            this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
          }, e3.clearToEndOfRow = function() {
            this.clearFromPos(this.pos);
          }, e3.getTextString = function() {
            for (var t4 = [], e4 = true, r3 = 0; r3 < ir; r3++) {
              var i3 = this.chars[r3].uchar;
              " " !== i3 && (e4 = false), t4.push(i3);
            }
            return e4 ? "" : t4.join("");
          }, e3.setPenStyles = function(t4) {
            this.currPenState.setStyles(t4), this.chars[this.pos].setPenState(this.currPenState);
          }, t3;
        }(), gr = function() {
          function t3(t4) {
            this.rows = void 0, this.currRow = void 0, this.nrRollUpRows = void 0, this.lastOutputScreen = void 0, this.logger = void 0, this.rows = [];
            for (var e4 = 0; e4 < rr; e4++)
              this.rows.push(new fr(t4));
            this.logger = t4, this.currRow = 14, this.nrRollUpRows = null, this.lastOutputScreen = null, this.reset();
          }
          var e3 = t3.prototype;
          return e3.reset = function() {
            for (var t4 = 0; t4 < rr; t4++)
              this.rows[t4].clear();
            this.currRow = 14;
          }, e3.equals = function(t4) {
            for (var e4 = true, r3 = 0; r3 < rr; r3++)
              if (!this.rows[r3].equals(t4.rows[r3])) {
                e4 = false;
                break;
              }
            return e4;
          }, e3.copy = function(t4) {
            for (var e4 = 0; e4 < rr; e4++)
              this.rows[e4].copy(t4.rows[e4]);
          }, e3.isEmpty = function() {
            for (var t4 = true, e4 = 0; e4 < rr; e4++)
              if (!this.rows[e4].isEmpty()) {
                t4 = false;
                break;
              }
            return t4;
          }, e3.backSpace = function() {
            this.rows[this.currRow].backSpace();
          }, e3.clearToEndOfRow = function() {
            this.rows[this.currRow].clearToEndOfRow();
          }, e3.insertChar = function(t4) {
            this.rows[this.currRow].insertChar(t4);
          }, e3.setPen = function(t4) {
            this.rows[this.currRow].setPenStyles(t4);
          }, e3.moveCursor = function(t4) {
            this.rows[this.currRow].moveCursor(t4);
          }, e3.setCursor = function(t4) {
            this.logger.log(ze.INFO, "setCursor: " + t4), this.rows[this.currRow].setCursor(t4);
          }, e3.setPAC = function(t4) {
            this.logger.log(ze.INFO, function() {
              return "pacData = " + JSON.stringify(t4);
            });
            var e4 = t4.row - 1;
            if (this.nrRollUpRows && e4 < this.nrRollUpRows - 1 && (e4 = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== e4) {
              for (var r3 = 0; r3 < rr; r3++)
                this.rows[r3].clear();
              var i3 = this.currRow + 1 - this.nrRollUpRows, n2 = this.lastOutputScreen;
              if (n2) {
                var a2 = n2.rows[i3].cueStartTime, s2 = this.logger.time;
                if (a2 && null !== s2 && a2 < s2)
                  for (var o2 = 0; o2 < this.nrRollUpRows; o2++)
                    this.rows[e4 - this.nrRollUpRows + o2 + 1].copy(n2.rows[i3 + o2]);
              }
            }
            this.currRow = e4;
            var l2 = this.rows[this.currRow];
            if (null !== t4.indent) {
              var u2 = t4.indent, d2 = Math.max(u2 - 1, 0);
              l2.setCursor(t4.indent), t4.color = l2.chars[d2].penState.foreground;
            }
            var h2 = { foreground: t4.color, underline: t4.underline, italics: t4.italics, background: "black", flash: false };
            this.setPen(h2);
          }, e3.setBkgData = function(t4) {
            this.logger.log(ze.INFO, function() {
              return "bkgData = " + JSON.stringify(t4);
            }), this.backSpace(), this.setPen(t4), this.insertChar(32);
          }, e3.setRollUpRows = function(t4) {
            this.nrRollUpRows = t4;
          }, e3.rollUp = function() {
            var t4 = this;
            if (null !== this.nrRollUpRows) {
              this.logger.log(ze.TEXT, function() {
                return t4.getDisplayText();
              });
              var e4 = this.currRow + 1 - this.nrRollUpRows, r3 = this.rows.splice(e4, 1)[0];
              r3.clear(), this.rows.splice(this.currRow, 0, r3), this.logger.log(ze.INFO, "Rolling up");
            } else
              this.logger.log(ze.DEBUG, "roll_up but nrRollUpRows not set yet");
          }, e3.getDisplayText = function(t4) {
            t4 = t4 || false;
            for (var e4 = [], r3 = "", i3 = -1, n2 = 0; n2 < rr; n2++) {
              var a2 = this.rows[n2].getTextString();
              a2 && (i3 = n2 + 1, t4 ? e4.push("Row " + i3 + ": '" + a2 + "'") : e4.push(a2.trim()));
            }
            return e4.length > 0 && (r3 = t4 ? "[" + e4.join(" | ") + "]" : e4.join("\n")), r3;
          }, e3.getTextAndFormat = function() {
            return this.rows;
          }, t3;
        }(), vr = function() {
          function t3(t4, e4, r3) {
            this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = t4, this.outputFilter = e4, this.mode = null, this.verbose = 0, this.displayedMemory = new gr(r3), this.nonDisplayedMemory = new gr(r3), this.lastOutputScreen = new gr(r3), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r3;
          }
          var e3 = t3.prototype;
          return e3.reset = function() {
            this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
          }, e3.getHandler = function() {
            return this.outputFilter;
          }, e3.setHandler = function(t4) {
            this.outputFilter = t4;
          }, e3.setPAC = function(t4) {
            this.writeScreen.setPAC(t4);
          }, e3.setBkgData = function(t4) {
            this.writeScreen.setBkgData(t4);
          }, e3.setMode = function(t4) {
            t4 !== this.mode && (this.mode = t4, this.logger.log(ze.INFO, function() {
              return "MODE=" + t4;
            }), "MODE_POP-ON" === this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = t4);
          }, e3.insertChars = function(t4) {
            for (var e4 = this, r3 = 0; r3 < t4.length; r3++)
              this.writeScreen.insertChar(t4[r3]);
            var i3 = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
            this.logger.log(ze.INFO, function() {
              return i3 + ": " + e4.writeScreen.getDisplayText(true);
            }), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (this.logger.log(ze.TEXT, function() {
              return "DISPLAYED: " + e4.displayedMemory.getDisplayText(true);
            }), this.outputDataUpdate());
          }, e3.ccRCL = function() {
            this.logger.log(ze.INFO, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
          }, e3.ccBS = function() {
            this.logger.log(ze.INFO, "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate());
          }, e3.ccAOF = function() {
          }, e3.ccAON = function() {
          }, e3.ccDER = function() {
            this.logger.log(ze.INFO, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate();
          }, e3.ccRU = function(t4) {
            this.logger.log(ze.INFO, "RU(" + t4 + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(t4);
          }, e3.ccFON = function() {
            this.logger.log(ze.INFO, "FON - Flash On"), this.writeScreen.setPen({ flash: true });
          }, e3.ccRDC = function() {
            this.logger.log(ze.INFO, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
          }, e3.ccTR = function() {
            this.logger.log(ze.INFO, "TR"), this.setMode("MODE_TEXT");
          }, e3.ccRTD = function() {
            this.logger.log(ze.INFO, "RTD"), this.setMode("MODE_TEXT");
          }, e3.ccEDM = function() {
            this.logger.log(ze.INFO, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(true);
          }, e3.ccCR = function() {
            this.logger.log(ze.INFO, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(true);
          }, e3.ccENM = function() {
            this.logger.log(ze.INFO, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
          }, e3.ccEOC = function() {
            var t4 = this;
            if (this.logger.log(ze.INFO, "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
              var e4 = this.displayedMemory;
              this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = e4, this.writeScreen = this.nonDisplayedMemory, this.logger.log(ze.TEXT, function() {
                return "DISP: " + t4.displayedMemory.getDisplayText();
              });
            }
            this.outputDataUpdate(true);
          }, e3.ccTO = function(t4) {
            this.logger.log(ze.INFO, "TO(" + t4 + ") - Tab Offset"), this.writeScreen.moveCursor(t4);
          }, e3.ccMIDROW = function(t4) {
            var e4 = { flash: false };
            if (e4.underline = t4 % 2 == 1, e4.italics = t4 >= 46, e4.italics)
              e4.foreground = "white";
            else {
              var r3 = Math.floor(t4 / 2) - 16;
              e4.foreground = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"][r3];
            }
            this.logger.log(ze.INFO, "MIDROW: " + JSON.stringify(e4)), this.writeScreen.setPen(e4);
          }, e3.outputDataUpdate = function(t4) {
            void 0 === t4 && (t4 = false);
            var e4 = this.logger.time;
            null !== e4 && this.outputFilter && (null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, e4, this.lastOutputScreen), t4 && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : e4) : this.cueStartTime = e4, this.lastOutputScreen.copy(this.displayedMemory));
          }, e3.cueSplitAtTime = function(t4) {
            this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t4, this.displayedMemory), this.cueStartTime = t4));
          }, t3;
        }(), pr = function() {
          function t3(t4, e4, r3) {
            this.channels = void 0, this.currentChannel = 0, this.cmdHistory = void 0, this.logger = void 0;
            var i3 = new ur();
            this.channels = [null, new vr(t4, e4, i3), new vr(t4 + 1, r3, i3)], this.cmdHistory = { a: null, b: null }, this.logger = i3;
          }
          var e3 = t3.prototype;
          return e3.getHandler = function(t4) {
            return this.channels[t4].getHandler();
          }, e3.setHandler = function(t4, e4) {
            this.channels[t4].setHandler(e4);
          }, e3.addData = function(t4, e4) {
            var r3, i3, n2, a2 = false;
            this.logger.time = t4;
            for (var s2 = 0; s2 < e4.length; s2 += 2)
              if (i3 = 127 & e4[s2], n2 = 127 & e4[s2 + 1], 0 !== i3 || 0 !== n2) {
                if (this.logger.log(ze.DATA, "[" + dr([e4[s2], e4[s2 + 1]]) + "] -> (" + dr([i3, n2]) + ")"), (r3 = this.parseCmd(i3, n2)) || (r3 = this.parseMidrow(i3, n2)), r3 || (r3 = this.parsePAC(i3, n2)), r3 || (r3 = this.parseBackgroundAttributes(i3, n2)), !r3 && (a2 = this.parseChars(i3, n2))) {
                  var o2 = this.currentChannel;
                  o2 && o2 > 0 ? this.channels[o2].insertChars(a2) : this.logger.log(ze.WARNING, "No channel found yet. TEXT-MODE?");
                }
                r3 || a2 || this.logger.log(ze.WARNING, "Couldn't parse cleaned data " + dr([i3, n2]) + " orig: " + dr([e4[s2], e4[s2 + 1]]));
              }
          }, e3.parseCmd = function(t4, e4) {
            var r3 = this.cmdHistory;
            if (!((20 === t4 || 28 === t4 || 21 === t4 || 29 === t4) && e4 >= 32 && e4 <= 47 || (23 === t4 || 31 === t4) && e4 >= 33 && e4 <= 35))
              return false;
            if (yr(t4, e4, r3))
              return mr(null, null, r3), this.logger.log(ze.DEBUG, "Repeated command (" + dr([t4, e4]) + ") is dropped"), true;
            var i3 = 20 === t4 || 21 === t4 || 23 === t4 ? 1 : 2, n2 = this.channels[i3];
            return 20 === t4 || 21 === t4 || 28 === t4 || 29 === t4 ? 32 === e4 ? n2.ccRCL() : 33 === e4 ? n2.ccBS() : 34 === e4 ? n2.ccAOF() : 35 === e4 ? n2.ccAON() : 36 === e4 ? n2.ccDER() : 37 === e4 ? n2.ccRU(2) : 38 === e4 ? n2.ccRU(3) : 39 === e4 ? n2.ccRU(4) : 40 === e4 ? n2.ccFON() : 41 === e4 ? n2.ccRDC() : 42 === e4 ? n2.ccTR() : 43 === e4 ? n2.ccRTD() : 44 === e4 ? n2.ccEDM() : 45 === e4 ? n2.ccCR() : 46 === e4 ? n2.ccENM() : 47 === e4 && n2.ccEOC() : n2.ccTO(e4 - 32), mr(t4, e4, r3), this.currentChannel = i3, true;
          }, e3.parseMidrow = function(t4, e4) {
            var r3 = 0;
            if ((17 === t4 || 25 === t4) && e4 >= 32 && e4 <= 47) {
              if ((r3 = 17 === t4 ? 1 : 2) !== this.currentChannel)
                return this.logger.log(ze.ERROR, "Mismatch channel in midrow parsing"), false;
              var i3 = this.channels[r3];
              return !!i3 && (i3.ccMIDROW(e4), this.logger.log(ze.DEBUG, "MIDROW (" + dr([t4, e4]) + ")"), true);
            }
            return false;
          }, e3.parsePAC = function(t4, e4) {
            var r3, i3 = this.cmdHistory;
            if (!((t4 >= 17 && t4 <= 23 || t4 >= 25 && t4 <= 31) && e4 >= 64 && e4 <= 127 || (16 === t4 || 24 === t4) && e4 >= 64 && e4 <= 95))
              return false;
            if (yr(t4, e4, i3))
              return mr(null, null, i3), true;
            var n2 = t4 <= 23 ? 1 : 2;
            r3 = e4 >= 64 && e4 <= 95 ? 1 === n2 ? nr[t4] : sr[t4] : 1 === n2 ? ar[t4] : or[t4];
            var a2 = this.channels[n2];
            return !!a2 && (a2.setPAC(this.interpretPAC(r3, e4)), mr(t4, e4, i3), this.currentChannel = n2, true);
          }, e3.interpretPAC = function(t4, e4) {
            var r3, i3 = { color: null, italics: false, indent: null, underline: false, row: t4 };
            return r3 = e4 > 95 ? e4 - 96 : e4 - 64, i3.underline = 1 == (1 & r3), r3 <= 13 ? i3.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(r3 / 2)] : r3 <= 15 ? (i3.italics = true, i3.color = "white") : i3.indent = 4 * Math.floor((r3 - 16) / 2), i3;
          }, e3.parseChars = function(t4, e4) {
            var r3, i3, n2 = null, a2 = null;
            if (t4 >= 25 ? (r3 = 2, a2 = t4 - 8) : (r3 = 1, a2 = t4), a2 >= 17 && a2 <= 19 ? (i3 = 17 === a2 ? e4 + 80 : 18 === a2 ? e4 + 112 : e4 + 144, this.logger.log(ze.INFO, "Special char '" + er(i3) + "' in channel " + r3), n2 = [i3]) : t4 >= 32 && t4 <= 127 && (n2 = 0 === e4 ? [t4] : [t4, e4]), n2) {
              var s2 = dr(n2);
              this.logger.log(ze.DEBUG, "Char codes =  " + s2.join(",")), mr(t4, e4, this.cmdHistory);
            }
            return n2;
          }, e3.parseBackgroundAttributes = function(t4, e4) {
            var r3;
            if (!((16 === t4 || 24 === t4) && e4 >= 32 && e4 <= 47 || (23 === t4 || 31 === t4) && e4 >= 45 && e4 <= 47))
              return false;
            var i3 = {};
            16 === t4 || 24 === t4 ? (r3 = Math.floor((e4 - 32) / 2), i3.background = lr[r3], e4 % 2 == 1 && (i3.background = i3.background + "_semi")) : 45 === e4 ? i3.background = "transparent" : (i3.foreground = "black", 47 === e4 && (i3.underline = true));
            var n2 = t4 <= 23 ? 1 : 2;
            return this.channels[n2].setBkgData(i3), mr(t4, e4, this.cmdHistory), true;
          }, e3.reset = function() {
            for (var t4 = 0; t4 < Object.keys(this.channels).length; t4++) {
              var e4 = this.channels[t4];
              e4 && e4.reset();
            }
            this.cmdHistory = { a: null, b: null };
          }, e3.cueSplitAtTime = function(t4) {
            for (var e4 = 0; e4 < this.channels.length; e4++) {
              var r3 = this.channels[e4];
              r3 && r3.cueSplitAtTime(t4);
            }
          }, t3;
        }();
        function mr(t3, e3, r3) {
          r3.a = t3, r3.b = e3;
        }
        function yr(t3, e3, r3) {
          return r3.a === t3 && r3.b === e3;
        }
        const Er = pr;
        var Tr = function() {
          function t3(t4, e4) {
            this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = t4, this.trackName = e4;
          }
          var e3 = t3.prototype;
          return e3.dispatchCue = function() {
            null !== this.startTime && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null);
          }, e3.newCue = function(t4, e4, r3) {
            (null === this.startTime || this.startTime > t4) && (this.startTime = t4), this.endTime = e4, this.screen = r3, this.timelineController.createCaptionsTrack(this.trackName);
          }, e3.reset = function() {
            this.cueRanges = [], this.startTime = null;
          }, t3;
        }();
        const Sr = function() {
          if ("undefined" != typeof self && self.VTTCue)
            return self.VTTCue;
          var t3 = ["", "lr", "rl"], e3 = ["start", "middle", "end", "left", "right"];
          function r3(t4, e4) {
            if ("string" != typeof e4)
              return false;
            if (!Array.isArray(t4))
              return false;
            var r4 = e4.toLowerCase();
            return !!~t4.indexOf(r4) && r4;
          }
          function i3(t4) {
            return r3(e3, t4);
          }
          function n2(t4) {
            for (var e4 = arguments.length, r4 = new Array(e4 > 1 ? e4 - 1 : 0), i4 = 1; i4 < e4; i4++)
              r4[i4 - 1] = arguments[i4];
            for (var n3 = 1; n3 < arguments.length; n3++) {
              var a3 = arguments[n3];
              for (var s2 in a3)
                t4[s2] = a3[s2];
            }
            return t4;
          }
          function a2(e4, a3, s2) {
            var o2 = this, l2 = { enumerable: true };
            o2.hasBeenReset = false;
            var u2 = "", d2 = false, h2 = e4, c2 = a3, f2 = s2, g2 = null, v2 = "", p2 = true, m2 = "auto", y2 = "start", E2 = 50, T2 = "middle", S2 = 50, b2 = "middle";
            Object.defineProperty(o2, "id", n2({}, l2, { get: function() {
              return u2;
            }, set: function(t4) {
              u2 = "" + t4;
            } })), Object.defineProperty(o2, "pauseOnExit", n2({}, l2, { get: function() {
              return d2;
            }, set: function(t4) {
              d2 = !!t4;
            } })), Object.defineProperty(o2, "startTime", n2({}, l2, { get: function() {
              return h2;
            }, set: function(t4) {
              if ("number" != typeof t4)
                throw new TypeError("Start time must be set to a number.");
              h2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "endTime", n2({}, l2, { get: function() {
              return c2;
            }, set: function(t4) {
              if ("number" != typeof t4)
                throw new TypeError("End time must be set to a number.");
              c2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "text", n2({}, l2, { get: function() {
              return f2;
            }, set: function(t4) {
              f2 = "" + t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "region", n2({}, l2, { get: function() {
              return g2;
            }, set: function(t4) {
              g2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "vertical", n2({}, l2, { get: function() {
              return v2;
            }, set: function(e5) {
              var i4 = function(e6) {
                return r3(t3, e6);
              }(e5);
              if (false === i4)
                throw new SyntaxError("An invalid or illegal string was specified.");
              v2 = i4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "snapToLines", n2({}, l2, { get: function() {
              return p2;
            }, set: function(t4) {
              p2 = !!t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "line", n2({}, l2, { get: function() {
              return m2;
            }, set: function(t4) {
              if ("number" != typeof t4 && "auto" !== t4)
                throw new SyntaxError("An invalid number or illegal string was specified.");
              m2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "lineAlign", n2({}, l2, { get: function() {
              return y2;
            }, set: function(t4) {
              var e5 = i3(t4);
              if (!e5)
                throw new SyntaxError("An invalid or illegal string was specified.");
              y2 = e5, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "position", n2({}, l2, { get: function() {
              return E2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100)
                throw new Error("Position must be between 0 and 100.");
              E2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "positionAlign", n2({}, l2, { get: function() {
              return T2;
            }, set: function(t4) {
              var e5 = i3(t4);
              if (!e5)
                throw new SyntaxError("An invalid or illegal string was specified.");
              T2 = e5, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "size", n2({}, l2, { get: function() {
              return S2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100)
                throw new Error("Size must be between 0 and 100.");
              S2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "align", n2({}, l2, { get: function() {
              return b2;
            }, set: function(t4) {
              var e5 = i3(t4);
              if (!e5)
                throw new SyntaxError("An invalid or illegal string was specified.");
              b2 = e5, this.hasBeenReset = true;
            } })), o2.displayState = void 0;
          }
          return a2.prototype.getCueAsHTML = function() {
            return self.WebVTT.convertCueToDOMTree(self, this.text);
          }, a2;
        }();
        var br = function() {
          function t3() {
          }
          return t3.prototype.decode = function(t4, e3) {
            if (!t4)
              return "";
            if ("string" != typeof t4)
              throw new Error("Error - expected string data.");
            return decodeURIComponent(encodeURIComponent(t4));
          }, t3;
        }();
        function Lr(t3) {
          function e3(t4, e4, r4, i3) {
            return 3600 * (0 | t4) + 60 * (0 | e4) + (0 | r4) + parseFloat(i3 || 0);
          }
          var r3 = t3.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
          return r3 ? parseFloat(r3[2]) > 59 ? e3(r3[2], r3[3], 0, r3[4]) : e3(r3[1], r3[2], r3[3], r3[4]) : null;
        }
        var Ar = function() {
          function t3() {
            this.values = /* @__PURE__ */ Object.create(null);
          }
          var e3 = t3.prototype;
          return e3.set = function(t4, e4) {
            this.get(t4) || "" === e4 || (this.values[t4] = e4);
          }, e3.get = function(t4, e4, r3) {
            return r3 ? this.has(t4) ? this.values[t4] : e4[r3] : this.has(t4) ? this.values[t4] : e4;
          }, e3.has = function(t4) {
            return t4 in this.values;
          }, e3.alt = function(t4, e4, r3) {
            for (var i3 = 0; i3 < r3.length; ++i3)
              if (e4 === r3[i3]) {
                this.set(t4, e4);
                break;
              }
          }, e3.integer = function(t4, e4) {
            /^-?\d+$/.test(e4) && this.set(t4, parseInt(e4, 10));
          }, e3.percent = function(t4, e4) {
            if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e4)) {
              var r3 = parseFloat(e4);
              if (r3 >= 0 && r3 <= 100)
                return this.set(t4, r3), true;
            }
            return false;
          }, t3;
        }();
        function Dr(t3, e3, r3, i3) {
          var n2 = i3 ? t3.split(i3) : [t3];
          for (var a2 in n2)
            if ("string" == typeof n2[a2]) {
              var s2 = n2[a2].split(r3);
              2 === s2.length && e3(s2[0], s2[1]);
            }
        }
        var kr = new Sr(0, 0, ""), Rr = "middle" === kr.align ? "middle" : "center";
        function Ir(t3, e3, r3) {
          var i3 = t3;
          function n2() {
            var e4 = Lr(t3);
            if (null === e4)
              throw new Error("Malformed timestamp: " + i3);
            return t3 = t3.replace(/^[^\sa-zA-Z-]+/, ""), e4;
          }
          function a2() {
            t3 = t3.replace(/^\s+/, "");
          }
          if (a2(), e3.startTime = n2(), a2(), "-->" !== t3.slice(0, 3))
            throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + i3);
          t3 = t3.slice(3), a2(), e3.endTime = n2(), a2(), function(t4, e4) {
            var i4 = new Ar();
            Dr(t4, function(t5, e5) {
              var n4;
              switch (t5) {
                case "region":
                  for (var a4 = r3.length - 1; a4 >= 0; a4--)
                    if (r3[a4].id === e5) {
                      i4.set(t5, r3[a4].region);
                      break;
                    }
                  break;
                case "vertical":
                  i4.alt(t5, e5, ["rl", "lr"]);
                  break;
                case "line":
                  n4 = e5.split(","), i4.integer(t5, n4[0]), i4.percent(t5, n4[0]) && i4.set("snapToLines", false), i4.alt(t5, n4[0], ["auto"]), 2 === n4.length && i4.alt("lineAlign", n4[1], ["start", Rr, "end"]);
                  break;
                case "position":
                  n4 = e5.split(","), i4.percent(t5, n4[0]), 2 === n4.length && i4.alt("positionAlign", n4[1], ["start", Rr, "end", "line-left", "line-right", "auto"]);
                  break;
                case "size":
                  i4.percent(t5, e5);
                  break;
                case "align":
                  i4.alt(t5, e5, ["start", Rr, "end", "left", "right"]);
              }
            }, /:/, /\s/), e4.region = i4.get("region", null), e4.vertical = i4.get("vertical", "");
            var n3 = i4.get("line", "auto");
            "auto" === n3 && -1 === kr.line && (n3 = -1), e4.line = n3, e4.lineAlign = i4.get("lineAlign", "start"), e4.snapToLines = i4.get("snapToLines", true), e4.size = i4.get("size", 100), e4.align = i4.get("align", Rr);
            var a3 = i4.get("position", "auto");
            "auto" === a3 && 50 === kr.position && (a3 = "start" === e4.align || "left" === e4.align ? 0 : "end" === e4.align || "right" === e4.align ? 100 : 50), e4.position = a3;
          }(t3, e3);
        }
        function wr(t3) {
          return t3.replace(/<br(?: \/)?>/gi, "\n");
        }
        var Cr = function() {
          function t3() {
            this.state = "INITIAL", this.buffer = "", this.decoder = new br(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0;
          }
          var e3 = t3.prototype;
          return e3.parse = function(t4) {
            var e4 = this;
            function r3() {
              var t5 = e4.buffer, r4 = 0;
              for (t5 = wr(t5); r4 < t5.length && "\r" !== t5[r4] && "\n" !== t5[r4]; )
                ++r4;
              var i4 = t5.slice(0, r4);
              return "\r" === t5[r4] && ++r4, "\n" === t5[r4] && ++r4, e4.buffer = t5.slice(r4), i4;
            }
            t4 && (e4.buffer += e4.decoder.decode(t4, { stream: true }));
            try {
              var i3 = "";
              if ("INITIAL" === e4.state) {
                if (!/\r\n|\n/.test(e4.buffer))
                  return this;
                var n2 = (i3 = r3()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                if (!n2 || !n2[0])
                  throw new Error("Malformed WebVTT signature.");
                e4.state = "HEADER";
              }
              for (var a2 = false; e4.buffer; ) {
                if (!/\r\n|\n/.test(e4.buffer))
                  return this;
                switch (a2 ? a2 = false : i3 = r3(), e4.state) {
                  case "HEADER":
                    /:/.test(i3) ? Dr(i3, function(t5, e5) {
                    }, /:/) : i3 || (e4.state = "ID");
                    continue;
                  case "NOTE":
                    i3 || (e4.state = "ID");
                    continue;
                  case "ID":
                    if (/^NOTE($|[ \t])/.test(i3)) {
                      e4.state = "NOTE";
                      break;
                    }
                    if (!i3)
                      continue;
                    if (e4.cue = new Sr(0, 0, ""), e4.state = "CUE", -1 === i3.indexOf("-->")) {
                      e4.cue.id = i3;
                      continue;
                    }
                  case "CUE":
                    if (!e4.cue) {
                      e4.state = "BADCUE";
                      continue;
                    }
                    try {
                      Ir(i3, e4.cue, e4.regionList);
                    } catch (t5) {
                      e4.cue = null, e4.state = "BADCUE";
                      continue;
                    }
                    e4.state = "CUETEXT";
                    continue;
                  case "CUETEXT":
                    var s2 = -1 !== i3.indexOf("-->");
                    if (!i3 || s2 && (a2 = true)) {
                      e4.oncue && e4.cue && e4.oncue(e4.cue), e4.cue = null, e4.state = "ID";
                      continue;
                    }
                    if (null === e4.cue)
                      continue;
                    e4.cue.text && (e4.cue.text += "\n"), e4.cue.text += i3;
                    continue;
                  case "BADCUE":
                    i3 || (e4.state = "ID");
                }
              }
            } catch (t5) {
              "CUETEXT" === e4.state && e4.cue && e4.oncue && e4.oncue(e4.cue), e4.cue = null, e4.state = "INITIAL" === e4.state ? "BADWEBVTT" : "BADCUE";
            }
            return this;
          }, e3.flush = function() {
            var t4 = this;
            try {
              if ((t4.cue || "HEADER" === t4.state) && (t4.buffer += "\n\n", t4.parse()), "INITIAL" === t4.state || "BADWEBVTT" === t4.state)
                throw new Error("Malformed WebVTT signature.");
            } catch (e4) {
              t4.onparsingerror && t4.onparsingerror(e4);
            }
            return t4.onflush && t4.onflush(), this;
          }, t3;
        }(), _r = r2(673), Pr = r2(524), Or = /\r\n|\n\r|\n|\r/g, xr = function(t3, e3, r3) {
          return void 0 === r3 && (r3 = 0), t3.slice(r3, r3 + e3.length) === e3;
        }, Fr = function(t3) {
          for (var e3 = 5381, r3 = t3.length; r3; )
            e3 = 33 * e3 ^ t3.charCodeAt(--r3);
          return (e3 >>> 0).toString();
        };
        function Mr(t3, e3, r3) {
          return Fr(t3.toString()) + Fr(e3.toString()) + Fr(r3);
        }
        function Nr() {
          return Nr = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Nr.apply(this, arguments);
        }
        var Ur = "stpp.ttml.im1t", Br = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, Gr = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/, Kr = { left: "start", center: "center", right: "end", start: "start", end: "end" };
        function Hr(t3, e3, r3, i3, n2) {
          var a2 = (0, R.findBox)(new Uint8Array(t3), ["mdat"]);
          if (0 !== a2.length) {
            var s2 = a2.map(function(t4) {
              return (0, $.utf8ArrayToStr)(t4);
            }), o2 = (0, _r.toTimescaleFromScale)(e3, 1, r3);
            try {
              s2.forEach(function(t4) {
                return i3(function(t5, e4) {
                  var r4 = new DOMParser().parseFromString(t5, "text/xml").getElementsByTagName("tt")[0];
                  if (!r4)
                    throw new Error("Invalid ttml");
                  var i4 = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }, n3 = Object.keys(i4).reduce(function(t6, e5) {
                    return t6[e5] = r4.getAttribute("ttp:" + e5) || i4[e5], t6;
                  }, {}), a3 = "preserve" !== r4.getAttribute("xml:space"), s3 = Vr(jr(r4, "styling", "style")), o3 = Vr(jr(r4, "layout", "region")), l2 = jr(r4, "body", "[begin]");
                  return [].map.call(l2, function(t6) {
                    var r5 = Yr(t6, a3);
                    if (!r5 || !t6.hasAttribute("begin"))
                      return null;
                    var i5 = Xr(t6.getAttribute("begin"), n3), l3 = Xr(t6.getAttribute("dur"), n3), u2 = Xr(t6.getAttribute("end"), n3);
                    if (null === i5)
                      throw qr(t6);
                    if (null === u2) {
                      if (null === l3)
                        throw qr(t6);
                      u2 = i5 + l3;
                    }
                    var d2 = new Sr(i5 - e4, u2 - e4, r5);
                    d2.id = Mr(d2.startTime, d2.endTime, d2.text);
                    var h2 = function(t7, e5, r6) {
                      var i6 = "http://www.w3.org/ns/ttml#styling", n4 = null, a4 = null != t7 && t7.hasAttribute("style") ? t7.getAttribute("style") : null;
                      return a4 && r6.hasOwnProperty(a4) && (n4 = r6[a4]), ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"].reduce(function(r7, a5) {
                        var s4 = Wr(e5, i6, a5) || Wr(t7, i6, a5) || Wr(n4, i6, a5);
                        return s4 && (r7[a5] = s4), r7;
                      }, {});
                    }(o3[t6.getAttribute("region")], s3[t6.getAttribute("style")], s3), c2 = h2.textAlign;
                    if (c2) {
                      var f2 = Kr[c2];
                      f2 && (d2.lineAlign = f2), d2.align = c2;
                    }
                    return Nr(d2, h2), d2;
                  }).filter(function(t6) {
                    return null !== t6;
                  });
                }(t4, o2));
              });
            } catch (t4) {
              n2(t4);
            }
          } else
            n2(new Error("Could not parse IMSC1 mdat"));
        }
        function jr(t3, e3, r3) {
          var i3 = t3.getElementsByTagName(e3)[0];
          return i3 ? [].slice.call(i3.querySelectorAll(r3)) : [];
        }
        function Vr(t3) {
          return t3.reduce(function(t4, e3) {
            var r3 = e3.getAttribute("xml:id");
            return r3 && (t4[r3] = e3), t4;
          }, {});
        }
        function Yr(t3, e3) {
          return [].slice.call(t3.childNodes).reduce(function(t4, r3, i3) {
            var n2;
            return "br" === r3.nodeName && i3 ? t4 + "\n" : null !== (n2 = r3.childNodes) && void 0 !== n2 && n2.length ? Yr(r3, e3) : e3 ? t4 + r3.textContent.trim().replace(/\s+/g, " ") : t4 + r3.textContent;
          }, "");
        }
        function Wr(t3, e3, r3) {
          return t3 && t3.hasAttributeNS(e3, r3) ? t3.getAttributeNS(e3, r3) : null;
        }
        function qr(t3) {
          return new Error("Could not parse ttml timestamp " + t3);
        }
        function Xr(t3, e3) {
          if (!t3)
            return null;
          var r3 = Lr(t3);
          return null === r3 && (Br.test(t3) ? r3 = function(t4, e4) {
            var r4 = Br.exec(t4), i3 = (0 | r4[4]) + (0 | r4[5]) / e4.subFrameRate;
            return 3600 * (0 | r4[1]) + 60 * (0 | r4[2]) + (0 | r4[3]) + i3 / e4.frameRate;
          }(t3, e3) : Gr.test(t3) && (r3 = function(t4, e4) {
            var r4 = Gr.exec(t4), i3 = Number(r4[1]);
            switch (r4[2]) {
              case "h":
                return 3600 * i3;
              case "m":
                return 60 * i3;
              case "ms":
                return 1e3 * i3;
              case "f":
                return i3 / e4.frameRate;
              case "t":
                return i3 / e4.tickRate;
            }
            return i3;
          }(t3, e3))), r3;
        }
        var zr = function() {
          function t3(t4) {
            if (this.hls = void 0, this.media = null, this.config = void 0, this.enabled = true, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.timescale = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this.captionsProperties = void 0, this.hls = t4, this.config = t4.config, this.Cues = t4.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, this.config.enableCEA708Captions) {
              var e4 = new Tr(this, "textTrack1"), r3 = new Tr(this, "textTrack2"), i3 = new Tr(this, "textTrack3"), n2 = new Tr(this, "textTrack4");
              this.cea608Parser1 = new Er(1, e4, r3), this.cea608Parser2 = new Er(3, i3, n2);
            }
            t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.on(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.on(s.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.on(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(s.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(s.Events.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(s.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(s.Events.FRAG_LOADING, this.onFragLoading, this), t4.off(s.Events.FRAG_LOADED, this.onFragLoaded, this), t4.off(s.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.off(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(s.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.off(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
          }, e3.addCues = function(t4, e4, r3, i3, n2) {
            for (var a2, o2, l2, u2, d2 = false, h2 = n2.length; h2--; ) {
              var c2 = n2[h2], f2 = (a2 = c2[0], o2 = c2[1], l2 = e4, u2 = r3, Math.min(o2, u2) - Math.max(a2, l2));
              if (f2 >= 0 && (c2[0] = Math.min(c2[0], e4), c2[1] = Math.max(c2[1], r3), d2 = true, f2 / (r3 - e4) > 0.5))
                return;
            }
            if (d2 || n2.push([e4, r3]), this.config.renderTextTracksNatively) {
              var g2 = this.captionsTracks[t4];
              this.Cues.newCue(g2, e4, r3, i3);
            } else {
              var v2 = this.Cues.newCue(null, e4, r3, i3);
              this.hls.trigger(s.Events.CUES_PARSED, { type: "captions", cues: v2, track: t4 });
            }
          }, e3.onInitPtsFound = function(t4, e4) {
            var r3 = this, i3 = e4.frag, n2 = e4.id, a2 = e4.initPTS, o2 = e4.timescale, l2 = this.unparsedVttFrags;
            "main" === n2 && (this.initPTS[i3.cc] = a2, this.timescale[i3.cc] = o2), l2.length && (this.unparsedVttFrags = [], l2.forEach(function(t5) {
              r3.onFragLoaded(s.Events.FRAG_LOADED, t5);
            }));
          }, e3.getExistingTrack = function(t4) {
            var e4 = this.media;
            if (e4)
              for (var r3 = 0; r3 < e4.textTracks.length; r3++) {
                var i3 = e4.textTracks[r3];
                if (i3[t4])
                  return i3;
              }
            return null;
          }, e3.createCaptionsTrack = function(t4) {
            this.config.renderTextTracksNatively ? this.createNativeTrack(t4) : this.createNonNativeTrack(t4);
          }, e3.createNativeTrack = function(t4) {
            if (!this.captionsTracks[t4]) {
              var e4 = this.captionsProperties, r3 = this.captionsTracks, i3 = this.media, n2 = e4[t4], a2 = n2.label, s2 = n2.languageCode, o2 = this.getExistingTrack(t4);
              if (o2)
                r3[t4] = o2, z(r3[t4]), q(r3[t4], i3);
              else {
                var l2 = this.createTextTrack("captions", a2, s2);
                l2 && (l2[t4] = true, r3[t4] = l2);
              }
            }
          }, e3.createNonNativeTrack = function(t4) {
            if (!this.nonNativeCaptionsTracks[t4]) {
              var e4 = this.captionsProperties[t4];
              if (e4) {
                var r3 = { _id: t4, label: e4.label, kind: "captions", default: !!e4.media && !!e4.media.default, closedCaptions: e4.media };
                this.nonNativeCaptionsTracks[t4] = r3, this.hls.trigger(s.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [r3] });
              }
            }
          }, e3.createTextTrack = function(t4, e4, r3) {
            var i3 = this.media;
            if (i3)
              return i3.addTextTrack(t4, e4, r3);
          }, e3.onMediaAttaching = function(t4, e4) {
            this.media = e4.media, this._cleanTracks();
          }, e3.onMediaDetaching = function() {
            var t4 = this.captionsTracks;
            Object.keys(t4).forEach(function(e4) {
              z(t4[e4]), delete t4[e4];
            }), this.nonNativeCaptionsTracks = {};
          }, e3.onManifestLoading = function() {
            this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = this.unparsedVttFrags || [], this.initPTS = [], this.timescale = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset());
          }, e3._cleanTracks = function() {
            var t4 = this.media;
            if (t4) {
              var e4 = t4.textTracks;
              if (e4)
                for (var r3 = 0; r3 < e4.length; r3++)
                  z(e4[r3]);
            }
          }, e3.onSubtitleTracksUpdated = function(t4, e4) {
            var r3 = this;
            this.textTracks = [];
            var i3 = e4.subtitleTracks || [], n2 = i3.some(function(t5) {
              return t5.textCodec === Ur;
            });
            if (this.config.enableWebVTT || n2 && this.config.enableIMSC1) {
              var a2 = this.tracks && i3 && this.tracks.length === i3.length;
              if (this.tracks = i3 || [], this.config.renderTextTracksNatively) {
                var o2 = this.media ? this.media.textTracks : [];
                this.tracks.forEach(function(t5, e5) {
                  var i4;
                  if (e5 < o2.length) {
                    for (var n3 = null, a3 = 0; a3 < o2.length; a3++)
                      if (Qr(o2[a3], t5)) {
                        n3 = o2[a3];
                        break;
                      }
                    n3 && (i4 = n3);
                  }
                  if (i4)
                    z(i4);
                  else {
                    var s2 = r3._captionsOrSubtitlesFromCharacteristics(t5);
                    (i4 = r3.createTextTrack(s2, t5.name, t5.lang)) && (i4.mode = "disabled");
                  }
                  i4 && (i4.groupId = t5.groupId, r3.textTracks.push(i4));
                });
              } else if (!a2 && this.tracks && this.tracks.length) {
                var l2 = this.tracks.map(function(t5) {
                  return { label: t5.name, kind: t5.type.toLowerCase(), default: t5.default, subtitleTrack: t5 };
                });
                this.hls.trigger(s.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: l2 });
              }
            }
          }, e3._captionsOrSubtitlesFromCharacteristics = function(t4) {
            var e4;
            if (null !== (e4 = t4.attrs) && void 0 !== e4 && e4.CHARACTERISTICS) {
              var r3 = /transcribes-spoken-dialog/gi.test(t4.attrs.CHARACTERISTICS), i3 = /describes-music-and-sound/gi.test(t4.attrs.CHARACTERISTICS);
              if (r3 && i3)
                return "captions";
            }
            return "subtitles";
          }, e3.onManifestLoaded = function(t4, e4) {
            var r3 = this;
            this.config.enableCEA708Captions && e4.captions && e4.captions.forEach(function(t5) {
              var e5 = /(?:CC|SERVICE)([1-4])/.exec(t5.instreamId);
              if (e5) {
                var i3 = "textTrack" + e5[1], n2 = r3.captionsProperties[i3];
                n2 && (n2.label = t5.name, t5.lang && (n2.languageCode = t5.lang), n2.media = t5);
              }
            });
          }, e3.closedCaptionsForLevel = function(t4) {
            var e4 = this.hls.levels[t4.level];
            return null == e4 ? void 0 : e4.attrs["CLOSED-CAPTIONS"];
          }, e3.onFragLoading = function(t4, e4) {
            var r3 = this.cea608Parser1, i3 = this.cea608Parser2, n2 = this.lastSn, a2 = this.lastPartIndex;
            if (this.enabled && r3 && i3 && e4.frag.type === V.PlaylistLevelType.MAIN) {
              var s2, o2, l2 = e4.frag.sn, u2 = null != (s2 = null == e4 || null === (o2 = e4.part) || void 0 === o2 ? void 0 : o2.index) ? s2 : -1;
              l2 === n2 + 1 || l2 === n2 && u2 === a2 + 1 || (r3.reset(), i3.reset()), this.lastSn = l2, this.lastPartIndex = u2;
            }
          }, e3.onFragLoaded = function(t4, e4) {
            var r3 = e4.frag, i3 = e4.payload, n2 = this.initPTS, o2 = this.unparsedVttFrags;
            if (r3.type === V.PlaylistLevelType.SUBTITLE)
              if (i3.byteLength) {
                if (!(0, a.isFiniteNumber)(n2[r3.cc]))
                  return o2.push(e4), void (n2.length && this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Missing initial subtitle PTS") }));
                var l2 = r3.decryptdata, u2 = "stats" in e4;
                if (null == l2 || !l2.encrypted || u2) {
                  var d2 = this.tracks[r3.level], h2 = this.vttCCs;
                  h2[r3.cc] || (h2[r3.cc] = { start: r3.start, prevCC: this.prevCC, new: true }, this.prevCC = r3.cc), d2 && d2.textCodec === Ur ? this._parseIMSC1(r3, i3) : this._parseVTTs(r3, i3, h2);
                }
              } else
                this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Empty subtitle payload") });
          }, e3._parseIMSC1 = function(t4, e4) {
            var r3 = this, i3 = this.hls;
            Hr(e4, this.initPTS[t4.cc], this.timescale[t4.cc], function(e5) {
              r3._appendCues(e5, t4.level), i3.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t4 });
            }, function(e5) {
              l.logger.log("Failed to parse IMSC1: " + e5), i3.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t4, error: e5 });
            });
          }, e3._parseVTTs = function(t4, e4, r3) {
            var i3, n2 = this, o2 = this.hls;
            !function(t5, e5, r4, i4, n3, s2, o3, l2) {
              var u2, d2 = new Cr(), h2 = (0, $.utf8ArrayToStr)(new Uint8Array(t5)).trim().replace(Or, "\n").split("\n"), c2 = [], f2 = (0, _r.toMpegTsClockFromTimescale)(e5, r4), g2 = "00:00.000", v2 = 0, p2 = 0, m2 = true;
              d2.oncue = function(t6) {
                var e6 = i4[n3], r5 = i4.ccOffset, a2 = (v2 - f2) / 9e4;
                null != e6 && e6.new && (void 0 !== p2 ? r5 = i4.ccOffset = e6.start : function(t7, e7, r6) {
                  var i5 = t7[e7], n4 = t7[i5.prevCC];
                  if (!n4 || !n4.new && i5.new)
                    return t7.ccOffset = t7.presentationOffset = i5.start, void (i5.new = false);
                  for (; null !== (a3 = n4) && void 0 !== a3 && a3.new; ) {
                    var a3;
                    t7.ccOffset += i5.start - n4.start, i5.new = false, n4 = t7[(i5 = n4).prevCC];
                  }
                  t7.presentationOffset = r6;
                }(i4, n3, a2)), a2 && (r5 = a2 - i4.presentationOffset);
                var o4 = t6.endTime - t6.startTime, l3 = (0, Pr.normalizePts)(9e4 * (t6.startTime + r5 - p2), 9e4 * s2) / 9e4;
                t6.startTime = Math.max(l3, 0), t6.endTime = Math.max(l3 + o4, 0);
                var u3 = t6.text.trim();
                t6.text = decodeURIComponent(encodeURIComponent(u3)), t6.id || (t6.id = Mr(t6.startTime, t6.endTime, u3)), t6.endTime > 0 && c2.push(t6);
              }, d2.onparsingerror = function(t6) {
                u2 = t6;
              }, d2.onflush = function() {
                u2 ? l2(u2) : o3(c2);
              }, h2.forEach(function(t6) {
                if (m2) {
                  if (xr(t6, "X-TIMESTAMP-MAP=")) {
                    m2 = false, t6.slice(16).split(",").forEach(function(t7) {
                      xr(t7, "LOCAL:") ? g2 = t7.slice(6) : xr(t7, "MPEGTS:") && (v2 = parseInt(t7.slice(7)));
                    });
                    try {
                      p2 = function(t7) {
                        var e6 = parseInt(t7.slice(-3)), r5 = parseInt(t7.slice(-6, -4)), i5 = parseInt(t7.slice(-9, -7)), n4 = t7.length > 9 ? parseInt(t7.substring(0, t7.indexOf(":"))) : 0;
                        if (!((0, a.isFiniteNumber)(e6) && (0, a.isFiniteNumber)(r5) && (0, a.isFiniteNumber)(i5) && (0, a.isFiniteNumber)(n4)))
                          throw Error("Malformed X-TIMESTAMP-MAP: Local:" + t7);
                        return e6 += 1e3 * r5, (e6 += 6e4 * i5) + 36e5 * n4;
                      }(g2) / 1e3;
                    } catch (t7) {
                      u2 = t7;
                    }
                    return;
                  }
                  "" === t6 && (m2 = false);
                }
                d2.parse(t6 + "\n");
              }), d2.flush();
            }(null !== (i3 = t4.initSegment) && void 0 !== i3 && i3.data ? (0, R.appendUint8Array)(t4.initSegment.data, new Uint8Array(e4)) : e4, this.initPTS[t4.cc], this.timescale[t4.cc], r3, t4.cc, t4.start, function(e5) {
              n2._appendCues(e5, t4.level), o2.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t4 });
            }, function(r4) {
              n2._fallbackToIMSC1(t4, e4), l.logger.log("Failed to parse VTT cue: " + r4), o2.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t4, error: r4 });
            });
          }, e3._fallbackToIMSC1 = function(t4, e4) {
            var r3 = this, i3 = this.tracks[t4.level];
            i3.textCodec || Hr(e4, this.initPTS[t4.cc], this.timescale[t4.cc], function() {
              i3.textCodec = Ur, r3._parseIMSC1(t4, e4);
            }, function() {
              i3.textCodec = "wvtt";
            });
          }, e3._appendCues = function(t4, e4) {
            var r3 = this.hls;
            if (this.config.renderTextTracksNatively) {
              var i3 = this.textTracks[e4];
              if (!i3 || "disabled" === i3.mode)
                return;
              t4.forEach(function(t5) {
                return X(i3, t5);
              });
            } else {
              var n2 = this.tracks[e4];
              if (!n2)
                return;
              var a2 = n2.default ? "default" : "subtitles" + e4;
              r3.trigger(s.Events.CUES_PARSED, { type: "subtitles", cues: t4, track: a2 });
            }
          }, e3.onFragDecrypted = function(t4, e4) {
            var r3 = e4.frag;
            if (r3.type === V.PlaylistLevelType.SUBTITLE) {
              if (!(0, a.isFiniteNumber)(this.initPTS[r3.cc]))
                return void this.unparsedVttFrags.push(e4);
              this.onFragLoaded(s.Events.FRAG_LOADED, e4);
            }
          }, e3.onSubtitleTracksCleared = function() {
            this.tracks = [], this.captionsTracks = {};
          }, e3.onFragParsingUserdata = function(t4, e4) {
            var r3 = this.cea608Parser1, i3 = this.cea608Parser2;
            if (this.enabled && r3 && i3) {
              var n2 = e4.frag, a2 = e4.samples;
              if (n2.type !== V.PlaylistLevelType.MAIN || "NONE" !== this.closedCaptionsForLevel(n2))
                for (var s2 = 0; s2 < a2.length; s2++) {
                  var o2 = a2[s2].bytes;
                  if (o2) {
                    var l2 = this.extractCea608Data(o2);
                    r3.addData(a2[s2].pts, l2[0]), i3.addData(a2[s2].pts, l2[1]);
                  }
                }
            }
          }, e3.onBufferFlushing = function(t4, e4) {
            var r3 = e4.startOffset, i3 = e4.endOffset, n2 = e4.endOffsetSubtitles, a2 = e4.type, s2 = this.media;
            if (s2 && !(s2.currentTime < i3)) {
              if (!a2 || "video" === a2) {
                var o2 = this.captionsTracks;
                Object.keys(o2).forEach(function(t5) {
                  return Q(o2[t5], r3, i3);
                });
              }
              if (this.config.renderTextTracksNatively && 0 === r3 && void 0 !== n2) {
                var l2 = this.textTracks;
                Object.keys(l2).forEach(function(t5) {
                  return Q(l2[t5], r3, n2);
                });
              }
            }
          }, e3.extractCea608Data = function(t4) {
            for (var e4 = [[], []], r3 = 31 & t4[0], i3 = 2, n2 = 0; n2 < r3; n2++) {
              var a2 = t4[i3++], s2 = 127 & t4[i3++], o2 = 127 & t4[i3++];
              if ((0 !== s2 || 0 !== o2) && 0 != (4 & a2)) {
                var l2 = 3 & a2;
                0 !== l2 && 1 !== l2 || (e4[l2].push(s2), e4[l2].push(o2));
              }
            }
            return e4;
          }, t3;
        }();
        function Qr(t3, e3) {
          return t3 && t3.label === e3.name && !(t3.textTrack1 || t3.textTrack2);
        }
        function $r(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        const Jr = function() {
          function t3(t4) {
            this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.hls = void 0, this.streamController = void 0, this.clientRect = void 0, this.hls = t4, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners();
          }
          var e3, r3, i3 = t3.prototype;
          return i3.setStreamController = function(t4) {
            this.streamController = t4;
          }, i3.destroy = function() {
            this.unregisterListener(), this.hls.config.capLevelToPlayerSize && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null;
          }, i3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, i3.unregisterListener = function() {
            var t4 = this.hls;
            t4.off(s.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(s.Events.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, i3.onFpsDropLevelCapping = function(e4, r4) {
            t3.isLevelAllowed(r4.droppedLevel, this.restrictedLevels) && this.restrictedLevels.push(r4.droppedLevel);
          }, i3.onMediaAttaching = function(t4, e4) {
            this.media = e4.media instanceof HTMLVideoElement ? e4.media : null, this.clientRect = null;
          }, i3.onManifestParsed = function(t4, e4) {
            var r4 = this.hls;
            this.restrictedLevels = [], this.firstLevel = e4.firstLevel, r4.config.capLevelToPlayerSize && e4.video && this.startCapping();
          }, i3.onBufferCodecs = function(t4, e4) {
            this.hls.config.capLevelToPlayerSize && e4.video && this.startCapping();
          }, i3.onMediaDetaching = function() {
            this.stopCapping();
          }, i3.detectPlayerSize = function() {
            if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
              var t4 = this.hls.levels;
              if (t4.length) {
                var e4 = this.hls;
                e4.autoLevelCapping = this.getMaxLevel(t4.length - 1), e4.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = e4.autoLevelCapping;
              }
            }
          }, i3.getMaxLevel = function(e4) {
            var r4 = this, i4 = this.hls.levels;
            if (!i4.length)
              return -1;
            var n2 = i4.filter(function(i5, n3) {
              return t3.isLevelAllowed(n3, r4.restrictedLevels) && n3 <= e4;
            });
            return this.clientRect = null, t3.getMaxLevelByMediaSize(n2, this.mediaWidth, this.mediaHeight);
          }, i3.startCapping = function() {
            this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, this.hls.firstLevel = this.getMaxLevel(this.firstLevel), self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize());
          }, i3.stopCapping = function() {
            this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0);
          }, i3.getDimensions = function() {
            if (this.clientRect)
              return this.clientRect;
            var t4 = this.media, e4 = { width: 0, height: 0 };
            if (t4) {
              var r4 = t4.getBoundingClientRect();
              e4.width = r4.width, e4.height = r4.height, e4.width || e4.height || (e4.width = r4.right - r4.left || t4.width || 0, e4.height = r4.bottom - r4.top || t4.height || 0);
            }
            return this.clientRect = e4, e4;
          }, t3.isLevelAllowed = function(t4, e4) {
            return void 0 === e4 && (e4 = []), -1 === e4.indexOf(t4);
          }, t3.getMaxLevelByMediaSize = function(t4, e4, r4) {
            if (!t4 || !t4.length)
              return -1;
            for (var i4, n2, a2 = t4.length - 1, s2 = 0; s2 < t4.length; s2 += 1) {
              var o2 = t4[s2];
              if ((o2.width >= e4 || o2.height >= r4) && (i4 = o2, !(n2 = t4[s2 + 1]) || i4.width !== n2.width || i4.height !== n2.height)) {
                a2 = s2;
                break;
              }
            }
            return a2;
          }, e3 = t3, (r3 = [{ key: "mediaWidth", get: function() {
            return this.getDimensions().width * this.contentScaleFactor;
          } }, { key: "mediaHeight", get: function() {
            return this.getDimensions().height * this.contentScaleFactor;
          } }, { key: "contentScaleFactor", get: function() {
            var t4 = 1;
            if (!this.hls.config.ignoreDevicePixelRatio)
              try {
                t4 = self.devicePixelRatio;
              } catch (t5) {
              }
            return t4;
          } }]) && $r(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }(), Zr = function() {
          function t3(t4) {
            this.hls = void 0, this.isVideoPlaybackQualityAvailable = false, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = t4, this.registerListeners();
          }
          var e3 = t3.prototype;
          return e3.setStreamController = function(t4) {
            this.streamController = t4;
          }, e3.registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
          }, e3.unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching);
          }, e3.destroy = function() {
            this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = false, this.media = null;
          }, e3.onMediaAttaching = function(t4, e4) {
            var r3 = this.hls.config;
            if (r3.capLevelOnFPSDrop) {
              var i3 = e4.media instanceof self.HTMLVideoElement ? e4.media : null;
              this.media = i3, i3 && "function" == typeof i3.getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = true), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r3.fpsDroppedMonitoringPeriod);
            }
          }, e3.checkFPS = function(t4, e4, r3) {
            var i3 = performance.now();
            if (e4) {
              if (this.lastTime) {
                var n2 = i3 - this.lastTime, a2 = r3 - this.lastDroppedFrames, o2 = e4 - this.lastDecodedFrames, u2 = 1e3 * a2 / n2, d2 = this.hls;
                if (d2.trigger(s.Events.FPS_DROP, { currentDropped: a2, currentDecoded: o2, totalDroppedFrames: r3 }), u2 > 0 && a2 > d2.config.fpsDroppedMonitoringThreshold * o2) {
                  var h2 = d2.currentLevel;
                  l.logger.warn("drop FPS ratio greater than max allowed value for currentLevel: " + h2), h2 > 0 && (-1 === d2.autoLevelCapping || d2.autoLevelCapping >= h2) && (h2 -= 1, d2.trigger(s.Events.FPS_DROP_LEVEL_CAPPING, { level: h2, droppedLevel: d2.currentLevel }), d2.autoLevelCapping = h2, this.streamController.nextLevelSwitch());
                }
              }
              this.lastTime = i3, this.lastDroppedFrames = r3, this.lastDecodedFrames = e4;
            }
          }, e3.checkFPSInterval = function() {
            var t4 = this.media;
            if (t4)
              if (this.isVideoPlaybackQualityAvailable) {
                var e4 = t4.getVideoPlaybackQuality();
                this.checkFPS(t4, e4.totalVideoFrames, e4.droppedVideoFrames);
              } else
                this.checkFPS(t4, t4.webkitDecodedFrameCount, t4.webkitDroppedFrameCount);
          }, t3;
        }();
        var ti = r2(300);
        function ei(t3) {
          var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return ei = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e3) {
              if (e3.has(t4))
                return e3.get(t4);
              e3.set(t4, i3);
            }
            function i3() {
              return ri(t4, arguments, ai(this).constructor);
            }
            return i3.prototype = Object.create(t4.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), ni(i3, t4);
          }, ei(t3);
        }
        function ri(t3, e3, r3) {
          return ri = ii() ? Reflect.construct.bind() : function(t4, e4, r4) {
            var i3 = [null];
            i3.push.apply(i3, e4);
            var n2 = new (Function.bind.apply(t4, i3))();
            return r4 && ni(n2, r4.prototype), n2;
          }, ri.apply(null, arguments);
        }
        function ii() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function ni(t3, e3) {
          return ni = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, ni(t3, e3);
        }
        function ai(t3) {
          return ai = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, ai(t3);
        }
        var si = "[eme]", oi = function() {
          function t3(e4) {
            this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = t3.CDMCleanupPromise ? [t3.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = l.logger.debug.bind(l.logger, si), this.log = l.logger.log.bind(l.logger, si), this.warn = l.logger.warn.bind(l.logger, si), this.error = l.logger.error.bind(l.logger, si), this.hls = e4, this.config = e4.config, this.registerListeners();
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.unregisterListeners(), this.onMediaDetached(), this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null;
          }, e3.registerListeners = function() {
            this.hls.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this);
          }, e3.unregisterListeners = function() {
            this.hls.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this);
          }, e3.getLicenseServerUrl = function(t4) {
            var e4 = this.config, r3 = e4.drmSystems, i3 = e4.widevineLicenseUrl, n2 = r3[t4];
            if (n2)
              return n2.licenseUrl;
            if (t4 === m.WIDEVINE && i3)
              return i3;
            throw new Error('no license server URL configured for key-system "' + t4 + '"');
          }, e3.getServerCertificateUrl = function(t4) {
            var e4 = this.config.drmSystems[t4];
            if (e4)
              return e4.serverCertificateUrl;
            this.log('No Server Certificate in config.drmSystems["' + t4 + '"]');
          }, e3.attemptKeySystemAccess = function(t4) {
            var e4 = this, r3 = this.hls.levels, i3 = function(t5, e5, r4) {
              return !!t5 && r4.indexOf(t5) === e5;
            }, n2 = r3.map(function(t5) {
              return t5.audioCodec;
            }).filter(i3), a2 = r3.map(function(t5) {
              return t5.videoCodec;
            }).filter(i3);
            return n2.length + a2.length === 0 && a2.push("avc1.42e01e"), new Promise(function(r4, i4) {
              !function t5(s2) {
                var l2 = s2.shift();
                e4.getMediaKeysPromise(l2, n2, a2).then(function(t6) {
                  return r4({ keySystem: l2, mediaKeys: t6 });
                }).catch(function(e5) {
                  s2.length ? t5(s2) : i4(e5 instanceof li ? e5 : new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_ACCESS, error: e5, fatal: true }, e5.message));
                });
              }(t4);
            });
          }, e3.requestMediaKeySystemAccess = function(t4, e4) {
            var r3 = this.config.requestMediaKeySystemAccessFunc;
            if ("function" != typeof r3) {
              var i3 = "Configured requestMediaKeySystemAccess is not a function " + r3;
              return null === k && "http:" === self.location.protocol && (i3 = "navigator.requestMediaKeySystemAccess is not available over insecure protocol " + location.protocol), Promise.reject(new Error(i3));
            }
            return r3(t4, e4);
          }, e3.getMediaKeysPromise = function(t4, e4, r3) {
            var i3 = this, n2 = function(t5, e5, r4, i4) {
              var n3;
              switch (t5) {
                case m.FAIRPLAY:
                  n3 = ["cenc", "sinf"];
                  break;
                case m.WIDEVINE:
                case m.PLAYREADY:
                  n3 = ["cenc"];
                  break;
                case m.CLEARKEY:
                  n3 = ["cenc", "keyids"];
                  break;
                default:
                  throw new Error("Unknown key-system: " + t5);
              }
              return function(t6, e6, r5, i5) {
                return [{ initDataTypes: t6, persistentState: i5.persistentState || "not-allowed", distinctiveIdentifier: i5.distinctiveIdentifier || "not-allowed", sessionTypes: i5.sessionTypes || [i5.sessionType || "temporary"], audioCapabilities: e6.map(function(t7) {
                  return { contentType: 'audio/mp4; codecs="' + t7 + '"', robustness: i5.audioRobustness || "", encryptionScheme: i5.audioEncryptionScheme || null };
                }), videoCapabilities: r5.map(function(t7) {
                  return { contentType: 'video/mp4; codecs="' + t7 + '"', robustness: i5.videoRobustness || "", encryptionScheme: i5.videoEncryptionScheme || null };
                }) }];
              }(n3, e5, r4, i4);
            }(t4, e4, r3, this.config.drmSystemOptions), a2 = this.keySystemAccessPromises[t4], s2 = null == a2 ? void 0 : a2.keySystemAccess;
            if (!s2) {
              this.log('Requesting encrypted media "' + t4 + '" key-system access with config: ' + JSON.stringify(n2)), s2 = this.requestMediaKeySystemAccess(t4, n2);
              var o2 = this.keySystemAccessPromises[t4] = { keySystemAccess: s2 };
              return s2.catch(function(e5) {
                i3.log('Failed to obtain access to key-system "' + t4 + '": ' + e5);
              }), s2.then(function(e5) {
                i3.log('Access for key-system "' + e5.keySystem + '" obtained');
                var r4 = i3.fetchServerCertificate(t4);
                return i3.log('Create media-keys for "' + t4 + '"'), o2.mediaKeys = e5.createMediaKeys().then(function(e6) {
                  return i3.log('Media-keys created for "' + t4 + '"'), r4.then(function(r5) {
                    return r5 ? i3.setMediaKeysServerCertificate(e6, t4, r5) : e6;
                  });
                }), o2.mediaKeys.catch(function(e6) {
                  i3.error('Failed to create media-keys for "' + t4 + '"}: ' + e6);
                }), o2.mediaKeys;
              });
            }
            return s2.then(function() {
              return a2.mediaKeys;
            });
          }, e3.createMediaKeySessionContext = function(t4) {
            var e4 = t4.decryptdata, r3 = t4.keySystem, i3 = t4.mediaKeys;
            this.log('Creating key-system session "' + r3 + '" keyId: ' + ti.default.hexDump(e4.keyId || []));
            var n2 = i3.createSession(), a2 = { decryptdata: e4, keySystem: r3, mediaKeys: i3, mediaKeysSession: n2, keyStatus: "status-pending" };
            return this.mediaKeySessions.push(a2), a2;
          }, e3.renewKeySession = function(t4) {
            var e4 = t4.decryptdata;
            if (e4.pssh) {
              var r3 = this.createMediaKeySessionContext(t4), i3 = this.getKeyIdString(e4);
              this.keyIdToKeySessionPromise[i3] = this.generateRequestWithPreferredKeySession(r3, "cenc", e4.pssh, "expired");
            } else
              this.warn("Could not renew expired session. Missing pssh initData.");
            this.removeSession(t4);
          }, e3.getKeyIdString = function(t4) {
            if (!t4)
              throw new Error("Could not read keyId of undefined decryptdata");
            if (null === t4.keyId)
              throw new Error("keyId is null");
            return ti.default.hexDump(t4.keyId);
          }, e3.updateKeySession = function(t4, e4) {
            var r3, i3 = t4.mediaKeysSession;
            return this.log('Updating key-session "' + i3.sessionId + '" for keyID ' + ti.default.hexDump((null === (r3 = t4.decryptdata) || void 0 === r3 ? void 0 : r3.keyId) || []) + "\n      } (data length: " + (e4 ? e4.byteLength : e4) + ")"), i3.update(e4);
          }, e3.selectKeySystemFormat = function(t4) {
            var e4 = Object.keys(t4.levelkeys || {});
            return this.keyFormatPromise || (this.log("Selecting key-system from fragment (sn: " + t4.sn + " " + t4.type + ": " + t4.level + ") key formats " + e4.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(e4)), this.keyFormatPromise;
          }, e3.getKeyFormatPromise = function(t4) {
            var e4 = this;
            return new Promise(function(r3, i3) {
              var n2 = D(e4.config), a2 = t4.map(L).filter(function(t5) {
                return !!t5 && -1 !== n2.indexOf(t5);
              });
              return e4.getKeySystemSelectionPromise(a2).then(function(t5) {
                var e5 = t5.keySystem, n3 = A(e5);
                n3 ? r3(n3) : i3(new Error('Unable to find format for key-system "' + e5 + '"'));
              }).catch(i3);
            });
          }, e3.loadKey = function(t4) {
            var e4 = this, r3 = t4.keyInfo.decryptdata, i3 = this.getKeyIdString(r3), n2 = "(keyId: " + i3 + ' format: "' + r3.keyFormat + '" method: ' + r3.method + " uri: " + r3.uri + ")";
            this.log("Starting session for key " + n2);
            var a2 = this.keyIdToKeySessionPromise[i3];
            return a2 || (a2 = this.keyIdToKeySessionPromise[i3] = this.getKeySystemForKeyPromise(r3).then(function(i4) {
              var a3 = i4.keySystem, s2 = i4.mediaKeys;
              return e4.throwIfDestroyed(), e4.log("Handle encrypted media sn: " + t4.frag.sn + " " + t4.frag.type + ": " + t4.frag.level + " using key " + n2), e4.attemptSetMediaKeys(a3, s2).then(function() {
                e4.throwIfDestroyed();
                var t5 = e4.createMediaKeySessionContext({ keySystem: a3, mediaKeys: s2, decryptdata: r3 });
                return e4.generateRequestWithPreferredKeySession(t5, "cenc", r3.pssh, "playlist-key");
              });
            })).catch(function(t5) {
              return e4.handleError(t5);
            }), a2;
          }, e3.throwIfDestroyed = function(t4) {
            if (void 0 === t4 && (t4 = "Invalid state"), !this.hls)
              throw new Error("invalid state");
          }, e3.handleError = function(t4) {
            this.hls && (this.error(t4.message), t4 instanceof li ? this.hls.trigger(s.Events.ERROR, t4.data) : this.hls.trigger(s.Events.ERROR, { type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_KEYS, error: t4, fatal: true }));
          }, e3.getKeySystemForKeyPromise = function(t4) {
            var e4 = this.getKeyIdString(t4), r3 = this.keyIdToKeySessionPromise[e4];
            if (!r3) {
              var i3 = L(t4.keyFormat), n2 = i3 ? [i3] : D(this.config);
              return this.attemptKeySystemAccess(n2);
            }
            return r3;
          }, e3.getKeySystemSelectionPromise = function(t4) {
            if (t4.length || (t4 = D(this.config)), 0 === t4.length)
              throw new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE, fatal: true }, "Missing key-system license configuration options " + JSON.stringify({ drmSystems: this.config.drmSystems }));
            return this.attemptKeySystemAccess(t4);
          }, e3._onMediaEncrypted = function(t4) {
            var e4 = this, r3 = t4.initDataType, i3 = t4.initData;
            if (this.debug('"' + t4.type + '" event: init data type: "' + r3 + '"'), null !== i3) {
              var n2, a2;
              if ("sinf" === r3 && this.config.drmSystems[m.FAIRPLAY]) {
                var s2 = (0, R.bin2str)(new Uint8Array(i3));
                try {
                  var o2 = S(JSON.parse(s2).sinf), l2 = (0, R.parseSinf)(new Uint8Array(o2));
                  if (!l2)
                    return;
                  n2 = l2.subarray(8, 24), a2 = m.FAIRPLAY;
                } catch (t5) {
                  return void this.warn('Failed to parse sinf "encrypted" event message initData');
                }
              } else {
                var u2 = (0, R.parsePssh)(i3);
                if (null === u2)
                  return;
                0 === u2.version && u2.systemId === E.WIDEVINE && u2.data && (n2 = u2.data.subarray(8, 24)), a2 = function(t5) {
                  if (t5 === E.WIDEVINE)
                    return m.WIDEVINE;
                }(u2.systemId);
              }
              if (a2 && n2) {
                for (var d2 = ti.default.hexDump(n2), h2 = this.keyIdToKeySessionPromise, c2 = this.mediaKeySessions, f2 = h2[d2], g2 = function(t5) {
                  var a3 = c2[t5], s3 = a3.decryptdata;
                  if (s3.pssh || !s3.keyId)
                    return "continue";
                  var o3 = ti.default.hexDump(s3.keyId);
                  return d2 === o3 || -1 !== s3.uri.replace(/-/g, "").indexOf(d2) ? (f2 = h2[o3], delete h2[o3], s3.pssh = new Uint8Array(i3), s3.keyId = n2, f2 = h2[d2] = f2.then(function() {
                    return e4.generateRequestWithPreferredKeySession(a3, r3, i3, "encrypted-event-key-match");
                  }), "break") : void 0;
                }, v2 = 0; v2 < c2.length; v2++) {
                  var p2 = g2(v2);
                  if ("continue" !== p2 && "break" === p2)
                    break;
                }
                f2 || (f2 = h2[d2] = this.getKeySystemSelectionPromise([a2]).then(function(t5) {
                  var a3, s3 = t5.keySystem, o3 = t5.mediaKeys;
                  e4.throwIfDestroyed();
                  var l3 = new w("ISO-23001-7", d2, null != (a3 = A(s3)) ? a3 : "");
                  return l3.pssh = new Uint8Array(i3), l3.keyId = n2, e4.attemptSetMediaKeys(s3, o3).then(function() {
                    e4.throwIfDestroyed();
                    var t6 = e4.createMediaKeySessionContext({ decryptdata: l3, keySystem: s3, mediaKeys: o3 });
                    return e4.generateRequestWithPreferredKeySession(t6, r3, i3, "encrypted-event-no-match");
                  });
                })), f2.catch(function(t5) {
                  return e4.handleError(t5);
                });
              }
            }
          }, e3._onWaitingForKey = function(t4) {
            this.log('"' + t4.type + '" event');
          }, e3.attemptSetMediaKeys = function(t4, e4) {
            var r3 = this, i3 = this.setMediaKeysQueue.slice();
            this.log('Setting media-keys for "' + t4 + '"');
            var n2 = Promise.all(i3).then(function() {
              if (!r3.media)
                throw new Error("Attempted to set mediaKeys without media element attached");
              return r3.media.setMediaKeys(e4);
            });
            return this.setMediaKeysQueue.push(n2), n2.then(function() {
              r3.log('Media-keys set for "' + t4 + '"'), i3.push(n2), r3.setMediaKeysQueue = r3.setMediaKeysQueue.filter(function(t5) {
                return -1 === i3.indexOf(t5);
              });
            });
          }, e3.generateRequestWithPreferredKeySession = function(t4, e4, r3, i3) {
            var n2, a2, s2 = this, l2 = null === (n2 = this.config.drmSystems) || void 0 === n2 || null === (a2 = n2[t4.keySystem]) || void 0 === a2 ? void 0 : a2.generateRequest;
            if (l2)
              try {
                var u2 = l2.call(this.hls, e4, r3, t4);
                if (!u2)
                  throw new Error("Invalid response from configured generateRequest filter");
                e4 = u2.initDataType, r3 = t4.decryptdata.pssh = u2.initData ? new Uint8Array(u2.initData) : null;
              } catch (t5) {
                var d2;
                if (this.warn(t5.message), null !== (d2 = this.hls) && void 0 !== d2 && d2.config.debug)
                  throw t5;
              }
            if (null === r3)
              return this.log('Skipping key-session request for "' + i3 + '" (no initData)'), Promise.resolve(t4);
            var h2 = this.getKeyIdString(t4.decryptdata);
            this.log('Generating key-session request for "' + i3 + '": ' + h2 + " (init data type: " + e4 + " length: " + (r3 ? r3.byteLength : null) + ")");
            var c2 = new (be())();
            t4.mediaKeysSession.onmessage = function(e5) {
              var r4 = t4.mediaKeysSession;
              if (r4) {
                var i4 = e5.messageType, n3 = e5.message;
                s2.log('"' + i4 + '" message event for session "' + r4.sessionId + '" message size: ' + n3.byteLength), "license-request" === i4 || "license-renewal" === i4 ? s2.renewLicense(t4, n3).catch(function(t5) {
                  s2.handleError(t5), c2.emit("error", t5);
                }) : "license-release" === i4 ? t4.keySystem === m.FAIRPLAY && (s2.updateKeySession(t4, b("acknowledged")), s2.removeSession(t4)) : s2.warn('unhandled media key message type "' + i4 + '"');
              } else
                c2.emit("error", new Error("invalid state"));
            }, t4.mediaKeysSession.onkeystatuseschange = function(e5) {
              if (t4.mediaKeysSession) {
                s2.onKeyStatusChange(t4);
                var r4 = t4.keyStatus;
                c2.emit("keyStatus", r4), "expired" === r4 && (s2.warn(t4.keySystem + " expired for key " + h2), s2.renewKeySession(t4));
              } else
                c2.emit("error", new Error("invalid state"));
            };
            var f2 = new Promise(function(t5, e5) {
              c2.on("error", e5), c2.on("keyStatus", function(r4) {
                r4.startsWith("usable") ? t5() : "output-restricted" === r4 ? e5(new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED, fatal: false }, "HDCP level output restricted")) : "internal-error" === r4 ? e5(new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR, fatal: true }, 'key status changed to "' + r4 + '"')) : "expired" === r4 ? e5(new Error("key expired while generating request")) : s2.warn('unhandled key status change "' + r4 + '"');
              });
            });
            return t4.mediaKeysSession.generateRequest(e4, r3).then(function() {
              var e5;
              s2.log('Request generated for key-session "' + (null === (e5 = t4.mediaKeysSession) || void 0 === e5 ? void 0 : e5.sessionId) + '" keyId: ' + h2);
            }).catch(function(t5) {
              throw new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_NO_SESSION, error: t5, fatal: false }, "Error generating key-session request: " + t5);
            }).then(function() {
              return f2;
            }).catch(function(e5) {
              throw c2.removeAllListeners(), s2.removeSession(t4), e5;
            }).then(function() {
              return c2.removeAllListeners(), t4;
            });
          }, e3.onKeyStatusChange = function(t4) {
            var e4 = this;
            t4.mediaKeysSession.keyStatuses.forEach(function(r3, i3) {
              e4.log('key status change "' + r3 + '" for keyStatuses keyId: ' + ti.default.hexDump("buffer" in i3 ? new Uint8Array(i3.buffer, i3.byteOffset, i3.byteLength) : new Uint8Array(i3)) + " session keyId: " + ti.default.hexDump(new Uint8Array(t4.decryptdata.keyId || [])) + " uri: " + t4.decryptdata.uri), t4.keyStatus = r3;
            });
          }, e3.fetchServerCertificate = function(t4) {
            var e4 = this;
            return new Promise(function(r3, i3) {
              var n2 = e4.getServerCertificateUrl(t4);
              if (!n2)
                return r3();
              e4.log('Fetching serverCertificate for "' + t4 + '"');
              var a2 = new XMLHttpRequest();
              a2.open("GET", n2, true), a2.responseType = "arraybuffer", a2.onreadystatechange = function() {
                a2.readyState === XMLHttpRequest.DONE && (200 === a2.status ? r3(a2.response) : i3(new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: a2 }, '"' + t4 + '" certificate request XHR failed (' + n2 + "). Status: " + a2.status + " (" + a2.statusText + ")")));
              }, a2.send();
            });
          }, e3.setMediaKeysServerCertificate = function(t4, e4, r3) {
            var i3 = this;
            return new Promise(function(n2, a2) {
              t4.setServerCertificate(r3).then(function(a3) {
                i3.log("setServerCertificate " + (a3 ? "success" : "not supported by CDM") + " (" + (null == r3 ? void 0 : r3.byteLength) + ') on "' + e4 + '"'), n2(t4);
              }).catch(function(t5) {
                a2(new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED, error: t5, fatal: true }, t5.message));
              });
            });
          }, e3.renewLicense = function(t4, e4) {
            var r3 = this;
            return this.requestLicense(t4, new Uint8Array(e4)).then(function(e5) {
              return r3.updateKeySession(t4, new Uint8Array(e5)).catch(function(t5) {
                throw new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED, error: t5, fatal: true }, t5.message);
              });
            });
          }, e3.setupLicenseXHR = function(t4, e4, r3, i3) {
            var n2 = this, a2 = this.config.licenseXhrSetup;
            return a2 ? Promise.resolve().then(function() {
              if (!r3.decryptdata)
                throw new Error("Key removed");
              return a2.call(n2.hls, t4, e4, r3, i3);
            }).catch(function(s2) {
              if (!r3.decryptdata)
                throw s2;
              return t4.open("POST", e4, true), a2.call(n2.hls, t4, e4, r3, i3);
            }).then(function(r4) {
              return t4.readyState || t4.open("POST", e4, true), { xhr: t4, licenseChallenge: r4 || i3 };
            }) : (t4.open("POST", e4, true), Promise.resolve({ xhr: t4, licenseChallenge: i3 }));
          }, e3.requestLicense = function(t4, e4) {
            var r3 = this;
            return new Promise(function(i3, n2) {
              var a2 = r3.getLicenseServerUrl(t4.keySystem);
              r3.log("Sending license request to URL: " + a2);
              var s2 = new XMLHttpRequest();
              s2.responseType = "arraybuffer", s2.onreadystatechange = function() {
                if (!r3.hls || !t4.mediaKeysSession)
                  return n2(new Error("invalid state"));
                if (4 === s2.readyState)
                  if (200 === s2.status) {
                    r3._requestLicenseFailureCount = 0;
                    var l2 = s2.response;
                    r3.log("License received " + (l2 instanceof ArrayBuffer ? l2.byteLength : l2));
                    var u2 = r3.config.licenseResponseCallback;
                    if (u2)
                      try {
                        l2 = u2.call(r3.hls, s2, a2, t4);
                      } catch (t5) {
                        r3.error(t5);
                      }
                    i3(l2);
                  } else if (r3._requestLicenseFailureCount++, r3._requestLicenseFailureCount > 3 || s2.status >= 400 && s2.status < 500)
                    n2(new li({ type: o.ErrorTypes.KEY_SYSTEM_ERROR, details: o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true, networkDetails: s2 }, "License Request XHR failed (" + a2 + "). Status: " + s2.status + " (" + s2.statusText + ")"));
                  else {
                    var d2 = 3 - r3._requestLicenseFailureCount + 1;
                    r3.warn("Retrying license request, " + d2 + " attempts left"), r3.requestLicense(t4, e4).then(i3, n2);
                  }
              }, t4.licenseXhr && t4.licenseXhr.readyState !== XMLHttpRequest.DONE && t4.licenseXhr.abort(), t4.licenseXhr = s2, r3.setupLicenseXHR(s2, a2, t4, e4).then(function(t5) {
                var e5 = t5.xhr, r4 = t5.licenseChallenge;
                e5.send(r4);
              });
            });
          }, e3.onMediaAttached = function(t4, e4) {
            if (this.config.emeEnabled) {
              var r3 = e4.media;
              this.media = r3, r3.addEventListener("encrypted", this.onMediaEncrypted), r3.addEventListener("waitingforkey", this.onWaitingForKey);
            }
          }, e3.onMediaDetached = function() {
            var e4 = this, r3 = this.media, i3 = this.mediaKeySessions;
            r3 && (r3.removeEventListener("encrypted", this.onMediaEncrypted), r3.removeEventListener("waitingforkey", this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, w.clearKeyUriToKeyIdMap();
            var n2 = i3.length;
            t3.CDMCleanupPromise = Promise.all(i3.map(function(t4) {
              return e4.removeSession(t4);
            }).concat(null == r3 ? void 0 : r3.setMediaKeys(null).catch(function(t4) {
              e4.log("Could not clear media keys: " + t4 + ". media.src: " + (null == r3 ? void 0 : r3.src));
            }))).then(function() {
              n2 && (e4.log("finished closing key sessions and clearing media keys"), i3.length = 0);
            }).catch(function(t4) {
              e4.log("Could not close sessions and clear media keys: " + t4 + ". media.src: " + (null == r3 ? void 0 : r3.src));
            });
          }, e3.onManifestLoaded = function(t4, e4) {
            var r3 = e4.sessionKeys;
            if (r3 && this.config.emeEnabled && !this.keyFormatPromise) {
              var i3 = r3.reduce(function(t5, e5) {
                return -1 === t5.indexOf(e5.keyFormat) && t5.push(e5.keyFormat), t5;
              }, []);
              this.log("Selecting key-system from session-keys " + i3.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(i3);
            }
          }, e3.removeSession = function(t4) {
            var e4 = this, r3 = t4.mediaKeysSession, i3 = t4.licenseXhr;
            if (r3) {
              this.log("Remove licenses and keys and close session " + r3.sessionId), r3.onmessage = null, r3.onkeystatuseschange = null, i3 && i3.readyState !== XMLHttpRequest.DONE && i3.abort(), t4.mediaKeysSession = t4.decryptdata = t4.licenseXhr = void 0;
              var n2 = this.mediaKeySessions.indexOf(t4);
              return n2 > -1 && this.mediaKeySessions.splice(n2, 1), r3.remove().catch(function(t5) {
                e4.log("Could not remove session: " + t5);
              }).then(function() {
                return r3.close();
              }).catch(function(t5) {
                e4.log("Could not close session: " + t5);
              });
            }
          }, t3;
        }();
        oi.CDMCleanupPromise = void 0;
        var li = function(t3) {
          var e3, r3;
          function i3(e4, r4) {
            var i4;
            return (i4 = t3.call(this, r4) || this).data = void 0, i4.data = e4, e4.err = e4.error, i4;
          }
          return r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, ni(e3, r3), i3;
        }(ei(Error));
        const ui = oi;
        var di, hi, ci;
        function fi(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function gi(t3, e3, r3) {
          return e3 && fi(t3.prototype, e3), r3 && fi(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        function vi(t3, e3) {
          var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
          if (r3)
            return (r3 = r3.call(t3)).next.bind(r3);
          if (Array.isArray(t3) || (r3 = function(t4, e4) {
            if (t4) {
              if ("string" == typeof t4)
                return pi(t4, e4);
              var r4 = Object.prototype.toString.call(t4).slice(8, -1);
              return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? pi(t4, e4) : void 0;
            }
          }(t3)) || e3 && t3 && "number" == typeof t3.length) {
            r3 && (t3 = r3);
            var i3 = 0;
            return function() {
              return i3 >= t3.length ? { done: true } : { done: false, value: t3[i3++] };
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function pi(t3, e3) {
          (null == e3 || e3 > t3.length) && (e3 = t3.length);
          for (var r3 = 0, i3 = new Array(e3); r3 < e3; r3++)
            i3[r3] = t3[r3];
          return i3;
        }
        function mi() {
          return mi = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, mi.apply(this, arguments);
        }
        !function(t3) {
          t3.MANIFEST = "m", t3.AUDIO = "a", t3.VIDEO = "v", t3.MUXED = "av", t3.INIT = "i", t3.CAPTION = "c", t3.TIMED_TEXT = "tt", t3.KEY = "k", t3.OTHER = "o";
        }(di || (di = {})), function(t3) {
          t3.DASH = "d", t3.HLS = "h", t3.SMOOTH = "s", t3.OTHER = "o";
        }(hi || (hi = {})), function(t3) {
          t3.VOD = "v", t3.LIVE = "l";
        }(ci || (ci = {}));
        var yi = function() {
          function t3(e4) {
            var r3 = this;
            this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = false, this.initialized = false, this.starved = false, this.buffering = true, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
              r3.initialized && (r3.starved = true), r3.buffering = true;
            }, this.onPlaying = function() {
              r3.initialized || (r3.initialized = true), r3.buffering = false;
            }, this.applyPlaylistData = function(t4) {
              try {
                r3.apply(t4, { ot: di.MANIFEST, su: !r3.initialized });
              } catch (t5) {
                l.logger.warn("Could not generate manifest CMCD data.", t5);
              }
            }, this.applyFragmentData = function(t4) {
              try {
                var e5 = t4.frag, i4 = r3.hls.levels[e5.level], n3 = r3.getObjectType(e5), a2 = { d: 1e3 * e5.duration, ot: n3 };
                n3 !== di.VIDEO && n3 !== di.AUDIO && n3 != di.MUXED || (a2.br = i4.bitrate / 1e3, a2.tb = r3.getTopBandwidth(n3) / 1e3, a2.bl = r3.getBufferLength(n3)), r3.apply(t4, a2);
              } catch (t5) {
                l.logger.warn("Could not generate segment CMCD data.", t5);
              }
            }, this.hls = e4;
            var i3 = this.config = e4.config, n2 = i3.cmcd;
            null != n2 && (i3.pLoader = this.createPlaylistLoader(), i3.fLoader = this.createFragmentLoader(), this.sid = n2.sessionId || t3.uuid(), this.cid = n2.contentId, this.useHeaders = true === n2.useHeaders, this.registerListeners());
          }
          var e3 = t3.prototype;
          return e3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), t4.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this);
          }, e3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(s.Events.MEDIA_DETACHED, this.onMediaDetached, this), t4.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this), this.onMediaDetached();
          }, e3.destroy = function() {
            this.unregisterListeners(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
          }, e3.onMediaAttached = function(t4, e4) {
            this.media = e4.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying);
          }, e3.onMediaDetached = function() {
            this.media && (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null);
          }, e3.onBufferCreated = function(t4, e4) {
            var r3, i3;
            this.audioBuffer = null === (r3 = e4.tracks.audio) || void 0 === r3 ? void 0 : r3.buffer, this.videoBuffer = null === (i3 = e4.tracks.video) || void 0 === i3 ? void 0 : i3.buffer;
          }, e3.createData = function() {
            var t4;
            return { v: 1, sf: hi.HLS, sid: this.sid, cid: this.cid, pr: null === (t4 = this.media) || void 0 === t4 ? void 0 : t4.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 };
          }, e3.apply = function(e4, r3) {
            void 0 === r3 && (r3 = {}), mi(r3, this.createData());
            var i3 = r3.ot === di.INIT || r3.ot === di.VIDEO || r3.ot === di.MUXED;
            if (this.starved && i3 && (r3.bs = true, r3.su = true, this.starved = false), null == r3.su && (r3.su = this.buffering), this.useHeaders) {
              var n2 = t3.toHeaders(r3);
              if (!Object.keys(n2).length)
                return;
              e4.headers || (e4.headers = {}), mi(e4.headers, n2);
            } else {
              var a2 = t3.toQuery(r3);
              if (!a2)
                return;
              e4.url = t3.appendQueryToUri(e4.url, a2);
            }
          }, e3.getObjectType = function(t4) {
            var e4 = t4.type;
            return "subtitle" === e4 ? di.TIMED_TEXT : "initSegment" === t4.sn ? di.INIT : "audio" === e4 ? di.AUDIO : "main" === e4 ? this.hls.audioTracks.length ? di.VIDEO : di.MUXED : void 0;
          }, e3.getTopBandwidth = function(t4) {
            var e4, r3 = 0, i3 = this.hls;
            if (t4 === di.AUDIO)
              e4 = i3.audioTracks;
            else {
              var n2 = i3.maxAutoLevel, a2 = n2 > -1 ? n2 + 1 : i3.levels.length;
              e4 = i3.levels.slice(0, a2);
            }
            for (var s2, o2 = vi(e4); !(s2 = o2()).done; ) {
              var l2 = s2.value;
              l2.bitrate > r3 && (r3 = l2.bitrate);
            }
            return r3 > 0 ? r3 : NaN;
          }, e3.getBufferLength = function(t4) {
            var e4 = this.hls.media, r3 = t4 === di.AUDIO ? this.audioBuffer : this.videoBuffer;
            return r3 && e4 ? 1e3 * Bt.bufferInfo(r3, e4.currentTime, this.config.maxBufferHole).len : NaN;
          }, e3.createPlaylistLoader = function() {
            var t4 = this.config.pLoader, e4 = this.applyPlaylistData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i3 = t5.prototype;
              return i3.destroy = function() {
                this.loader.destroy();
              }, i3.abort = function() {
                this.loader.abort();
              }, i3.load = function(t6, r4, i4) {
                e4(t6), this.loader.load(t6, r4, i4);
              }, gi(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, e3.createFragmentLoader = function() {
            var t4 = this.config.fLoader, e4 = this.applyFragmentData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i3 = t5.prototype;
              return i3.destroy = function() {
                this.loader.destroy();
              }, i3.abort = function() {
                this.loader.abort();
              }, i3.load = function(t6, r4, i4) {
                e4(t6), this.loader.load(t6, r4, i4);
              }, gi(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, t3.uuid = function() {
            var t4 = URL.createObjectURL(new Blob()), e4 = t4.toString();
            return URL.revokeObjectURL(t4), e4.slice(e4.lastIndexOf("/") + 1);
          }, t3.serialize = function(t4) {
            for (var e4, r3 = [], i3 = function(t5) {
              return !Number.isNaN(t5) && null != t5 && "" !== t5 && false !== t5;
            }, n2 = function(t5) {
              return Math.round(t5);
            }, a2 = function(t5) {
              return 100 * n2(t5 / 100);
            }, s2 = { br: n2, d: n2, bl: a2, dl: a2, mtp: a2, nor: function(t5) {
              return encodeURIComponent(t5);
            }, rtp: a2, tb: n2 }, o2 = vi(Object.keys(t4 || {}).sort()); !(e4 = o2()).done; ) {
              var l2 = e4.value, u2 = t4[l2];
              if (i3(u2) && !("v" === l2 && 1 === u2 || "pr" == l2 && 1 === u2)) {
                var d2 = s2[l2];
                d2 && (u2 = d2(u2));
                var h2, c2 = typeof u2;
                h2 = "ot" === l2 || "sf" === l2 || "st" === l2 ? l2 + "=" + u2 : "boolean" === c2 ? l2 : "number" === c2 ? l2 + "=" + u2 : l2 + "=" + JSON.stringify(u2), r3.push(h2);
              }
            }
            return r3.join(",");
          }, t3.toHeaders = function(e4) {
            for (var r3 = {}, i3 = ["Object", "Request", "Session", "Status"], n2 = [{}, {}, {}, {}], a2 = { br: 0, d: 0, ot: 0, tb: 0, bl: 1, dl: 1, mtp: 1, nor: 1, nrr: 1, su: 1, cid: 2, pr: 2, sf: 2, sid: 2, st: 2, v: 2, bs: 3, rtp: 3 }, s2 = 0, o2 = Object.keys(e4); s2 < o2.length; s2++) {
              var l2 = o2[s2];
              n2[null != a2[l2] ? a2[l2] : 1][l2] = e4[l2];
            }
            for (var u2 = 0; u2 < n2.length; u2++) {
              var d2 = t3.serialize(n2[u2]);
              d2 && (r3["CMCD-" + i3[u2]] = d2);
            }
            return r3;
          }, t3.toQuery = function(e4) {
            return "CMCD=" + encodeURIComponent(t3.serialize(e4));
          }, t3.appendQueryToUri = function(t4, e4) {
            if (!e4)
              return t4;
            var r3 = t4.includes("?") ? "&" : "?";
            return "" + t4 + r3 + e4;
          }, t3;
        }(), Ei = r2(408), Ti = /^age:\s*[\d.]+\s*$/m;
        const Si = function() {
          function t3(t4) {
            this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = void 0, this.loader = null, this.stats = void 0, this.xhrSetup = t4 ? t4.xhrSetup : null, this.stats = new Ei.LoadStats(), this.retryDelay = 0;
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null;
          }, e3.abortInternal = function() {
            var t4 = this.loader;
            self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), t4 && (t4.onreadystatechange = null, t4.onprogress = null, 4 !== t4.readyState && (this.stats.aborted = true, t4.abort()));
          }, e3.abort = function() {
            var t4;
            this.abortInternal(), null !== (t4 = this.callbacks) && void 0 !== t4 && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader);
          }, e3.load = function(t4, e4, r3) {
            if (this.stats.loading.start)
              throw new Error("Loader can only be used once.");
            this.stats.loading.start = self.performance.now(), this.context = t4, this.config = e4, this.callbacks = r3, this.retryDelay = e4.retryDelay, this.loadInternal();
          }, e3.loadInternal = function() {
            var t4 = this.config, e4 = this.context;
            if (t4) {
              var r3 = this.loader = new self.XMLHttpRequest(), i3 = this.stats;
              i3.loading.first = 0, i3.loaded = 0;
              var n2 = this.xhrSetup;
              try {
                if (n2)
                  try {
                    n2(r3, e4.url);
                  } catch (t5) {
                    r3.open("GET", e4.url, true), n2(r3, e4.url);
                  }
                r3.readyState || r3.open("GET", e4.url, true);
                var a2 = this.context.headers;
                if (a2)
                  for (var s2 in a2)
                    r3.setRequestHeader(s2, a2[s2]);
              } catch (t5) {
                return void this.callbacks.onError({ code: r3.status, text: t5.message }, e4, r3);
              }
              e4.rangeEnd && r3.setRequestHeader("Range", "bytes=" + e4.rangeStart + "-" + (e4.rangeEnd - 1)), r3.onreadystatechange = this.readystatechange.bind(this), r3.onprogress = this.loadprogress.bind(this), r3.responseType = e4.responseType, self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), t4.timeout), r3.send();
            }
          }, e3.readystatechange = function() {
            var t4 = this.context, e4 = this.loader, r3 = this.stats;
            if (t4 && e4) {
              var i3 = e4.readyState, n2 = this.config;
              if (!r3.aborted && i3 >= 2)
                if (self.clearTimeout(this.requestTimeout), 0 === r3.loading.first && (r3.loading.first = Math.max(self.performance.now(), r3.loading.start)), 4 === i3) {
                  e4.onreadystatechange = null, e4.onprogress = null;
                  var a2 = e4.status, s2 = "arraybuffer" === e4.responseType;
                  if (a2 >= 200 && a2 < 300 && (s2 && e4.response || null !== e4.responseText)) {
                    var o2, u2;
                    if (r3.loading.end = Math.max(self.performance.now(), r3.loading.first), u2 = s2 ? (o2 = e4.response).byteLength : (o2 = e4.responseText).length, r3.loaded = r3.total = u2, !this.callbacks)
                      return;
                    var d2 = this.callbacks.onProgress;
                    if (d2 && d2(r3, t4, o2, e4), !this.callbacks)
                      return;
                    var h2 = { url: e4.responseURL, data: o2 };
                    this.callbacks.onSuccess(h2, r3, t4, e4);
                  } else
                    r3.retry >= n2.maxRetry || a2 >= 400 && a2 < 499 ? (l.logger.error(a2 + " while loading " + t4.url), this.callbacks.onError({ code: a2, text: e4.statusText }, t4, e4)) : (l.logger.warn(a2 + " while loading " + t4.url + ", retrying in " + this.retryDelay + "..."), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay), this.retryDelay = Math.min(2 * this.retryDelay, n2.maxRetryDelay), r3.retry++);
                } else
                  self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), n2.timeout);
            }
          }, e3.loadtimeout = function() {
            l.logger.warn("timeout while loading " + this.context.url);
            var t4 = this.callbacks;
            t4 && (this.abortInternal(), t4.onTimeout(this.stats, this.context, this.loader));
          }, e3.loadprogress = function(t4) {
            var e4 = this.stats;
            e4.loaded = t4.loaded, t4.lengthComputable && (e4.total = t4.total);
          }, e3.getCacheAge = function() {
            var t4 = null;
            if (this.loader && Ti.test(this.loader.getAllResponseHeaders())) {
              var e4 = this.loader.getResponseHeader("age");
              t4 = e4 ? parseFloat(e4) : null;
            }
            return t4;
          }, t3;
        }();
        function bi(t3) {
          var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return bi = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e3) {
              if (e3.has(t4))
                return e3.get(t4);
              e3.set(t4, i3);
            }
            function i3() {
              return Li(t4, arguments, ki(this).constructor);
            }
            return i3.prototype = Object.create(t4.prototype, { constructor: { value: i3, enumerable: false, writable: true, configurable: true } }), Di(i3, t4);
          }, bi(t3);
        }
        function Li(t3, e3, r3) {
          return Li = Ai() ? Reflect.construct.bind() : function(t4, e4, r4) {
            var i3 = [null];
            i3.push.apply(i3, e4);
            var n2 = new (Function.bind.apply(t4, i3))();
            return r4 && Di(n2, r4.prototype), n2;
          }, Li.apply(null, arguments);
        }
        function Ai() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function Di(t3, e3) {
          return Di = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, Di(t3, e3);
        }
        function ki(t3) {
          return ki = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, ki(t3);
        }
        function Ri() {
          return Ri = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Ri.apply(this, arguments);
        }
        var Ii = function() {
          function t3(t4) {
            this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = void 0, this.response = void 0, this.controller = void 0, this.context = void 0, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = t4.fetchSetup || wi, this.controller = new self.AbortController(), this.stats = new Ei.LoadStats();
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
            this.loader = this.callbacks = null, this.abortInternal();
          }, e3.abortInternal = function() {
            var t4 = this.response;
            t4 && t4.ok || (this.stats.aborted = true, this.controller.abort());
          }, e3.abort = function() {
            var t4;
            this.abortInternal(), null !== (t4 = this.callbacks) && void 0 !== t4 && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response);
          }, e3.load = function(t4, e4, r3) {
            var i3 = this, n2 = this.stats;
            if (n2.loading.start)
              throw new Error("Loader can only be used once.");
            n2.loading.start = self.performance.now();
            var s2 = function(t5, e5) {
              var r4 = { method: "GET", mode: "cors", credentials: "same-origin", signal: e5, headers: new self.Headers(Ri({}, t5.headers)) };
              return t5.rangeEnd && r4.headers.set("Range", "bytes=" + t5.rangeStart + "-" + String(t5.rangeEnd - 1)), r4;
            }(t4, this.controller.signal), o2 = r3.onProgress, l2 = "arraybuffer" === t4.responseType, u2 = l2 ? "byteLength" : "length";
            this.context = t4, this.config = e4, this.callbacks = r3, this.request = this.fetchSetup(t4, s2), self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(function() {
              i3.abortInternal(), r3.onTimeout(n2, t4, i3.response);
            }, e4.timeout), self.fetch(this.request).then(function(r4) {
              if (i3.response = i3.loader = r4, !r4.ok) {
                var s3 = r4.status, u3 = r4.statusText;
                throw new Ci(u3 || "fetch, bad network response", s3, r4);
              }
              return n2.loading.first = Math.max(self.performance.now(), n2.loading.start), n2.total = parseInt(r4.headers.get("Content-Length") || "0"), o2 && (0, a.isFiniteNumber)(e4.highWaterMark) ? i3.loadProgressively(r4, n2, t4, e4.highWaterMark, o2) : l2 ? r4.arrayBuffer() : r4.text();
            }).then(function(s3) {
              var l3 = i3.response;
              self.clearTimeout(i3.requestTimeout), n2.loading.end = Math.max(self.performance.now(), n2.loading.first);
              var d2 = s3[u2];
              d2 && (n2.loaded = n2.total = d2);
              var h2 = { url: l3.url, data: s3 };
              o2 && !(0, a.isFiniteNumber)(e4.highWaterMark) && o2(n2, t4, s3, l3), r3.onSuccess(h2, n2, t4, l3);
            }).catch(function(e5) {
              if (self.clearTimeout(i3.requestTimeout), !n2.aborted) {
                var a2 = e5 && e5.code || 0, s3 = e5 ? e5.message : null;
                r3.onError({ code: a2, text: s3 }, t4, e5 ? e5.details : null);
              }
            });
          }, e3.getCacheAge = function() {
            var t4 = null;
            if (this.response) {
              var e4 = this.response.headers.get("age");
              t4 = e4 ? parseFloat(e4) : null;
            }
            return t4;
          }, e3.loadProgressively = function(t4, e4, r3, i3, n2) {
            void 0 === i3 && (i3 = 0);
            var a2 = new Oe(), s2 = t4.body.getReader();
            return function o2() {
              return s2.read().then(function(s3) {
                if (s3.done)
                  return a2.dataLength && n2(e4, r3, a2.flush(), t4), Promise.resolve(new ArrayBuffer(0));
                var l2 = s3.value, u2 = l2.length;
                return e4.loaded += u2, u2 < i3 || a2.dataLength ? (a2.push(l2), a2.dataLength >= i3 && n2(e4, r3, a2.flush(), t4)) : n2(e4, r3, l2, t4), o2();
              }).catch(function() {
                return Promise.reject();
              });
            }();
          }, t3;
        }();
        function wi(t3, e3) {
          return new self.Request(t3.url, e3);
        }
        var Ci = function(t3) {
          var e3, r3;
          function i3(e4, r4, i4) {
            var n2;
            return (n2 = t3.call(this, e4) || this).code = void 0, n2.details = void 0, n2.code = r4, n2.details = i4, n2;
          }
          return r3 = t3, (e3 = i3).prototype = Object.create(r3.prototype), e3.prototype.constructor = e3, Di(e3, r3), i3;
        }(bi(Error));
        const _i = Ii;
        var Pi = /\s/;
        function Oi() {
          return Oi = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, Oi.apply(this, arguments);
        }
        function xi(t3, e3) {
          var r3 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var i3 = Object.getOwnPropertySymbols(t3);
            e3 && (i3 = i3.filter(function(e4) {
              return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
            })), r3.push.apply(r3, i3);
          }
          return r3;
        }
        function Fi(t3) {
          for (var e3 = 1; e3 < arguments.length; e3++) {
            var r3 = null != arguments[e3] ? arguments[e3] : {};
            e3 % 2 ? xi(Object(r3), true).forEach(function(e4) {
              Mi(t3, e4, r3[e4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : xi(Object(r3)).forEach(function(e4) {
              Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
            });
          }
          return t3;
        }
        function Mi(t3, e3, r3) {
          return (e3 = function(t4) {
            var e4 = function(t5, e5) {
              if ("object" != typeof t5 || null === t5)
                return t5;
              var r4 = t5[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i3 = r4.call(t5, e5);
                if ("object" != typeof i3)
                  return i3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t5);
            }(t4, "string");
            return "symbol" == typeof e4 ? e4 : String(e4);
          }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
        }
        var Ni = Fi(Fi({ autoStartLoad: true, startPosition: -1, defaultAudioCodec: void 0, debug: false, capLevelOnFPSDrop: false, capLevelToPlayerSize: false, ignoreDevicePixelRatio: false, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, maxBufferSize: 6e7, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: false, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: true, enableSoftwareAES: true, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, startLevel: void 0, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3, startFragPrefetch: false, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: Si, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: Pe, bufferController: Ze, capLevelController: Jr, fpsController: Zr, stretchShortVideoTrack: false, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: true, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: false, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: false, widevineLicenseUrl: void 0, drmSystems: {}, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: k, testBandwidth: true, progressive: false, lowLatencyMode: true, cmcd: void 0, enableDateRangeMetadataCues: true, enableEmsgMetadataCues: true, enableID3MetadataCues: true }, { cueHandler: { newCue: function(t3, e3, r3, i3) {
          for (var n2, a2, s2, o2, l2, u2 = [], d2 = self.VTTCue || self.TextTrackCue, h2 = 0; h2 < i3.rows.length; h2++)
            if (s2 = true, o2 = 0, l2 = "", !(n2 = i3.rows[h2]).isEmpty()) {
              for (var c2 = 0; c2 < n2.chars.length; c2++)
                Pi.test(n2.chars[c2].uchar) && s2 ? o2++ : (l2 += n2.chars[c2].uchar, s2 = false);
              n2.cueStartTime = e3, e3 === r3 && (r3 += 1e-4), o2 >= 16 ? o2-- : o2++;
              var f2 = wr(l2.trim()), g2 = Mr(e3, r3, f2);
              t3 && t3.cues && t3.cues.getCueById(g2) || ((a2 = new d2(e3, r3, f2)).id = g2, a2.line = h2 + 1, a2.align = "left", a2.position = 10 + Math.min(80, 10 * Math.floor(8 * o2 / 32)), u2.push(a2));
            }
          return t3 && u2.length && (u2.sort(function(t4, e4) {
            return "auto" === t4.line || "auto" === e4.line ? 0 : t4.line > 8 && e4.line > 8 ? e4.line - t4.line : t4.line - e4.line;
          }), u2.forEach(function(e4) {
            return X(t3, e4);
          })), u2;
        } }, enableWebVTT: true, enableIMSC1: true, enableCEA708Captions: true, captionsTextTrack1Label: "English", captionsTextTrack1LanguageCode: "en", captionsTextTrack2Label: "Spanish", captionsTextTrack2LanguageCode: "es", captionsTextTrack3Label: "Unknown CC", captionsTextTrack3LanguageCode: "", captionsTextTrack4Label: "Unknown CC", captionsTextTrack4LanguageCode: "", renderTextTracksNatively: true }), {}, { subtitleStreamController: je, subtitleTrackController: Xe, timelineController: zr, audioStreamController: Ne, audioTrackController: Ge, emeController: ui, cmcdController: yi });
        function Ui(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        var Bi = function() {
          function t3(e4) {
            void 0 === e4 && (e4 = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this._emitter = new Se.EventEmitter(), this._autoLevelCapping = void 0, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null;
            var r4 = this.config = function(t4, e5) {
              if ((e5.liveSyncDurationCount || e5.liveMaxLatencyDurationCount) && (e5.liveSyncDuration || e5.liveMaxLatencyDuration))
                throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
              if (void 0 !== e5.liveMaxLatencyDurationCount && (void 0 === e5.liveSyncDurationCount || e5.liveMaxLatencyDurationCount <= e5.liveSyncDurationCount))
                throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
              if (void 0 !== e5.liveMaxLatencyDuration && (void 0 === e5.liveSyncDuration || e5.liveMaxLatencyDuration <= e5.liveSyncDuration))
                throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
              return Oi({}, t4, e5);
            }(t3.DefaultConfig, e4);
            this.userConfig = e4, (0, l.enableLogs)(r4.debug, "Hls instance"), this._autoLevelCapping = -1, r4.progressive && function(t4) {
              var e5 = t4.loader;
              e5 !== _i && e5 !== Si ? (l.logger.log("[config]: Custom loader detected, cannot enable progressive streaming"), t4.progressive = false) : function() {
                if (self.fetch && self.AbortController && self.ReadableStream && self.Request)
                  try {
                    return new self.ReadableStream({}), true;
                  } catch (t5) {
                  }
                return false;
              }() && (t4.loader = _i, t4.progressive = true, t4.enableSoftwareAES = true, l.logger.log("[config]: Progressive streaming enabled, using FetchLoader"));
            }(r4);
            var i4 = r4.abrController, n2 = r4.bufferController, a3 = r4.capLevelController, s2 = r4.fpsController, o2 = this.abrController = new i4(this), u2 = this.bufferController = new n2(this), d2 = this.capLevelController = new a3(this), h2 = new s2(this), c2 = new W(this), f2 = new rt(this), g2 = this.levelController = new Lt(this), v2 = new At(this), p2 = new Mt(this.config), m2 = this.streamController = new Ie(this, v2, p2);
            d2.setStreamController(m2), h2.setStreamController(m2);
            var y2 = [c2, g2, m2];
            this.networkControllers = y2;
            var E2 = [o2, u2, d2, h2, f2, v2];
            this.audioTrackController = this.createController(r4.audioTrackController, y2);
            var T2 = r4.audioStreamController;
            T2 && y2.push(new T2(this, v2, p2)), this.subtitleTrackController = this.createController(r4.subtitleTrackController, y2);
            var S2 = r4.subtitleStreamController;
            S2 && y2.push(new S2(this, v2, p2)), this.createController(r4.timelineController, E2), p2.emeController = this.emeController = this.createController(r4.emeController, E2), this.cmcdController = this.createController(r4.cmcdController, E2), this.latencyController = this.createController(nt, E2), this.coreComponents = E2;
          }
          t3.isSupported = function() {
            return function() {
              var t4 = ce();
              if (!t4)
                return false;
              var e4 = fe(), r4 = t4 && "function" == typeof t4.isTypeSupported && t4.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'), i4 = !e4 || e4.prototype && "function" == typeof e4.prototype.appendBuffer && "function" == typeof e4.prototype.remove;
              return !!r4 && !!i4;
            }();
          };
          var e3, r3, i3, a2 = t3.prototype;
          return a2.createController = function(t4, e4) {
            if (t4) {
              var r4 = new t4(this);
              return e4 && e4.push(r4), r4;
            }
            return null;
          }, a2.on = function(t4, e4, r4) {
            void 0 === r4 && (r4 = this), this._emitter.on(t4, e4, r4);
          }, a2.once = function(t4, e4, r4) {
            void 0 === r4 && (r4 = this), this._emitter.once(t4, e4, r4);
          }, a2.removeAllListeners = function(t4) {
            this._emitter.removeAllListeners(t4);
          }, a2.off = function(t4, e4, r4, i4) {
            void 0 === r4 && (r4 = this), this._emitter.off(t4, e4, r4, i4);
          }, a2.listeners = function(t4) {
            return this._emitter.listeners(t4);
          }, a2.emit = function(t4, e4, r4) {
            return this._emitter.emit(t4, e4, r4);
          }, a2.trigger = function(t4, e4) {
            if (this.config.debug)
              return this.emit(t4, t4, e4);
            try {
              return this.emit(t4, t4, e4);
            } catch (e5) {
              l.logger.error("An internal error happened while handling event " + t4 + '. Error message: "' + e5.message + '". Here is a stacktrace:', e5), this.trigger(s.Events.ERROR, { type: o.ErrorTypes.OTHER_ERROR, details: o.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: t4, error: e5 });
            }
            return false;
          }, a2.listenerCount = function(t4) {
            return this._emitter.listenerCount(t4);
          }, a2.destroy = function() {
            l.logger.log("destroy"), this.trigger(s.Events.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(t4) {
              return t4.destroy();
            }), this.networkControllers.length = 0, this.coreComponents.forEach(function(t4) {
              return t4.destroy();
            }), this.coreComponents.length = 0;
          }, a2.attachMedia = function(t4) {
            l.logger.log("attachMedia"), this._media = t4, this.trigger(s.Events.MEDIA_ATTACHING, { media: t4 });
          }, a2.detachMedia = function() {
            l.logger.log("detachMedia"), this.trigger(s.Events.MEDIA_DETACHING, void 0), this._media = null;
          }, a2.loadSource = function(t4) {
            this.stopLoad();
            var e4 = this.media, r4 = this.url, i4 = this.url = n.buildAbsoluteURL(self.location.href, t4, { alwaysNormalize: true });
            l.logger.log("loadSource:" + i4), e4 && r4 && r4 !== i4 && this.bufferController.hasSourceTypes() && (this.detachMedia(), this.attachMedia(e4)), this.trigger(s.Events.MANIFEST_LOADING, { url: t4 });
          }, a2.startLoad = function(t4) {
            void 0 === t4 && (t4 = -1), l.logger.log("startLoad(" + t4 + ")"), this.networkControllers.forEach(function(e4) {
              e4.startLoad(t4);
            });
          }, a2.stopLoad = function() {
            l.logger.log("stopLoad"), this.networkControllers.forEach(function(t4) {
              t4.stopLoad();
            });
          }, a2.swapAudioCodec = function() {
            l.logger.log("swapAudioCodec"), this.streamController.swapAudioCodec();
          }, a2.recoverMediaError = function() {
            l.logger.log("recoverMediaError");
            var t4 = this._media;
            this.detachMedia(), t4 && this.attachMedia(t4);
          }, a2.removeLevel = function(t4, e4) {
            void 0 === e4 && (e4 = 0), this.levelController.removeLevel(t4, e4);
          }, e3 = t3, i3 = [{ key: "version", get: function() {
            return "1.3.4";
          } }, { key: "Events", get: function() {
            return s.Events;
          } }, { key: "ErrorTypes", get: function() {
            return o.ErrorTypes;
          } }, { key: "ErrorDetails", get: function() {
            return o.ErrorDetails;
          } }, { key: "DefaultConfig", get: function() {
            return t3.defaultConfig ? t3.defaultConfig : Ni;
          }, set: function(e4) {
            t3.defaultConfig = e4;
          } }], (r3 = [{ key: "levels", get: function() {
            return this.levelController.levels || [];
          } }, { key: "currentLevel", get: function() {
            return this.streamController.currentLevel;
          }, set: function(t4) {
            l.logger.log("set currentLevel:" + t4), this.loadLevel = t4, this.abrController.clearTimer(), this.streamController.immediateLevelSwitch();
          } }, { key: "nextLevel", get: function() {
            return this.streamController.nextLevel;
          }, set: function(t4) {
            l.logger.log("set nextLevel:" + t4), this.levelController.manualLevel = t4, this.streamController.nextLevelSwitch();
          } }, { key: "loadLevel", get: function() {
            return this.levelController.level;
          }, set: function(t4) {
            l.logger.log("set loadLevel:" + t4), this.levelController.manualLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return this.levelController.nextLoadLevel;
          }, set: function(t4) {
            this.levelController.nextLoadLevel = t4;
          } }, { key: "firstLevel", get: function() {
            return Math.max(this.levelController.firstLevel, this.minAutoLevel);
          }, set: function(t4) {
            l.logger.log("set firstLevel:" + t4), this.levelController.firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            return this.levelController.startLevel;
          }, set: function(t4) {
            l.logger.log("set startLevel:" + t4), -1 !== t4 && (t4 = Math.max(t4, this.minAutoLevel)), this.levelController.startLevel = t4;
          } }, { key: "capLevelToPlayerSize", get: function() {
            return this.config.capLevelToPlayerSize;
          }, set: function(t4) {
            var e4 = !!t4;
            e4 !== this.config.capLevelToPlayerSize && (e4 ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = e4);
          } }, { key: "autoLevelCapping", get: function() {
            return this._autoLevelCapping;
          }, set: function(t4) {
            this._autoLevelCapping !== t4 && (l.logger.log("set autoLevelCapping:" + t4), this._autoLevelCapping = t4);
          } }, { key: "bandwidthEstimate", get: function() {
            var t4 = this.abrController.bwEstimator;
            return t4 ? t4.getEstimate() : NaN;
          } }, { key: "maxHdcpLevel", get: function() {
            return this._maxHdcpLevel;
          }, set: function(t4) {
            ot.indexOf(t4) > -1 && (this._maxHdcpLevel = t4);
          } }, { key: "autoLevelEnabled", get: function() {
            return -1 === this.levelController.manualLevel;
          } }, { key: "manualLevel", get: function() {
            return this.levelController.manualLevel;
          } }, { key: "minAutoLevel", get: function() {
            var t4 = this.levels, e4 = this.config.minAutoBitrate;
            if (!t4)
              return 0;
            for (var r4 = t4.length, i4 = 0; i4 < r4; i4++)
              if (t4[i4].maxBitrate >= e4)
                return i4;
            return 0;
          } }, { key: "maxAutoLevel", get: function() {
            var t4, e4 = this.levels, r4 = this.autoLevelCapping, i4 = this.maxHdcpLevel;
            if (t4 = -1 === r4 && e4 && e4.length ? e4.length - 1 : r4, i4)
              for (var n2 = t4; n2--; ) {
                var a3 = e4[n2].attrs["HDCP-LEVEL"];
                if (a3 && a3 <= i4)
                  return n2;
              }
            return t4;
          } }, { key: "nextAutoLevel", get: function() {
            return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
          }, set: function(t4) {
            this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, t4);
          } }, { key: "playingDate", get: function() {
            return this.streamController.currentProgramDateTime;
          } }, { key: "mainForwardBufferInfo", get: function() {
            return this.streamController.getMainFwdBufferInfo();
          } }, { key: "audioTracks", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTracks : [];
          } }, { key: "audioTrack", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTrack : -1;
          }, set: function(t4) {
            var e4 = this.audioTrackController;
            e4 && (e4.audioTrack = t4);
          } }, { key: "subtitleTracks", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTracks : [];
          } }, { key: "subtitleTrack", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTrack : -1;
          }, set: function(t4) {
            var e4 = this.subtitleTrackController;
            e4 && (e4.subtitleTrack = t4);
          } }, { key: "media", get: function() {
            return this._media;
          } }, { key: "subtitleDisplay", get: function() {
            var t4 = this.subtitleTrackController;
            return !!t4 && t4.subtitleDisplay;
          }, set: function(t4) {
            var e4 = this.subtitleTrackController;
            e4 && (e4.subtitleDisplay = t4);
          } }, { key: "lowLatencyMode", get: function() {
            return this.config.lowLatencyMode;
          }, set: function(t4) {
            this.config.lowLatencyMode = t4;
          } }, { key: "liveSyncPosition", get: function() {
            return this.latencyController.liveSyncPosition;
          } }, { key: "latency", get: function() {
            return this.latencyController.latency;
          } }, { key: "maxLatency", get: function() {
            return this.latencyController.maxLatency;
          } }, { key: "targetLatency", get: function() {
            return this.latencyController.targetLatency;
          } }, { key: "drift", get: function() {
            return this.latencyController.drift;
          } }, { key: "forceStartLoad", get: function() {
            return this.streamController.forceStartLoad;
          } }]) && Ui(e3.prototype, r3), i3 && Ui(e3, i3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
        }();
        Bi.defaultConfig = void 0;
      }, 923: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { BaseSegment: () => h, ElementaryStreamTypes: () => i2, Fragment: () => c, Part: () => f });
        var i2, n = r2(965), a = r2(945), s = r2(408);
        function o(t3, e3) {
          t3.prototype = Object.create(e3.prototype), t3.prototype.constructor = t3, l(t3, e3);
        }
        function l(t3, e3) {
          return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, l(t3, e3);
        }
        function u(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i3 = e3[r3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (void 0, "symbol" == typeof (n2 = function(t4, e4) {
              if ("object" != typeof t4 || null === t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var i4 = r4.call(t4, e4);
                if ("object" != typeof i4)
                  return i4;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(i3.key, "string")) ? n2 : String(n2)), i3);
          }
          var n2;
        }
        function d(t3, e3, r3) {
          return e3 && u(t3.prototype, e3), r3 && u(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        !function(t3) {
          t3.AUDIO = "audio", t3.VIDEO = "video", t3.AUDIOVIDEO = "audiovideo";
        }(i2 || (i2 = {}));
        var h = function() {
          function t3(t4) {
            var e3;
            this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((e3 = {})[i2.AUDIO] = null, e3[i2.VIDEO] = null, e3[i2.AUDIOVIDEO] = null, e3), this.baseurl = t4;
          }
          return t3.prototype.setByteRange = function(t4, e3) {
            var r3 = t4.split("@", 2), i3 = [];
            1 === r3.length ? i3[0] = e3 ? e3.byteRangeEndOffset : 0 : i3[0] = parseInt(r3[1]), i3[1] = parseInt(r3[0]) + i3[0], this._byteRange = i3;
          }, d(t3, [{ key: "byteRange", get: function() {
            return this._byteRange ? this._byteRange : [];
          } }, { key: "byteRangeStartOffset", get: function() {
            return this.byteRange[0];
          } }, { key: "byteRangeEndOffset", get: function() {
            return this.byteRange[1];
          } }, { key: "url", get: function() {
            return !this._url && this.baseurl && this.relurl && (this._url = (0, a.buildAbsoluteURL)(this.baseurl, this.relurl, { alwaysNormalize: true })), this._url || "";
          }, set: function(t4) {
            this._url = t4;
          } }]), t3;
        }(), c = function(t3) {
          function e3(e4, r4) {
            var i3;
            return (i3 = t3.call(this, r4) || this)._decryptdata = null, i3.rawProgramDateTime = null, i3.programDateTime = null, i3.tagList = [], i3.duration = 0, i3.sn = 0, i3.levelkeys = void 0, i3.type = void 0, i3.loader = null, i3.keyLoader = null, i3.level = -1, i3.cc = 0, i3.startPTS = void 0, i3.endPTS = void 0, i3.appendedPTS = void 0, i3.startDTS = void 0, i3.endDTS = void 0, i3.start = 0, i3.deltaPTS = void 0, i3.maxStartPTS = void 0, i3.minEndPTS = void 0, i3.stats = new s.LoadStats(), i3.urlId = 0, i3.data = void 0, i3.bitrateTest = false, i3.title = null, i3.initSegment = null, i3.endList = void 0, i3.type = e4, i3;
          }
          o(e3, t3);
          var r3 = e3.prototype;
          return r3.setKeyFormat = function(t4) {
            if (this.levelkeys) {
              var e4 = this.levelkeys[t4];
              e4 && !this._decryptdata && (this._decryptdata = e4.getDecryptData(this.sn));
            }
          }, r3.abortRequests = function() {
            var t4, e4;
            null === (t4 = this.loader) || void 0 === t4 || t4.abort(), null === (e4 = this.keyLoader) || void 0 === e4 || e4.abort();
          }, r3.setElementaryStreamInfo = function(t4, e4, r4, i3, n2, a2) {
            void 0 === a2 && (a2 = false);
            var s2 = this.elementaryStreams, o2 = s2[t4];
            o2 ? (o2.startPTS = Math.min(o2.startPTS, e4), o2.endPTS = Math.max(o2.endPTS, r4), o2.startDTS = Math.min(o2.startDTS, i3), o2.endDTS = Math.max(o2.endDTS, n2)) : s2[t4] = { startPTS: e4, endPTS: r4, startDTS: i3, endDTS: n2, partial: a2 };
          }, r3.clearElementaryStreamInfo = function() {
            var t4 = this.elementaryStreams;
            t4[i2.AUDIO] = null, t4[i2.VIDEO] = null, t4[i2.AUDIOVIDEO] = null;
          }, d(e3, [{ key: "decryptdata", get: function() {
            if (!this.levelkeys && !this._decryptdata)
              return null;
            if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
              var t4 = this.levelkeys.identity;
              if (t4)
                this._decryptdata = t4.getDecryptData(this.sn);
              else {
                var e4 = Object.keys(this.levelkeys);
                if (1 === e4.length)
                  return this._decryptdata = this.levelkeys[e4[0]].getDecryptData(this.sn);
              }
            }
            return this._decryptdata;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "endProgramDateTime", get: function() {
            if (null === this.programDateTime)
              return null;
            if (!(0, n.isFiniteNumber)(this.programDateTime))
              return null;
            var t4 = (0, n.isFiniteNumber)(this.duration) ? this.duration : 0;
            return this.programDateTime + 1e3 * t4;
          } }, { key: "encrypted", get: function() {
            var t4;
            if (null !== (t4 = this._decryptdata) && void 0 !== t4 && t4.encrypted)
              return true;
            if (this.levelkeys) {
              var e4 = Object.keys(this.levelkeys), r4 = e4.length;
              if (r4 > 1 || 1 === r4 && this.levelkeys[e4[0]].encrypted)
                return true;
            }
            return false;
          } }]), e3;
        }(h), f = function(t3) {
          function e3(e4, r3, i3, n2, a2) {
            var o2;
            (o2 = t3.call(this, i3) || this).fragOffset = 0, o2.duration = 0, o2.gap = false, o2.independent = false, o2.relurl = void 0, o2.fragment = void 0, o2.index = void 0, o2.stats = new s.LoadStats(), o2.duration = e4.decimalFloatingPoint("DURATION"), o2.gap = e4.bool("GAP"), o2.independent = e4.bool("INDEPENDENT"), o2.relurl = e4.enumeratedString("URI"), o2.fragment = r3, o2.index = n2;
            var l2 = e4.enumeratedString("BYTERANGE");
            return l2 && o2.setByteRange(l2, a2), a2 && (o2.fragOffset = a2.fragOffset + a2.duration), o2;
          }
          return o(e3, t3), d(e3, [{ key: "start", get: function() {
            return this.fragment.start + this.fragOffset;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "loaded", get: function() {
            var t4 = this.elementaryStreams;
            return !!(t4.audio || t4.video || t4.audiovideo);
          } }]), e3;
        }(h);
      }, 408: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { LoadStats: () => i2 });
        var i2 = function() {
          this.aborted = false, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 };
        };
      }, 965: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { MAX_SAFE_INTEGER: () => n, isFiniteNumber: () => i2 });
        var i2 = Number.isFinite || function(t3) {
          return "number" == typeof t3 && isFinite(t3);
        }, n = Number.MAX_SAFE_INTEGER || 9007199254740991;
      }, 524: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { default: () => p, flushTextTrackMetadataCueSamples: () => y, flushTextTrackUserdataCueSamples: () => E, normalizePts: () => m });
        var i2 = r2(965);
        const n = function() {
          function t3() {
          }
          return t3.getSilentFrame = function(t4, e3) {
            if ("mp4a.40.2" === t4) {
              if (1 === e3)
                return new Uint8Array([0, 200, 0, 128, 35, 128]);
              if (2 === e3)
                return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
              if (3 === e3)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
              if (4 === e3)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
              if (5 === e3)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
              if (6 === e3)
                return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
            } else {
              if (1 === e3)
                return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (2 === e3)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (3 === e3)
                return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
            }
          }, t3;
        }();
        var a = Math.pow(2, 32) - 1, s = function() {
          function t3() {
          }
          return t3.init = function() {
            var e3;
            for (e3 in t3.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], ".mp3": [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] }, t3.types)
              t3.types.hasOwnProperty(e3) && (t3.types[e3] = [e3.charCodeAt(0), e3.charCodeAt(1), e3.charCodeAt(2), e3.charCodeAt(3)]);
            var r3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), i3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
            t3.HDLR_TYPES = { video: r3, audio: i3 };
            var n2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), a2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
            t3.STTS = t3.STSC = t3.STCO = a2, t3.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), t3.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), t3.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), t3.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
            var s2 = new Uint8Array([105, 115, 111, 109]), o2 = new Uint8Array([97, 118, 99, 49]), l2 = new Uint8Array([0, 0, 0, 1]);
            t3.FTYP = t3.box(t3.types.ftyp, s2, l2, s2, o2), t3.DINF = t3.box(t3.types.dinf, t3.box(t3.types.dref, n2));
          }, t3.box = function(t4) {
            for (var e3 = 8, r3 = arguments.length, i3 = new Array(r3 > 1 ? r3 - 1 : 0), n2 = 1; n2 < r3; n2++)
              i3[n2 - 1] = arguments[n2];
            for (var a2 = i3.length, s2 = a2; a2--; )
              e3 += i3[a2].byteLength;
            var o2 = new Uint8Array(e3);
            for (o2[0] = e3 >> 24 & 255, o2[1] = e3 >> 16 & 255, o2[2] = e3 >> 8 & 255, o2[3] = 255 & e3, o2.set(t4, 4), a2 = 0, e3 = 8; a2 < s2; a2++)
              o2.set(i3[a2], e3), e3 += i3[a2].byteLength;
            return o2;
          }, t3.hdlr = function(e3) {
            return t3.box(t3.types.hdlr, t3.HDLR_TYPES[e3]);
          }, t3.mdat = function(e3) {
            return t3.box(t3.types.mdat, e3);
          }, t3.mdhd = function(e3, r3) {
            r3 *= e3;
            var i3 = Math.floor(r3 / (a + 1)), n2 = Math.floor(r3 % (a + 1));
            return t3.box(t3.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e3 >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3, i3 >> 24, i3 >> 16 & 255, i3 >> 8 & 255, 255 & i3, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 85, 196, 0, 0]));
          }, t3.mdia = function(e3) {
            return t3.box(t3.types.mdia, t3.mdhd(e3.timescale, e3.duration), t3.hdlr(e3.type), t3.minf(e3));
          }, t3.mfhd = function(e3) {
            return t3.box(t3.types.mfhd, new Uint8Array([0, 0, 0, 0, e3 >> 24, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3]));
          }, t3.minf = function(e3) {
            return "audio" === e3.type ? t3.box(t3.types.minf, t3.box(t3.types.smhd, t3.SMHD), t3.DINF, t3.stbl(e3)) : t3.box(t3.types.minf, t3.box(t3.types.vmhd, t3.VMHD), t3.DINF, t3.stbl(e3));
          }, t3.moof = function(e3, r3, i3) {
            return t3.box(t3.types.moof, t3.mfhd(e3), t3.traf(i3, r3));
          }, t3.moov = function(e3) {
            for (var r3 = e3.length, i3 = []; r3--; )
              i3[r3] = t3.trak(e3[r3]);
            return t3.box.apply(null, [t3.types.moov, t3.mvhd(e3[0].timescale, e3[0].duration)].concat(i3).concat(t3.mvex(e3)));
          }, t3.mvex = function(e3) {
            for (var r3 = e3.length, i3 = []; r3--; )
              i3[r3] = t3.trex(e3[r3]);
            return t3.box.apply(null, [t3.types.mvex].concat(i3));
          }, t3.mvhd = function(e3, r3) {
            r3 *= e3;
            var i3 = Math.floor(r3 / (a + 1)), n2 = Math.floor(r3 % (a + 1)), s2 = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e3 >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3, i3 >> 24, i3 >> 16 & 255, i3 >> 8 & 255, 255 & i3, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
            return t3.box(t3.types.mvhd, s2);
          }, t3.sdtp = function(e3) {
            var r3, i3, n2 = e3.samples || [], a2 = new Uint8Array(4 + n2.length);
            for (r3 = 0; r3 < n2.length; r3++)
              i3 = n2[r3].flags, a2[r3 + 4] = i3.dependsOn << 4 | i3.isDependedOn << 2 | i3.hasRedundancy;
            return t3.box(t3.types.sdtp, a2);
          }, t3.stbl = function(e3) {
            return t3.box(t3.types.stbl, t3.stsd(e3), t3.box(t3.types.stts, t3.STTS), t3.box(t3.types.stsc, t3.STSC), t3.box(t3.types.stsz, t3.STSZ), t3.box(t3.types.stco, t3.STCO));
          }, t3.avc1 = function(e3) {
            var r3, i3, n2, a2 = [], s2 = [];
            for (r3 = 0; r3 < e3.sps.length; r3++)
              n2 = (i3 = e3.sps[r3]).byteLength, a2.push(n2 >>> 8 & 255), a2.push(255 & n2), a2 = a2.concat(Array.prototype.slice.call(i3));
            for (r3 = 0; r3 < e3.pps.length; r3++)
              n2 = (i3 = e3.pps[r3]).byteLength, s2.push(n2 >>> 8 & 255), s2.push(255 & n2), s2 = s2.concat(Array.prototype.slice.call(i3));
            var o2 = t3.box(t3.types.avcC, new Uint8Array([1, a2[3], a2[4], a2[5], 255, 224 | e3.sps.length].concat(a2).concat([e3.pps.length]).concat(s2))), l2 = e3.width, u2 = e3.height, d2 = e3.pixelRatio[0], h2 = e3.pixelRatio[1];
            return t3.box(t3.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l2 >> 8 & 255, 255 & l2, u2 >> 8 & 255, 255 & u2, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o2, t3.box(t3.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), t3.box(t3.types.pasp, new Uint8Array([d2 >> 24, d2 >> 16 & 255, d2 >> 8 & 255, 255 & d2, h2 >> 24, h2 >> 16 & 255, h2 >> 8 & 255, 255 & h2])));
          }, t3.esds = function(t4) {
            var e3 = t4.config.length;
            return new Uint8Array([0, 0, 0, 0, 3, 23 + e3, 0, 1, 0, 4, 15 + e3, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e3]).concat(t4.config).concat([6, 1, 2]));
          }, t3.mp4a = function(e3) {
            var r3 = e3.samplerate;
            return t3.box(t3.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e3.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]), t3.box(t3.types.esds, t3.esds(e3)));
          }, t3.mp3 = function(e3) {
            var r3 = e3.samplerate;
            return t3.box(t3.types[".mp3"], new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e3.channelCount, 0, 16, 0, 0, 0, 0, r3 >> 8 & 255, 255 & r3, 0, 0]));
          }, t3.stsd = function(e3) {
            return "audio" === e3.type ? "mp3" === e3.segmentCodec && "mp3" === e3.codec ? t3.box(t3.types.stsd, t3.STSD, t3.mp3(e3)) : t3.box(t3.types.stsd, t3.STSD, t3.mp4a(e3)) : t3.box(t3.types.stsd, t3.STSD, t3.avc1(e3));
          }, t3.tkhd = function(e3) {
            var r3 = e3.id, i3 = e3.duration * e3.timescale, n2 = e3.width, s2 = e3.height, o2 = Math.floor(i3 / (a + 1)), l2 = Math.floor(i3 % (a + 1));
            return t3.box(t3.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r3 >> 24 & 255, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 0, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2, l2 >> 24, l2 >> 16 & 255, l2 >> 8 & 255, 255 & l2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, n2 >> 8 & 255, 255 & n2, 0, 0, s2 >> 8 & 255, 255 & s2, 0, 0]));
          }, t3.traf = function(e3, r3) {
            var i3 = t3.sdtp(e3), n2 = e3.id, s2 = Math.floor(r3 / (a + 1)), o2 = Math.floor(r3 % (a + 1));
            return t3.box(t3.types.traf, t3.box(t3.types.tfhd, new Uint8Array([0, 0, 0, 0, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2])), t3.box(t3.types.tfdt, new Uint8Array([1, 0, 0, 0, s2 >> 24, s2 >> 16 & 255, s2 >> 8 & 255, 255 & s2, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2])), t3.trun(e3, i3.length + 16 + 20 + 8 + 16 + 8 + 8), i3);
          }, t3.trak = function(e3) {
            return e3.duration = e3.duration || 4294967295, t3.box(t3.types.trak, t3.tkhd(e3), t3.mdia(e3));
          }, t3.trex = function(e3) {
            var r3 = e3.id;
            return t3.box(t3.types.trex, new Uint8Array([0, 0, 0, 0, r3 >> 24, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
          }, t3.trun = function(e3, r3) {
            var i3, n2, a2, s2, o2, l2, u2 = e3.samples || [], d2 = u2.length, h2 = 12 + 16 * d2, c2 = new Uint8Array(h2);
            for (r3 += 8 + h2, c2.set(["video" === e3.type ? 1 : 0, 0, 15, 1, d2 >>> 24 & 255, d2 >>> 16 & 255, d2 >>> 8 & 255, 255 & d2, r3 >>> 24 & 255, r3 >>> 16 & 255, r3 >>> 8 & 255, 255 & r3], 0), i3 = 0; i3 < d2; i3++)
              a2 = (n2 = u2[i3]).duration, s2 = n2.size, o2 = n2.flags, l2 = n2.cts, c2.set([a2 >>> 24 & 255, a2 >>> 16 & 255, a2 >>> 8 & 255, 255 & a2, s2 >>> 24 & 255, s2 >>> 16 & 255, s2 >>> 8 & 255, 255 & s2, o2.isLeading << 2 | o2.dependsOn, o2.isDependedOn << 6 | o2.hasRedundancy << 4 | o2.paddingValue << 1 | o2.isNonSync, 61440 & o2.degradPrio, 15 & o2.degradPrio, l2 >>> 24 & 255, l2 >>> 16 & 255, l2 >>> 8 & 255, 255 & l2], 12 + 16 * i3);
            return t3.box(t3.types.trun, c2);
          }, t3.initSegment = function(e3) {
            t3.types || t3.init();
            var r3 = t3.moov(e3), i3 = new Uint8Array(t3.FTYP.byteLength + r3.byteLength);
            return i3.set(t3.FTYP), i3.set(r3, t3.FTYP.byteLength), i3;
          }, t3;
        }();
        s.types = void 0, s.HDLR_TYPES = void 0, s.STTS = void 0, s.STSC = void 0, s.STCO = void 0, s.STSZ = void 0, s.VMHD = void 0, s.SMHD = void 0, s.STSD = void 0, s.FTYP = void 0, s.DINF = void 0;
        const o = s;
        var l = r2(851), u = r2(973), d = r2(93), h = r2(308), c = r2(673);
        function f() {
          return f = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = arguments[e3];
              for (var i3 in r3)
                Object.prototype.hasOwnProperty.call(r3, i3) && (t3[i3] = r3[i3]);
            }
            return t3;
          }, f.apply(this, arguments);
        }
        var g = null, v = null, p = function() {
          function t3(t4, e4, r3, i3) {
            if (void 0 === i3 && (i3 = ""), this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = false, this._initPTS = void 0, this._initDTS = void 0, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = false, this.isVideoContiguous = false, this.observer = t4, this.config = e4, this.typeSupported = r3, this.ISGenerated = false, null === g) {
              var n2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              g = n2 ? parseInt(n2[1]) : 0;
            }
            if (null === v) {
              var a2 = navigator.userAgent.match(/Safari\/(\d+)/i);
              v = a2 ? parseInt(a2[1]) : 0;
            }
          }
          var e3 = t3.prototype;
          return e3.destroy = function() {
          }, e3.resetTimeStamp = function(t4) {
            d.logger.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = t4;
          }, e3.resetNextTimestamp = function() {
            d.logger.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = false, this.isAudioContiguous = false;
          }, e3.resetInitSegment = function() {
            d.logger.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = false;
          }, e3.getVideoStartPts = function(t4) {
            var e4 = false, r3 = t4.reduce(function(t5, r4) {
              var i3 = r4.pts - t5;
              return i3 < -4294967296 ? (e4 = true, m(t5, r4.pts)) : i3 > 0 ? t5 : r4.pts;
            }, t4[0].pts);
            return e4 && d.logger.debug("PTS rollover detected"), r3;
          }, e3.remux = function(t4, e4, r3, i3, n2, a2, s2, o2) {
            var l2, u2, c2, f2, g2, v2, p2 = n2, T2 = n2, S2 = t4.pid > -1, b = e4.pid > -1, L = e4.samples.length, A = t4.samples.length > 0, D = s2 && L > 0 || L > 1;
            if ((!S2 || A) && (!b || D) || this.ISGenerated || s2) {
              this.ISGenerated || (c2 = this.generateIS(t4, e4, n2));
              var k, R = this.isVideoContiguous, I = -1;
              if (D && (I = function(t5) {
                for (var e5 = 0; e5 < t5.length; e5++)
                  if (t5[e5].key)
                    return e5;
                return -1;
              }(e4.samples), !R && this.config.forceKeyFrameOnDiscontinuity))
                if (v2 = true, I > 0) {
                  d.logger.warn("[mp4-remuxer]: Dropped " + I + " out of " + L + " video samples due to a missing keyframe");
                  var w = this.getVideoStartPts(e4.samples);
                  e4.samples = e4.samples.slice(I), e4.dropped += I, k = T2 += (e4.samples[0].pts - w) / e4.inputTimeScale;
                } else
                  -1 === I && (d.logger.warn("[mp4-remuxer]: No keyframe found out of " + L + " video samples"), v2 = false);
              if (this.ISGenerated) {
                if (A && D) {
                  var C = this.getVideoStartPts(e4.samples), _ = (m(t4.samples[0].pts, C) - C) / e4.inputTimeScale;
                  p2 += Math.max(0, _), T2 += Math.max(0, -_);
                }
                if (A) {
                  if (t4.samplerate || (d.logger.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), c2 = this.generateIS(t4, e4, n2)), u2 = this.remuxAudio(t4, p2, this.isAudioContiguous, a2, b || D || o2 === h.PlaylistLevelType.AUDIO ? T2 : void 0), D) {
                    var P = u2 ? u2.endPTS - u2.startPTS : 0;
                    e4.inputTimeScale || (d.logger.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), c2 = this.generateIS(t4, e4, n2)), l2 = this.remuxVideo(e4, T2, R, P);
                  }
                } else
                  D && (l2 = this.remuxVideo(e4, T2, R, 0));
                l2 && (l2.firstKeyFrame = I, l2.independent = -1 !== I, l2.firstKeyFramePTS = k);
              }
            }
            return this.ISGenerated && (r3.samples.length && (g2 = y(r3, n2, this._initPTS, this._initDTS)), i3.samples.length && (f2 = E(i3, n2, this._initPTS))), { audio: u2, video: l2, initSegment: c2, independent: v2, text: f2, id3: g2 };
          }, e3.generateIS = function(t4, e4, r3) {
            var n2, a2, s2, l2 = t4.samples, u2 = e4.samples, d2 = this.typeSupported, h2 = {}, c2 = !(0, i2.isFiniteNumber)(this._initPTS), f2 = "audio/mp4";
            if (c2 && (n2 = a2 = 1 / 0), t4.config && l2.length && (t4.timescale = t4.samplerate, "mp3" === t4.segmentCodec && (d2.mpeg ? (f2 = "audio/mpeg", t4.codec = "") : d2.mp3 && (t4.codec = "mp3")), h2.audio = { id: "audio", container: f2, codec: t4.codec, initSegment: "mp3" === t4.segmentCodec && d2.mpeg ? new Uint8Array(0) : o.initSegment([t4]), metadata: { channelCount: t4.channelCount } }, c2 && (s2 = t4.inputTimeScale, n2 = a2 = l2[0].pts - Math.round(s2 * r3))), e4.sps && e4.pps && u2.length && (e4.timescale = e4.inputTimeScale, h2.video = { id: "main", container: "video/mp4", codec: e4.codec, initSegment: o.initSegment([e4]), metadata: { width: e4.width, height: e4.height } }, c2)) {
              s2 = e4.inputTimeScale;
              var g2 = this.getVideoStartPts(u2), v2 = Math.round(s2 * r3);
              a2 = Math.min(a2, m(u2[0].dts, g2) - v2), n2 = Math.min(n2, g2 - v2);
            }
            if (Object.keys(h2).length)
              return this.ISGenerated = true, c2 && (this._initPTS = n2, this._initDTS = a2), { tracks: h2, initPTS: n2, timescale: s2 };
          }, e3.remuxVideo = function(t4, e4, r3, i3) {
            var n2, a2, s2 = t4.inputTimeScale, h2 = t4.samples, p2 = [], y2 = h2.length, E2 = this._initPTS, S2 = this.nextAvcDts, b = 8, L = this.videoSampleDuration, A = Number.POSITIVE_INFINITY, D = Number.NEGATIVE_INFINITY, k = false;
            r3 && null !== S2 || (S2 = e4 * s2 - (h2[0].pts - m(h2[0].dts, h2[0].pts)));
            for (var R = 0; R < y2; R++) {
              var I = h2[R];
              I.pts = m(I.pts - E2, S2), I.dts = m(I.dts - E2, S2), I.dts < h2[R > 0 ? R - 1 : R].dts && (k = true);
            }
            k && h2.sort(function(t5, e5) {
              var r4 = t5.dts - e5.dts, i4 = t5.pts - e5.pts;
              return r4 || i4;
            }), n2 = h2[0].dts;
            var w = h2[h2.length - 1].dts - n2, C = w ? Math.round(w / (y2 - 1)) : L || t4.inputTimeScale / 30;
            if (r3) {
              var _ = n2 - S2, P = _ > C, O = _ < -1;
              if ((P || O) && (P ? d.logger.warn("AVC: " + (0, c.toMsFromMpegTsClock)(_, true) + " ms (" + _ + "dts) hole between fragments detected, filling it") : d.logger.warn("AVC: " + (0, c.toMsFromMpegTsClock)(-_, true) + " ms (" + _ + "dts) overlapping between fragments detected"), !O || S2 > h2[0].pts)) {
                n2 = S2;
                var x = h2[0].pts - _;
                h2[0].dts = n2, h2[0].pts = x, d.logger.log("Video: First PTS/DTS adjusted: " + (0, c.toMsFromMpegTsClock)(x, true) + "/" + (0, c.toMsFromMpegTsClock)(n2, true) + ", delta: " + (0, c.toMsFromMpegTsClock)(_, true) + " ms");
              }
            }
            n2 = Math.max(0, n2);
            for (var F = 0, M = 0, N = 0; N < y2; N++) {
              for (var U = h2[N], B = U.units, G = B.length, K = 0, H = 0; H < G; H++)
                K += B[H].data.length;
              M += K, F += G, U.length = K, U.dts = Math.max(U.dts, n2), A = Math.min(U.pts, A), D = Math.max(U.pts, D);
            }
            a2 = h2[y2 - 1].dts;
            var j, V = M + 4 * F + 8;
            try {
              j = new Uint8Array(V);
            } catch (t5) {
              return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, { type: u.ErrorTypes.MUX_ERROR, details: u.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: V, reason: "fail allocating video mdat " + V });
            }
            var Y = new DataView(j.buffer);
            Y.setUint32(0, V), j.set(o.types.mdat, 4);
            for (var W = false, q = Number.POSITIVE_INFINITY, X = Number.POSITIVE_INFINITY, z = Number.NEGATIVE_INFINITY, Q = Number.NEGATIVE_INFINITY, $ = 0; $ < y2; $++) {
              for (var J = h2[$], Z = J.units, tt = 0, et = 0, rt = Z.length; et < rt; et++) {
                var it = Z[et], nt = it.data, at = it.data.byteLength;
                Y.setUint32(b, at), b += 4, j.set(nt, b), b += at, tt += 4 + at;
              }
              var st = void 0;
              if ($ < y2 - 1)
                L = h2[$ + 1].dts - J.dts, st = h2[$ + 1].pts - J.pts;
              else {
                var ot = this.config, lt = $ > 0 ? J.dts - h2[$ - 1].dts : C;
                if (st = $ > 0 ? J.pts - h2[$ - 1].pts : C, ot.stretchShortVideoTrack && null !== this.nextAudioPts) {
                  var ut = Math.floor(ot.maxBufferHole * s2), dt = (i3 ? A + i3 * s2 : this.nextAudioPts) - J.pts;
                  dt > ut ? ((L = dt - lt) < 0 ? L = lt : W = true, d.logger.log("[mp4-remuxer]: It is approximately " + dt / 90 + " ms to the next segment; using duration " + L / 90 + " ms for the last video frame.")) : L = lt;
                } else
                  L = lt;
              }
              var ht = Math.round(J.pts - J.dts);
              q = Math.min(q, L), z = Math.max(z, L), X = Math.min(X, st), Q = Math.max(Q, st), p2.push(new T(J.key, L, tt, ht));
            }
            if (p2.length) {
              if (g) {
                if (g < 70) {
                  var ct = p2[0].flags;
                  ct.dependsOn = 2, ct.isNonSync = 0;
                }
              } else if (v && Q - X < z - q && C / z < 0.025 && 0 === p2[0].cts) {
                d.logger.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                for (var ft = n2, gt = 0, vt = p2.length; gt < vt; gt++) {
                  var pt = ft + p2[gt].duration, mt = ft + p2[gt].cts;
                  if (gt < vt - 1) {
                    var yt = pt + p2[gt + 1].cts;
                    p2[gt].duration = yt - mt;
                  } else
                    p2[gt].duration = gt ? p2[gt - 1].duration : C;
                  p2[gt].cts = 0, ft = pt;
                }
              }
            }
            L = W || !L ? C : L, this.nextAvcDts = S2 = a2 + L, this.videoSampleDuration = L, this.isVideoContiguous = true;
            var Et = { data1: o.moof(t4.sequenceNumber++, n2, f({}, t4, { samples: p2 })), data2: j, startPTS: A / s2, endPTS: (D + L) / s2, startDTS: n2 / s2, endDTS: S2 / s2, type: "video", hasAudio: false, hasVideo: true, nb: p2.length, dropped: t4.dropped };
            return t4.samples = [], t4.dropped = 0, Et;
          }, e3.remuxAudio = function(t4, e4, r3, i3, a2) {
            var s2 = t4.inputTimeScale, h2 = s2 / (t4.samplerate ? t4.samplerate : s2), c2 = "aac" === t4.segmentCodec ? 1024 : 1152, g2 = c2 * h2, v2 = this._initPTS, p2 = "mp3" === t4.segmentCodec && this.typeSupported.mpeg, y2 = [], E2 = void 0 !== a2, S2 = t4.samples, b = p2 ? 0 : 8, L = this.nextAudioPts || -1, A = e4 * s2;
            if (this.isAudioContiguous = r3 = r3 || S2.length && L > 0 && (i3 && Math.abs(A - L) < 9e3 || Math.abs(m(S2[0].pts - v2, A) - L) < 20 * g2), S2.forEach(function(t5) {
              t5.pts = m(t5.pts - v2, A);
            }), !r3 || L < 0) {
              if (S2 = S2.filter(function(t5) {
                return t5.pts >= 0;
              }), !S2.length)
                return;
              L = 0 === a2 ? 0 : i3 && !E2 ? Math.max(0, A) : S2[0].pts;
            }
            if ("aac" === t4.segmentCodec)
              for (var D = this.config.maxAudioFramesDrift, k = 0, R = L; k < S2.length; k++) {
                var I = S2[k], w = I.pts, C = w - R, _ = Math.abs(1e3 * C / s2);
                if (C <= -D * g2 && E2)
                  0 === k && (d.logger.warn("Audio frame @ " + (w / s2).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * C / s2) + " ms."), this.nextAudioPts = L = R = w);
                else if (C >= D * g2 && _ < 1e4 && E2) {
                  var P = Math.round(C / g2);
                  (R = w - P * g2) < 0 && (P--, R += g2), 0 === k && (this.nextAudioPts = L = R), d.logger.warn("[mp4-remuxer]: Injecting " + P + " audio frame @ " + (R / s2).toFixed(3) + "s due to " + Math.round(1e3 * C / s2) + " ms gap.");
                  for (var O = 0; O < P; O++) {
                    var x = Math.max(R, 0), F = n.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
                    F || (d.logger.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), F = I.unit.subarray()), S2.splice(k, 0, { unit: F, pts: x }), R += g2, k++;
                  }
                }
                I.pts = R, R += g2;
              }
            for (var M, N = null, U = null, B = 0, G = S2.length; G--; )
              B += S2[G].unit.byteLength;
            for (var K = 0, H = S2.length; K < H; K++) {
              var j = S2[K], V = j.unit, Y = j.pts;
              if (null !== U)
                y2[K - 1].duration = Math.round((Y - U) / h2);
              else {
                if (r3 && "aac" === t4.segmentCodec && (Y = L), N = Y, !(B > 0))
                  return;
                B += b;
                try {
                  M = new Uint8Array(B);
                } catch (t5) {
                  return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, { type: u.ErrorTypes.MUX_ERROR, details: u.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: B, reason: "fail allocating audio mdat " + B });
                }
                p2 || (new DataView(M.buffer).setUint32(0, B), M.set(o.types.mdat, 4));
              }
              M.set(V, b);
              var W = V.byteLength;
              b += W, y2.push(new T(true, c2, W, 0)), U = Y;
            }
            var q = y2.length;
            if (q) {
              var X = y2[y2.length - 1];
              this.nextAudioPts = L = U + h2 * X.duration;
              var z = p2 ? new Uint8Array(0) : o.moof(t4.sequenceNumber++, N / h2, f({}, t4, { samples: y2 }));
              t4.samples = [];
              var Q = N / s2, $ = L / s2, J = { data1: z, data2: M, startPTS: Q, endPTS: $, startDTS: Q, endDTS: $, type: "audio", hasAudio: true, hasVideo: false, nb: q };
              return this.isAudioContiguous = true, J;
            }
          }, e3.remuxEmptyAudio = function(t4, e4, r3, i3) {
            var a2 = t4.inputTimeScale, s2 = a2 / (t4.samplerate ? t4.samplerate : a2), o2 = this.nextAudioPts, l2 = (null !== o2 ? o2 : i3.startDTS * a2) + this._initDTS, u2 = i3.endDTS * a2 + this._initDTS, h2 = 1024 * s2, c2 = Math.ceil((u2 - l2) / h2), f2 = n.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
            if (d.logger.warn("[mp4-remuxer]: remux empty Audio"), f2) {
              for (var g2 = [], v2 = 0; v2 < c2; v2++) {
                var p2 = l2 + v2 * h2;
                g2.push({ unit: f2, pts: p2, dts: p2 });
              }
              return t4.samples = g2, this.remuxAudio(t4, e4, r3, false);
            }
            d.logger.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
          }, t3;
        }();
        function m(t3, e3) {
          var r3;
          if (null === e3)
            return t3;
          for (r3 = e3 < t3 ? -8589934592 : 8589934592; Math.abs(t3 - e3) > 4294967296; )
            t3 += r3;
          return t3;
        }
        function y(t3, e3, r3, i3) {
          var n2 = t3.samples.length;
          if (n2) {
            for (var a2 = t3.inputTimeScale, s2 = 0; s2 < n2; s2++) {
              var o2 = t3.samples[s2];
              o2.pts = m(o2.pts - r3, e3 * a2) / a2, o2.dts = m(o2.dts - i3, e3 * a2) / a2;
            }
            var l2 = t3.samples;
            return t3.samples = [], { samples: l2 };
          }
        }
        function E(t3, e3, r3) {
          var i3 = t3.samples.length;
          if (i3) {
            for (var n2 = t3.inputTimeScale, a2 = 0; a2 < i3; a2++) {
              var s2 = t3.samples[a2];
              s2.pts = m(s2.pts - r3, e3 * n2) / n2;
            }
            t3.samples.sort(function(t4, e4) {
              return t4.pts - e4.pts;
            });
            var o2 = t3.samples;
            return t3.samples = [], { samples: o2 };
          }
        }
        var T = function(t3, e3, r3, i3) {
          this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = e3, this.size = r3, this.cts = i3, this.flags = new S(t3);
        }, S = function(t3) {
          this.isLeading = 0, this.isDependedOn = 0, this.hasRedundancy = 0, this.degradPrio = 0, this.dependsOn = 1, this.isNonSync = 1, this.dependsOn = t3 ? 2 : 1, this.isNonSync = t3 ? 0 : 1;
        };
      }, 856: (t2, e2, r2) => {
        "use strict";
        var i2;
        r2.r(e2), r2.d(e2, { MetadataSchema: () => i2 }), function(t3) {
          t3.audioId3 = "org.id3", t3.dateRange = "com.apple.quicktime.HLS", t3.emsg = "https://aomedia.org/emsg/ID3";
        }(i2 || (i2 = {}));
      }, 308: (t2, e2, r2) => {
        "use strict";
        var i2, n;
        r2.r(e2), r2.d(e2, { PlaylistContextType: () => i2, PlaylistLevelType: () => n }), function(t3) {
          t3.MANIFEST = "manifest", t3.LEVEL = "level", t3.AUDIO_TRACK = "audioTrack", t3.SUBTITLE_TRACK = "subtitleTrack";
        }(i2 || (i2 = {})), function(t3) {
          t3.MAIN = "main", t3.AUDIO = "audio", t3.SUBTITLE = "subtitle";
        }(n || (n = {}));
      }, 300: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { default: () => i2 });
        const i2 = { hexDump: function(t3) {
          for (var e3 = "", r3 = 0; r3 < t3.length; r3++) {
            var i3 = t3[r3].toString(16);
            i3.length < 2 && (i3 = "0" + i3), e3 += i3;
          }
          return e3;
        } };
      }, 93: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { enableLogs: () => o, logger: () => l });
        var i2 = function() {
        }, n = { trace: i2, debug: i2, log: i2, warn: i2, info: i2, error: i2 }, a = n;
        function s(t3) {
          var e3 = self.console[t3];
          return e3 ? e3.bind(self.console, "[" + t3 + "] >") : i2;
        }
        function o(t3, e3) {
          if (self.console && true === t3 || "object" == typeof t3) {
            !function(t4) {
              for (var e4 = arguments.length, r3 = new Array(e4 > 1 ? e4 - 1 : 0), i3 = 1; i3 < e4; i3++)
                r3[i3 - 1] = arguments[i3];
              r3.forEach(function(e5) {
                a[e5] = t4[e5] ? t4[e5].bind(t4) : s(e5);
              });
            }(t3, "debug", "log", "info", "warn", "error");
            try {
              a.log('Debug logs enabled for "' + e3 + '"');
            } catch (t4) {
              a = n;
            }
          } else
            a = n;
        }
        var l = n;
      }, 63: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { RemuxerTrackIdConfig: () => d, appendUint8Array: () => k, bin2str: () => h, computeRawDurationFromSamples: () => L, discardEPB: () => C, findBox: () => p, getDuration: () => b, getStartDTS: () => S, mp4Box: () => P, mp4pssh: () => O, offsetStartDTS: () => A, parseEmsg: () => _, parseInitSegment: () => y, parsePssh: () => x, parseSEIMessageFromNALu: () => w, parseSamples: () => R, parseSegmentIndex: () => m, parseSinf: () => T, patchEncyptionData: () => E, readSint32: () => g, readUint16: () => c, readUint32: () => f, segmentValidRange: () => D, writeUint32: () => v });
        var i2 = r2(923), n = r2(145), a = r2(181), s = r2(93), o = r2(300), l = Math.pow(2, 32) - 1, u = [].push, d = { video: 1, audio: 2, id3: 3, text: 4 };
        function h(t3) {
          return String.fromCharCode.apply(null, t3);
        }
        function c(t3, e3) {
          var r3 = t3[e3] << 8 | t3[e3 + 1];
          return r3 < 0 ? 65536 + r3 : r3;
        }
        function f(t3, e3) {
          var r3 = g(t3, e3);
          return r3 < 0 ? 4294967296 + r3 : r3;
        }
        function g(t3, e3) {
          return t3[e3] << 24 | t3[e3 + 1] << 16 | t3[e3 + 2] << 8 | t3[e3 + 3];
        }
        function v(t3, e3, r3) {
          t3[e3] = r3 >> 24, t3[e3 + 1] = r3 >> 16 & 255, t3[e3 + 2] = r3 >> 8 & 255, t3[e3 + 3] = 255 & r3;
        }
        function p(t3, e3) {
          var r3 = [];
          if (!e3.length)
            return r3;
          for (var i3 = t3.byteLength, n2 = 0; n2 < i3; ) {
            var a2 = f(t3, n2), s2 = a2 > 1 ? n2 + a2 : i3;
            if (h(t3.subarray(n2 + 4, n2 + 8)) === e3[0])
              if (1 === e3.length)
                r3.push(t3.subarray(n2 + 8, s2));
              else {
                var o2 = p(t3.subarray(n2 + 8, s2), e3.slice(1));
                o2.length && u.apply(r3, o2);
              }
            n2 = s2;
          }
          return r3;
        }
        function m(t3) {
          var e3 = [], r3 = t3[0], i3 = 8, n2 = f(t3, i3);
          i3 += 4, i3 += 0 === r3 ? 8 : 16, i3 += 2;
          var a2 = t3.length + 0, s2 = c(t3, i3);
          i3 += 2;
          for (var o2 = 0; o2 < s2; o2++) {
            var l2 = i3, u2 = f(t3, l2);
            l2 += 4;
            var d2 = 2147483647 & u2;
            if (1 == (2147483648 & u2) >>> 31)
              return console.warn("SIDX has hierarchical references (not supported)"), null;
            var h2 = f(t3, l2);
            l2 += 4, e3.push({ referenceSize: d2, subsegmentDuration: h2, info: { duration: h2 / n2, start: a2, end: a2 + d2 - 1 } }), a2 += d2, i3 = l2 += 4;
          }
          return { earliestPresentationTime: 0, timescale: n2, version: r3, referencesCount: s2, references: e3 };
        }
        function y(t3) {
          for (var e3 = [], r3 = p(t3, ["moov", "trak"]), n2 = 0; n2 < r3.length; n2++) {
            var a2 = r3[n2], s2 = p(a2, ["tkhd"])[0];
            if (s2) {
              var o2 = s2[0], l2 = 0 === o2 ? 12 : 20, u2 = f(s2, l2), d2 = p(a2, ["mdia", "mdhd"])[0];
              if (d2) {
                var c2 = f(d2, l2 = 0 === (o2 = d2[0]) ? 12 : 20), g2 = p(a2, ["mdia", "hdlr"])[0];
                if (g2) {
                  var v2 = h(g2.subarray(8, 12)), m2 = { soun: i2.ElementaryStreamTypes.AUDIO, vide: i2.ElementaryStreamTypes.VIDEO }[v2];
                  if (m2) {
                    var y2 = p(a2, ["mdia", "minf", "stbl", "stsd"])[0], E2 = void 0;
                    y2 && (E2 = h(y2.subarray(12, 16))), e3[u2] = { timescale: c2, type: m2 }, e3[m2] = { timescale: c2, id: u2, codec: E2 };
                  }
                }
              }
            }
          }
          return p(t3, ["moov", "mvex", "trex"]).forEach(function(t4) {
            var r4 = f(t4, 4), i3 = e3[r4];
            i3 && (i3.default = { duration: f(t4, 12), flags: f(t4, 20) });
          }), e3;
        }
        function E(t3, e3) {
          if (!t3 || !e3)
            return t3;
          var r3 = e3.keyId;
          return r3 && e3.isCommonEncryption && p(t3, ["moov", "trak"]).forEach(function(t4) {
            var e4 = p(t4, ["mdia", "minf", "stbl", "stsd"])[0].subarray(8), i3 = p(e4, ["enca"]), n2 = i3.length > 0;
            n2 || (i3 = p(e4, ["encv"])), i3.forEach(function(t5) {
              p(n2 ? t5.subarray(28) : t5.subarray(78), ["sinf"]).forEach(function(t6) {
                var e5 = T(t6);
                if (e5) {
                  var i4 = e5.subarray(8, 24);
                  i4.some(function(t7) {
                    return 0 !== t7;
                  }) || (s.logger.log("[eme] Patching keyId in 'enc" + (n2 ? "a" : "v") + ">sinf>>tenc' box: " + o.default.hexDump(i4) + " -> " + o.default.hexDump(r3)), e5.set(r3, 8));
                }
              });
            });
          }), t3;
        }
        function T(t3) {
          var e3 = p(t3, ["schm"])[0];
          if (e3) {
            var r3 = h(e3.subarray(4, 8));
            if ("cbcs" === r3 || "cenc" === r3)
              return p(t3, ["schi", "tenc"])[0];
          }
          return s.logger.error("[eme] missing 'schm' box"), null;
        }
        function S(t3, e3) {
          return p(e3, ["moof", "traf"]).reduce(function(e4, r3) {
            var i3 = p(r3, ["tfdt"])[0], n2 = i3[0], a2 = p(r3, ["tfhd"]).reduce(function(e5, r4) {
              var a3 = f(r4, 4), s2 = t3[a3];
              if (s2) {
                var o2 = f(i3, 4);
                1 === n2 && (o2 *= Math.pow(2, 32), o2 += f(i3, 8));
                var l2 = o2 / (s2.timescale || 9e4);
                if (isFinite(l2) && (null === e5 || l2 < e5))
                  return l2;
              }
              return e5;
            }, null);
            return null !== a2 && isFinite(a2) && (null === e4 || a2 < e4) ? a2 : e4;
          }, null) || 0;
        }
        function b(t3, e3) {
          for (var r3 = 0, n2 = 0, a2 = 0, s2 = p(t3, ["moof", "traf"]), o2 = 0; o2 < s2.length; o2++) {
            var l2 = s2[o2], u2 = p(l2, ["tfhd"])[0], d2 = e3[f(u2, 4)];
            if (d2) {
              var h2 = d2.default, c2 = f(u2, 0) | (null == h2 ? void 0 : h2.flags), g2 = null == h2 ? void 0 : h2.duration;
              8 & c2 && (g2 = f(u2, 2 & c2 ? 12 : 8));
              for (var v2 = d2.timescale || 9e4, y2 = p(l2, ["trun"]), E2 = 0; E2 < y2.length; E2++)
                !(r3 = L(y2[E2])) && g2 && (r3 = g2 * f(y2[E2], 4)), d2.type === i2.ElementaryStreamTypes.VIDEO ? n2 += r3 / v2 : d2.type === i2.ElementaryStreamTypes.AUDIO && (a2 += r3 / v2);
            }
          }
          if (0 === n2 && 0 === a2) {
            for (var T2 = 0, S2 = p(t3, ["sidx"]), b2 = 0; b2 < S2.length; b2++) {
              var A2 = m(S2[b2]);
              null != A2 && A2.references && (T2 += A2.references.reduce(function(t4, e4) {
                return t4 + e4.info.duration || 0;
              }, 0));
            }
            return T2;
          }
          return n2 || a2;
        }
        function L(t3) {
          var e3 = f(t3, 0), r3 = 8;
          1 & e3 && (r3 += 4), 4 & e3 && (r3 += 4);
          for (var i3 = 0, n2 = f(t3, 4), a2 = 0; a2 < n2; a2++)
            256 & e3 && (i3 += f(t3, r3), r3 += 4), 512 & e3 && (r3 += 4), 1024 & e3 && (r3 += 4), 2048 & e3 && (r3 += 4);
          return i3;
        }
        function A(t3, e3, r3) {
          p(e3, ["moof", "traf"]).forEach(function(e4) {
            p(e4, ["tfhd"]).forEach(function(i3) {
              var n2 = f(i3, 4), a2 = t3[n2];
              if (a2) {
                var s2 = a2.timescale || 9e4;
                p(e4, ["tfdt"]).forEach(function(t4) {
                  var e5 = t4[0], i4 = f(t4, 4);
                  if (0 === e5)
                    i4 -= r3 * s2, v(t4, 4, i4 = Math.max(i4, 0));
                  else {
                    i4 *= Math.pow(2, 32), i4 += f(t4, 8), i4 -= r3 * s2, i4 = Math.max(i4, 0);
                    var n3 = Math.floor(i4 / (l + 1)), a3 = Math.floor(i4 % (l + 1));
                    v(t4, 4, n3), v(t4, 8, a3);
                  }
                });
              }
            });
          });
        }
        function D(t3) {
          var e3 = { valid: null, remainder: null }, r3 = p(t3, ["moof"]);
          if (!r3)
            return e3;
          if (r3.length < 2)
            return e3.remainder = t3, e3;
          var i3 = r3[r3.length - 1];
          return e3.valid = (0, n.sliceUint8)(t3, 0, i3.byteOffset - 8), e3.remainder = (0, n.sliceUint8)(t3, i3.byteOffset - 8), e3;
        }
        function k(t3, e3) {
          var r3 = new Uint8Array(t3.length + e3.length);
          return r3.set(t3), r3.set(e3, t3.length), r3;
        }
        function R(t3, e3) {
          var r3 = [], n2 = e3.samples, a2 = e3.timescale, s2 = e3.id, o2 = false;
          return p(n2, ["moof"]).map(function(l2) {
            var u2 = l2.byteOffset - 8;
            p(l2, ["traf"]).map(function(l3) {
              var d2 = p(l3, ["tfdt"]).map(function(t4) {
                var e4 = t4[0], r4 = f(t4, 4);
                return 1 === e4 && (r4 *= Math.pow(2, 32), r4 += f(t4, 8)), r4 / a2;
              })[0];
              return void 0 !== d2 && (t3 = d2), p(l3, ["tfhd"]).map(function(d3) {
                var h2 = f(d3, 4), c2 = 16777215 & f(d3, 0), v2 = 0, m2 = 0 != (16 & c2), y2 = 0, E2 = 0 != (32 & c2), T2 = 8;
                h2 === s2 && (0 != (1 & c2) && (T2 += 8), 0 != (2 & c2) && (T2 += 4), 0 != (8 & c2) && (v2 = f(d3, T2), T2 += 4), m2 && (y2 = f(d3, T2), T2 += 4), E2 && (T2 += 4), "video" === e3.type && (o2 = function(t4) {
                  if (!t4)
                    return false;
                  var e4 = t4.indexOf("."), r4 = e4 < 0 ? t4 : t4.substring(0, e4);
                  return "hvc1" === r4 || "hev1" === r4 || "dvh1" === r4 || "dvhe" === r4;
                }(e3.codec)), p(l3, ["trun"]).map(function(s3) {
                  var l4 = s3[0], d4 = 16777215 & f(s3, 0), h3 = 0 != (1 & d4), c3 = 0, p2 = 0 != (4 & d4), m3 = 0 != (256 & d4), E3 = 0, T3 = 0 != (512 & d4), S2 = 0, b2 = 0 != (1024 & d4), L2 = 0 != (2048 & d4), A2 = 0, D2 = f(s3, 4), k2 = 8;
                  h3 && (c3 = f(s3, k2), k2 += 4), p2 && (k2 += 4);
                  for (var R2 = c3 + u2, C2 = 0; C2 < D2; C2++) {
                    if (m3 ? (E3 = f(s3, k2), k2 += 4) : E3 = v2, T3 ? (S2 = f(s3, k2), k2 += 4) : S2 = y2, b2 && (k2 += 4), L2 && (A2 = 0 === l4 ? f(s3, k2) : g(s3, k2), k2 += 4), e3.type === i2.ElementaryStreamTypes.VIDEO)
                      for (var _2 = 0; _2 < S2; ) {
                        var P2 = f(n2, R2);
                        I(o2, n2[R2 += 4]) && w(n2.subarray(R2, R2 + P2), o2 ? 2 : 1, t3 + A2 / a2, r3), R2 += P2, _2 += P2 + 4;
                      }
                    t3 += E3 / a2;
                  }
                }));
              });
            });
          }), r3;
        }
        function I(t3, e3) {
          if (t3) {
            var r3 = e3 >> 1 & 63;
            return 39 === r3 || 40 === r3;
          }
          return 6 == (31 & e3);
        }
        function w(t3, e3, r3, i3) {
          var n2 = C(t3), s2 = 0;
          s2 += e3;
          for (var o2 = 0, l2 = 0, u2 = false, d2 = 0; s2 < n2.length; ) {
            o2 = 0;
            do {
              if (s2 >= n2.length)
                break;
              o2 += d2 = n2[s2++];
            } while (255 === d2);
            l2 = 0;
            do {
              if (s2 >= n2.length)
                break;
              l2 += d2 = n2[s2++];
            } while (255 === d2);
            var h2 = n2.length - s2;
            if (!u2 && 4 === o2 && s2 < n2.length) {
              if (u2 = true, 181 === n2[s2++]) {
                var g2 = c(n2, s2);
                if (s2 += 2, 49 === g2) {
                  var v2 = f(n2, s2);
                  if (s2 += 4, 1195456820 === v2) {
                    var p2 = n2[s2++];
                    if (3 === p2) {
                      var m2 = n2[s2++], y2 = 64 & m2, E2 = y2 ? 2 + 3 * (31 & m2) : 0, T2 = new Uint8Array(E2);
                      if (y2) {
                        T2[0] = m2;
                        for (var S2 = 1; S2 < E2; S2++)
                          T2[S2] = n2[s2++];
                      }
                      i3.push({ type: p2, payloadType: o2, pts: r3, bytes: T2 });
                    }
                  }
                }
              }
            } else if (5 === o2 && l2 < h2) {
              if (u2 = true, l2 > 16) {
                for (var b2 = [], L2 = 0; L2 < 16; L2++) {
                  var A2 = n2[s2++].toString(16);
                  b2.push(1 == A2.length ? "0" + A2 : A2), 3 !== L2 && 5 !== L2 && 7 !== L2 && 9 !== L2 || b2.push("-");
                }
                for (var D2 = l2 - 16, k2 = new Uint8Array(D2), R2 = 0; R2 < D2; R2++)
                  k2[R2] = n2[s2++];
                i3.push({ payloadType: o2, pts: r3, uuid: b2.join(""), userData: (0, a.utf8ArrayToStr)(k2), userDataBytes: k2 });
              }
            } else if (l2 < h2)
              s2 += l2;
            else if (l2 > h2)
              break;
          }
        }
        function C(t3) {
          for (var e3 = t3.byteLength, r3 = [], i3 = 1; i3 < e3 - 2; )
            0 === t3[i3] && 0 === t3[i3 + 1] && 3 === t3[i3 + 2] ? (r3.push(i3 + 2), i3 += 2) : i3++;
          if (0 === r3.length)
            return t3;
          var n2 = e3 - r3.length, a2 = new Uint8Array(n2), s2 = 0;
          for (i3 = 0; i3 < n2; s2++, i3++)
            s2 === r3[0] && (s2++, r3.shift()), a2[i3] = t3[s2];
          return a2;
        }
        function _(t3) {
          var e3 = t3[0], r3 = "", i3 = "", n2 = 0, a2 = 0, s2 = 0, o2 = 0, l2 = 0, u2 = 0;
          if (0 === e3) {
            for (; "\0" !== h(t3.subarray(u2, u2 + 1)); )
              r3 += h(t3.subarray(u2, u2 + 1)), u2 += 1;
            for (r3 += h(t3.subarray(u2, u2 + 1)), u2 += 1; "\0" !== h(t3.subarray(u2, u2 + 1)); )
              i3 += h(t3.subarray(u2, u2 + 1)), u2 += 1;
            i3 += h(t3.subarray(u2, u2 + 1)), u2 += 1, n2 = f(t3, 12), a2 = f(t3, 16), o2 = f(t3, 20), l2 = f(t3, 24), u2 = 28;
          } else if (1 === e3) {
            n2 = f(t3, u2 += 4);
            var d2 = f(t3, u2 += 4), c2 = f(t3, u2 += 4);
            for (u2 += 4, s2 = Math.pow(2, 32) * d2 + c2, Number.isSafeInteger(s2) || (s2 = Number.MAX_SAFE_INTEGER, console.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), o2 = f(t3, u2), l2 = f(t3, u2 += 4), u2 += 4; "\0" !== h(t3.subarray(u2, u2 + 1)); )
              r3 += h(t3.subarray(u2, u2 + 1)), u2 += 1;
            for (r3 += h(t3.subarray(u2, u2 + 1)), u2 += 1; "\0" !== h(t3.subarray(u2, u2 + 1)); )
              i3 += h(t3.subarray(u2, u2 + 1)), u2 += 1;
            i3 += h(t3.subarray(u2, u2 + 1)), u2 += 1;
          }
          return { schemeIdUri: r3, value: i3, timeScale: n2, presentationTime: s2, presentationTimeDelta: a2, eventDuration: o2, id: l2, payload: t3.subarray(u2, t3.byteLength) };
        }
        function P(t3) {
          for (var e3 = arguments.length, r3 = new Array(e3 > 1 ? e3 - 1 : 0), i3 = 1; i3 < e3; i3++)
            r3[i3 - 1] = arguments[i3];
          for (var n2 = r3.length, a2 = 8, s2 = n2; s2--; )
            a2 += r3[s2].byteLength;
          var o2 = new Uint8Array(a2);
          for (o2[0] = a2 >> 24 & 255, o2[1] = a2 >> 16 & 255, o2[2] = a2 >> 8 & 255, o2[3] = 255 & a2, o2.set(t3, 4), s2 = 0, a2 = 8; s2 < n2; s2++)
            o2.set(r3[s2], a2), a2 += r3[s2].byteLength;
          return o2;
        }
        function O(t3, e3, r3) {
          if (16 !== t3.byteLength)
            throw new RangeError("Invalid system id");
          var i3, n2, a2;
          if (e3) {
            i3 = 1, n2 = new Uint8Array(16 * e3.length);
            for (var s2 = 0; s2 < e3.length; s2++) {
              var o2 = e3[s2];
              if (16 !== o2.byteLength)
                throw new RangeError("Invalid key");
              n2.set(o2, 16 * s2);
            }
          } else
            i3 = 0, n2 = new Uint8Array();
          i3 > 0 ? (a2 = new Uint8Array(4), e3.length > 0 && new DataView(a2.buffer).setUint32(0, e3.length, false)) : a2 = new Uint8Array();
          var l2 = new Uint8Array(4);
          return r3 && r3.byteLength > 0 && new DataView(l2.buffer).setUint32(0, r3.byteLength, false), P([112, 115, 115, 104], new Uint8Array([i3, 0, 0, 0]), t3, a2, n2, l2, r3 || new Uint8Array());
        }
        function x(t3) {
          if (!(t3 instanceof ArrayBuffer) || t3.byteLength < 32)
            return null;
          var e3 = { version: 0, systemId: "", kids: null, data: null }, r3 = new DataView(t3), i3 = r3.getUint32(0);
          if (t3.byteLength !== i3 && i3 > 44)
            return null;
          if (1886614376 !== r3.getUint32(4))
            return null;
          if (e3.version = r3.getUint32(8) >>> 24, e3.version > 1)
            return null;
          e3.systemId = o.default.hexDump(new Uint8Array(t3, 12, 16));
          var n2 = r3.getUint32(28);
          if (0 === e3.version) {
            if (i3 - 32 < n2)
              return null;
            e3.data = new Uint8Array(t3, 32, n2);
          } else if (1 === e3.version) {
            e3.kids = [];
            for (var a2 = 0; a2 < n2; a2++)
              e3.kids.push(new Uint8Array(t3, 32 + 16 * a2, 16));
          }
          return e3;
        }
      }, 673: (t2, e2, r2) => {
        "use strict";
        function i2(t3, e3, r3, i3) {
          void 0 === r3 && (r3 = 1), void 0 === i3 && (i3 = false);
          var n2 = t3 * e3 * r3;
          return i3 ? Math.round(n2) : n2;
        }
        function n(t3, e3, r3, n2) {
          return void 0 === r3 && (r3 = 1), void 0 === n2 && (n2 = false), i2(t3, e3, 1 / r3, n2);
        }
        function a(t3, e3) {
          return void 0 === e3 && (e3 = false), i2(t3, 1e3, 1 / 9e4, e3);
        }
        function s(t3, e3) {
          return void 0 === e3 && (e3 = 1), i2(t3, 9e4, 1 / e3);
        }
        r2.r(e2), r2.d(e2, { toMpegTsClockFromTimescale: () => s, toMsFromMpegTsClock: () => a, toTimescaleFromBase: () => i2, toTimescaleFromScale: () => n });
      }, 145: (t2, e2, r2) => {
        "use strict";
        function i2(t3, e3, r3) {
          return Uint8Array.prototype.slice ? t3.slice(e3, r3) : new Uint8Array(Array.prototype.slice.call(t3, e3, r3));
        }
        r2.r(e2), r2.d(e2, { sliceUint8: () => i2 });
      }, 729: (t2) => {
        "use strict";
        var e2 = Object.prototype.hasOwnProperty, r2 = "~";
        function i2() {
        }
        function n(t3, e3, r3) {
          this.fn = t3, this.context = e3, this.once = r3 || false;
        }
        function a(t3, e3, i3, a2, s2) {
          if ("function" != typeof i3)
            throw new TypeError("The listener must be a function");
          var o2 = new n(i3, a2 || t3, s2), l = r2 ? r2 + e3 : e3;
          return t3._events[l] ? t3._events[l].fn ? t3._events[l] = [t3._events[l], o2] : t3._events[l].push(o2) : (t3._events[l] = o2, t3._eventsCount++), t3;
        }
        function s(t3, e3) {
          0 == --t3._eventsCount ? t3._events = new i2() : delete t3._events[e3];
        }
        function o() {
          this._events = new i2(), this._eventsCount = 0;
        }
        Object.create && (i2.prototype = /* @__PURE__ */ Object.create(null), new i2().__proto__ || (r2 = false)), o.prototype.eventNames = function() {
          var t3, i3, n2 = [];
          if (0 === this._eventsCount)
            return n2;
          for (i3 in t3 = this._events)
            e2.call(t3, i3) && n2.push(r2 ? i3.slice(1) : i3);
          return Object.getOwnPropertySymbols ? n2.concat(Object.getOwnPropertySymbols(t3)) : n2;
        }, o.prototype.listeners = function(t3) {
          var e3 = r2 ? r2 + t3 : t3, i3 = this._events[e3];
          if (!i3)
            return [];
          if (i3.fn)
            return [i3.fn];
          for (var n2 = 0, a2 = i3.length, s2 = new Array(a2); n2 < a2; n2++)
            s2[n2] = i3[n2].fn;
          return s2;
        }, o.prototype.listenerCount = function(t3) {
          var e3 = r2 ? r2 + t3 : t3, i3 = this._events[e3];
          return i3 ? i3.fn ? 1 : i3.length : 0;
        }, o.prototype.emit = function(t3, e3, i3, n2, a2, s2) {
          var o2 = r2 ? r2 + t3 : t3;
          if (!this._events[o2])
            return false;
          var l, u, d = this._events[o2], h = arguments.length;
          if (d.fn) {
            switch (d.once && this.removeListener(t3, d.fn, void 0, true), h) {
              case 1:
                return d.fn.call(d.context), true;
              case 2:
                return d.fn.call(d.context, e3), true;
              case 3:
                return d.fn.call(d.context, e3, i3), true;
              case 4:
                return d.fn.call(d.context, e3, i3, n2), true;
              case 5:
                return d.fn.call(d.context, e3, i3, n2, a2), true;
              case 6:
                return d.fn.call(d.context, e3, i3, n2, a2, s2), true;
            }
            for (u = 1, l = new Array(h - 1); u < h; u++)
              l[u - 1] = arguments[u];
            d.fn.apply(d.context, l);
          } else {
            var c, f = d.length;
            for (u = 0; u < f; u++)
              switch (d[u].once && this.removeListener(t3, d[u].fn, void 0, true), h) {
                case 1:
                  d[u].fn.call(d[u].context);
                  break;
                case 2:
                  d[u].fn.call(d[u].context, e3);
                  break;
                case 3:
                  d[u].fn.call(d[u].context, e3, i3);
                  break;
                case 4:
                  d[u].fn.call(d[u].context, e3, i3, n2);
                  break;
                default:
                  if (!l)
                    for (c = 1, l = new Array(h - 1); c < h; c++)
                      l[c - 1] = arguments[c];
                  d[u].fn.apply(d[u].context, l);
              }
          }
          return true;
        }, o.prototype.on = function(t3, e3, r3) {
          return a(this, t3, e3, r3, false);
        }, o.prototype.once = function(t3, e3, r3) {
          return a(this, t3, e3, r3, true);
        }, o.prototype.removeListener = function(t3, e3, i3, n2) {
          var a2 = r2 ? r2 + t3 : t3;
          if (!this._events[a2])
            return this;
          if (!e3)
            return s(this, a2), this;
          var o2 = this._events[a2];
          if (o2.fn)
            o2.fn !== e3 || n2 && !o2.once || i3 && o2.context !== i3 || s(this, a2);
          else {
            for (var l = 0, u = [], d = o2.length; l < d; l++)
              (o2[l].fn !== e3 || n2 && !o2[l].once || i3 && o2[l].context !== i3) && u.push(o2[l]);
            u.length ? this._events[a2] = 1 === u.length ? u[0] : u : s(this, a2);
          }
          return this;
        }, o.prototype.removeAllListeners = function(t3) {
          var e3;
          return t3 ? (e3 = r2 ? r2 + t3 : t3, this._events[e3] && s(this, e3)) : (this._events = new i2(), this._eventsCount = 0), this;
        }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prefixed = r2, o.EventEmitter = o, t2.exports = o;
      }, 945: function(t2) {
        var e2, r2, i2, n, a;
        e2 = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, r2 = /^(?=([^\/?#]*))\1([^]*)$/, i2 = /(?:\/|^)\.(?=\/)/g, n = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, a = { buildAbsoluteURL: function(t3, e3, i3) {
          if (i3 = i3 || {}, t3 = t3.trim(), !(e3 = e3.trim())) {
            if (!i3.alwaysNormalize)
              return t3;
            var n2 = a.parseURL(t3);
            if (!n2)
              throw new Error("Error trying to parse base URL.");
            return n2.path = a.normalizePath(n2.path), a.buildURLFromParts(n2);
          }
          var s = a.parseURL(e3);
          if (!s)
            throw new Error("Error trying to parse relative URL.");
          if (s.scheme)
            return i3.alwaysNormalize ? (s.path = a.normalizePath(s.path), a.buildURLFromParts(s)) : e3;
          var o = a.parseURL(t3);
          if (!o)
            throw new Error("Error trying to parse base URL.");
          if (!o.netLoc && o.path && "/" !== o.path[0]) {
            var l = r2.exec(o.path);
            o.netLoc = l[1], o.path = l[2];
          }
          o.netLoc && !o.path && (o.path = "/");
          var u = { scheme: o.scheme, netLoc: s.netLoc, path: null, params: s.params, query: s.query, fragment: s.fragment };
          if (!s.netLoc && (u.netLoc = o.netLoc, "/" !== s.path[0]))
            if (s.path) {
              var d = o.path, h = d.substring(0, d.lastIndexOf("/") + 1) + s.path;
              u.path = a.normalizePath(h);
            } else
              u.path = o.path, s.params || (u.params = o.params, s.query || (u.query = o.query));
          return null === u.path && (u.path = i3.alwaysNormalize ? a.normalizePath(s.path) : s.path), a.buildURLFromParts(u);
        }, parseURL: function(t3) {
          var r3 = e2.exec(t3);
          return r3 ? { scheme: r3[1] || "", netLoc: r3[2] || "", path: r3[3] || "", params: r3[4] || "", query: r3[5] || "", fragment: r3[6] || "" } : null;
        }, normalizePath: function(t3) {
          for (t3 = t3.split("").reverse().join("").replace(i2, ""); t3.length !== (t3 = t3.replace(n, "")).length; )
            ;
          return t3.split("").reverse().join("");
        }, buildURLFromParts: function(t3) {
          return t3.scheme + t3.netLoc + t3.path + t3.params + t3.query + t3.fragment;
        } }, t2.exports = a;
      } }, e = {};
      function r(i2) {
        var n = e[i2];
        if (void 0 !== n)
          return n.exports;
        var a = e[i2] = { exports: {} };
        return t[i2].call(a.exports, a, a.exports, r), a.exports;
      }
      r.m = t, r.n = (t2) => {
        var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return r.d(e2, { a: e2 }), e2;
      }, r.d = (t2, e2) => {
        for (var i2 in e2)
          r.o(e2, i2) && !r.o(t2, i2) && Object.defineProperty(t2, i2, { enumerable: true, get: e2[i2] });
      }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      };
      var i = r(76);
      return i.default;
    })());
  }
});
export default require_hls_min();
//# sourceMappingURL=hls__js_dist_hls__min.js.map
